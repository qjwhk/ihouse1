/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Administrator on 2017/11/28.
	 */
	'';

	var _reactRouter = __webpack_require__(1);

	/**导航配置**/
	var React = __webpack_require__(24);
	var ReactDOM = __webpack_require__(240);
	var Main = __webpack_require__(241);
	var Login = __webpack_require__(251);
	var Device = __webpack_require__(256);
	var GroupList = __webpack_require__(265);
	var Scene = __webpack_require__(267);
	var Setting = __webpack_require__(269);
	var SettingDetail = __webpack_require__(272);
	var News = __webpack_require__(274);
	var Alertlist = __webpack_require__(275);
	var Mine = __webpack_require__(276);
	var SceneDetail = __webpack_require__(277);
	var SceneUpdate = __webpack_require__(282);
	var GroupDevice = __webpack_require__(286);

	var Ltctm = __webpack_require__(289);
	var Wdrxj = __webpack_require__(293);
	var Swtk = __webpack_require__(295);
	var Swtk0 = __webpack_require__(296);
	var Clrl = __webpack_require__(297);
	var Clrl6 = __webpack_require__(299);
	var Irbyt = __webpack_require__(300);
	var Sspmw = __webpack_require__(303);
	var Actpc = __webpack_require__(304);
	var Clr1m = __webpack_require__(305);
	var Ssith = __webpack_require__(307);
	var Sswat = __webpack_require__(308);
	var Swrmt = __webpack_require__(309);
	var Sslux = __webpack_require__(311);
	var Bgm = __webpack_require__(312);
	var Ty = __webpack_require__(315);
	var Kt = __webpack_require__(316);
	var Cl = __webpack_require__(317);
	var Adtpc = __webpack_require__(318);
	var Clpu6 = __webpack_require__(319);
	var Dlhtl = __webpack_require__(320);
	var Dllck = __webpack_require__(322);
	var Dlhtk = __webpack_require__(323);
	var Hmlck = __webpack_require__(324);
	var Product = __webpack_require__(325);
	var Ltlev = __webpack_require__(326);

	var Video = __webpack_require__(327);
	var VideoDetail = __webpack_require__(330);
	var VideoDetailNew = __webpack_require__(331);

	var Ddc = __webpack_require__(332);
	var DdcDetail = __webpack_require__(333);
	var User = __webpack_require__(334);
	var AuthList = __webpack_require__(337);
	var DDCChoose = __webpack_require__(338);
	var TrigView = __webpack_require__(339);
	var ExeView = __webpack_require__(342);
	var Register = __webpack_require__(343);
	var Forget = __webpack_require__(344);

	var Iframe = __webpack_require__(345);
	var Test = __webpack_require__(346);
	var Prompt = __webpack_require__(348);
	var Otherhelp = __webpack_require__(350);
	var Sencetime = __webpack_require__(351);
	var SceneTimeView = __webpack_require__(352);
	var UpdateGroupDev = __webpack_require__(353);
	var Robot = __webpack_require__(354);

	var routes = React.createElement(
	  _reactRouter.Router,
	  { history: _reactRouter.hashHistory },
	  React.createElement(_reactRouter.Route, { path: '/', component: Login, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/login', component: Login, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'main', component: Main, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/main', component: Main, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'device', component: Device, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'groupList', component: GroupList, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/groupDevice/:id/:name', component: GroupDevice, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'updateGroupDev/:id', component: UpdateGroupDev, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'scene', component: Scene, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'setting', component: Setting, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'setting/:id', component: SettingDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'sceneDetail', component: SceneDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'sceneupdate', component: SceneUpdate, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'sceneupdate/:id', component: SceneUpdate, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'news', component: News, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'alertlist', component: Alertlist, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'mine', component: Mine, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'video', component: Video, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'videodetail', component: VideoDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'videodetail/:id', component: VideoDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'videodetailnew/:id', component: VideoDetailNew, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/ltctm/:id', component: Ltctm, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/wdrxj/:id', component: Wdrxj, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/swtk/:id', component: Swtk, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/swtk0/:id', component: Swtk0, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/clrl/:id', component: Clrl, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/clrl6/:id', component: Clrl6, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/irbyt/:id', component: Irbyt, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/sspmw/:id', component: Sspmw, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/actpc/:id', component: Actpc, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/adtpc/:id', component: Adtpc, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/clr1m/:id', component: Clr1m, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/ssith/:id', component: Ssith, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/sswat/:id', component: Sswat, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/dlhtl/:id', component: Dlhtl, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/dllck/:id', component: Dllck, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/dlhtk/:id', component: Dlhtk, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/hmlck/:id', component: Hmlck, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/swrmt/:id', component: Swrmt, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/sslux/:id', component: Sslux, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/bgm/:id', component: Bgm, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/ty/:id', component: Ty, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/kt/:id', component: Kt, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/cl/:id', component: Cl, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/clpu6/:id', component: Clpu6, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/product/:id', component: Product, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: '/ltlev/:id', component: Ltlev, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'ddc', component: Ddc, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'ddcdetail', component: DdcDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'ddcdetail/:id', component: DdcDetail, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'user', component: User, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'authList/:id', component: AuthList, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'ddcChoose/:id', component: DDCChoose, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'trigView/:id/:did', component: TrigView, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'exeView/:id/:did', component: ExeView, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'scenetimeview', component: SceneTimeView, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'scenetimeview/:sceneid/:id', component: SceneTimeView, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'register', components: Register, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'forget', components: Forget, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'iframe', component: Iframe, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'iframe/:id', component: Iframe, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'test', component: Test, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'test/:id', component: Test, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'prompt/:id/:tip', components: Prompt, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'prompt/:id', components: Prompt, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'otherhelp', components: Otherhelp, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'sencetime/:id', components: Sencetime, onEnter: enterHook }),
	  React.createElement(_reactRouter.Route, { path: 'robot', components: Robot, onEnter: enterHook })
	);

	function enterHook(nextState, replace, callback) {
	  // var pathname = nextState.location.pathname;
	  callback();
	}

	ReactDOM.render(routes, document.getElementById('container'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* components */
	'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Router2 = __webpack_require__(2);

	var _Router3 = _interopRequireDefault(_Router2);

	exports.Router = _Router3['default'];

	var _Link2 = __webpack_require__(213);

	var _Link3 = _interopRequireDefault(_Link2);

	exports.Link = _Link3['default'];

	var _IndexLink2 = __webpack_require__(214);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	exports.IndexLink = _IndexLink3['default'];

	/* components (configuration) */

	var _IndexRedirect2 = __webpack_require__(215);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	exports.IndexRedirect = _IndexRedirect3['default'];

	var _IndexRoute2 = __webpack_require__(217);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	exports.IndexRoute = _IndexRoute3['default'];

	var _Redirect2 = __webpack_require__(216);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	exports.Redirect = _Redirect3['default'];

	var _Route2 = __webpack_require__(218);

	var _Route3 = _interopRequireDefault(_Route2);

	exports.Route = _Route3['default'];

	/* mixins */

	var _History2 = __webpack_require__(219);

	var _History3 = _interopRequireDefault(_History2);

	exports.History = _History3['default'];

	var _Lifecycle2 = __webpack_require__(220);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	exports.Lifecycle = _Lifecycle3['default'];

	var _RouteContext2 = __webpack_require__(221);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	exports.RouteContext = _RouteContext3['default'];

	/* utils */

	var _useRoutes2 = __webpack_require__(222);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	exports.useRoutes = _useRoutes3['default'];

	var _RouteUtils = __webpack_require__(207);

	exports.createRoutes = _RouteUtils.createRoutes;

	var _RouterContext2 = __webpack_require__(209);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	exports.RouterContext = _RouterContext3['default'];

	var _RoutingContext2 = __webpack_require__(223);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	exports.RoutingContext = _RoutingContext3['default'];

	var _PropTypes2 = __webpack_require__(208);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	exports.PropTypes = _PropTypes3['default'];

	var _match2 = __webpack_require__(224);

	var _match3 = _interopRequireDefault(_match2);

	exports.match = _match3['default'];

	var _useRouterHistory2 = __webpack_require__(232);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	exports.useRouterHistory = _useRouterHistory3['default'];

	var _PatternUtils = __webpack_require__(201);

	exports.formatPattern = _PatternUtils.formatPattern;

	/* histories */

	var _browserHistory2 = __webpack_require__(234);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	exports.browserHistory = _browserHistory3['default'];

	var _hashHistory2 = __webpack_require__(237);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	exports.hashHistory = _hashHistory3['default'];

	var _createMemoryHistory2 = __webpack_require__(238);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	exports.createMemoryHistory = _createMemoryHistory3['default'];

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibCreateHashHistory = __webpack_require__(4);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _historyLibUseQueries = __webpack_require__(21);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager = __webpack_require__(198);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _PropTypes = __webpack_require__(208);

	var _RouterContext = __webpack_require__(209);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(207);

	var _RouterUtils = __webpack_require__(212);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}

	var _React$PropTypes = _react2['default'].PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */
	var Router = _react2['default'].createClass({
	  displayName: 'Router',

	  propTypes: {
	    history: object,
	    children: _PropTypes.routes,
	    routes: _PropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2['default'].createElement(_RouterContext2['default'], props);
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },

	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : undefined;

	    var _createRouterObjects = this.createRouterObjects();

	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;

	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });

	    this.history = history;
	    this.router = router;
	  },

	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext;
	    }

	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;

	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }

	    var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes || children));
	    var router = _RouterUtils.createRouterObject(history, transitionManager);
	    var routingHistory = _RouterUtils.createRoutingHistory(history, transitionManager);

	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },

	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;

	    var createHistory = undefined;
	    if (history) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : undefined;
	      createHistory = function () {
	        return history;
	      };
	    } else {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : undefined;
	      createHistory = _historyLibCreateHashHistory2['default'];
	    }

	    return _historyLibUseQueries2['default'](createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },

	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },

	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;

	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }

	});

	exports['default'] = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(7);

	var _PathUtils = __webpack_require__(8);

	var _ExecutionEnvironment = __webpack_require__(9);

	var _DOMUtils = __webpack_require__(10);

	var _DOMStateStorage = __webpack_require__(11);

	var _createDOMHistory = __webpack_require__(12);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	'';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 10 */
/***/ function(module, exports) {

	'';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(9);

	var _DOMUtils = __webpack_require__(10);

	var _createHistory = __webpack_require__(13);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));

	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen
	  });
	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var _deepEqual = __webpack_require__(14);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _PathUtils = __webpack_require__(8);

	var _AsyncUtils = __webpack_require__(17);

	var _Actions = __webpack_require__(7);

	var _createLocation2 = __webpack_require__(18);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(19);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(20);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if (typeof action === 'object') {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}

	exports['default'] = createHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(15);
	var isArguments = __webpack_require__(16);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 15 */
/***/ function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;

	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 16 */
/***/ function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 17 */
/***/ function(module, exports) {

	"";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var _Actions = __webpack_require__(7);

	var _PathUtils = __webpack_require__(8);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _PathUtils.parsePath(location);

	  if (typeof action === 'object') {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}

	exports['default'] = createLocation;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecate(fn, message) {
	  return function () {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}

	exports['default'] = deprecate;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(22);

	var _runTransitionHook = __webpack_require__(19);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(8);

	var _deprecate = __webpack_require__(20);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }

	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }

	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'';
	var strictUriEncode = __webpack_require__(23);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 23 */
/***/ function(module, exports) {

	'';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'';

	module.exports = __webpack_require__(25);
	module.exports=__webpack_require__(180)


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'';

	var ReactDOM = __webpack_require__(26);
	var ReactDOMServer = __webpack_require__(170);
	var ReactIsomorphic = __webpack_require__(174);

	var assign = __webpack_require__(61);
	var deprecated = __webpack_require__(179);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;

	module.exports = React;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'';

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactDOMTextComponent = __webpack_require__(28);
	var ReactDefaultInjection = __webpack_require__(93);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactMount = __webpack_require__(50);
	var ReactPerf = __webpack_require__(40);
	var ReactReconciler = __webpack_require__(72);
	var ReactUpdates = __webpack_require__(76);
	var ReactVersion = __webpack_require__(168);

	var findDOMNode = __webpack_require__(113);
	var renderSubtreeIntoContainer = __webpack_require__(169);
	var warning = __webpack_require__(47);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(31);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'';

	var DOMChildrenOperations = __webpack_require__(29);
	var DOMPropertyOperations = __webpack_require__(44);
	var ReactComponentBrowserEnvironment = __webpack_require__(48);
	var ReactMount = __webpack_require__(50);

	var assign = __webpack_require__(61);
	var escapeTextContentForBrowser = __webpack_require__(43);
	var setTextContent = __webpack_require__(42);
	var validateDOMNesting = __webpack_require__(92);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'';

	var Danger = __webpack_require__(30);
	var ReactMultiChildUpdateTypes = __webpack_require__(38);
	var ReactPerf = __webpack_require__(40);

	var setInnerHTML = __webpack_require__(41);
	var setTextContent = __webpack_require__(42);
	var invariant = __webpack_require__(35);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var createNodesFromMarkup = __webpack_require__(32);
	var emptyFunction = __webpack_require__(37);
	var getMarkupWrap = __webpack_require__(36);
	var invariant = __webpack_require__(35);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var createArrayFromMixed = __webpack_require__(33);
	var getMarkupWrap = __webpack_require__(36);
	var invariant = __webpack_require__(35);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'';

	var toArray = __webpack_require__(34);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var invariant = __webpack_require__(35);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'';

	var keyMirror = __webpack_require__(39);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);
	var escapeTextContentForBrowser = __webpack_require__(43);
	var setInnerHTML = __webpack_require__(41);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'';

	var DOMProperty = __webpack_require__(45);
	var ReactPerf = __webpack_require__(40);

	var quoteAttributeValueForBrowser = __webpack_require__(46);
	var warning = __webpack_require__(47);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'';

	var invariant = __webpack_require__(35);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'';

	var escapeTextContentForBrowser = __webpack_require__(43);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'';

	var emptyFunction = __webpack_require__(37);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'';

	var ReactDOMIDOperations = __webpack_require__(49);
	var ReactMount = __webpack_require__(50);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'';

	var DOMChildrenOperations = __webpack_require__(29);
	var DOMPropertyOperations = __webpack_require__(44);
	var ReactMount = __webpack_require__(50);
	var ReactPerf = __webpack_require__(40);

	var invariant = __webpack_require__(35);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'';

	var DOMProperty = __webpack_require__(45);
	var ReactBrowserEventEmitter = __webpack_require__(51);
	var ReactCurrentOwner = __webpack_require__(27);
	var ReactDOMFeatureFlags = __webpack_require__(63);
	var ReactElement = __webpack_require__(64);
	var ReactEmptyComponentRegistry = __webpack_require__(66);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactMarkupChecksum = __webpack_require__(70);
	var ReactPerf = __webpack_require__(40);
	var ReactReconciler = __webpack_require__(72);
	var ReactUpdateQueue = __webpack_require__(75);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var emptyObject = __webpack_require__(80);
	var containsNode = __webpack_require__(81);
	var instantiateReactComponent = __webpack_require__(84);
	var invariant = __webpack_require__(35);
	var setInnerHTML = __webpack_require__(41);
	var shouldUpdateReactComponent = __webpack_require__(89);
	var validateDOMNesting = __webpack_require__(92);
	var warning = __webpack_require__(47);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPluginHub = __webpack_require__(53);
	var EventPluginRegistry = __webpack_require__(54);
	var ReactEventEmitterMixin = __webpack_require__(59);
	var ReactPerf = __webpack_require__(40);
	var ViewportMetrics = __webpack_require__(60);

	var assign = __webpack_require__(61);
	var isEventSupported = __webpack_require__(62);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'';

	var keyMirror = __webpack_require__(39);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'';

	var EventPluginRegistry = __webpack_require__(54);
	var EventPluginUtils = __webpack_require__(55);
	var ReactErrorUtils = __webpack_require__(56);

	var accumulateInto = __webpack_require__(57);
	var forEachAccumulated = __webpack_require__(58);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var ReactErrorUtils = __webpack_require__(56);

	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'';

	var EventPluginHub = __webpack_require__(53);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 63 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'';

	var ReactCurrentOwner = __webpack_require__(27);

	var assign = __webpack_require__(61);
	var canDefineProperty = __webpack_require__(65);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 66 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'';

	var ReactRootIndex = __webpack_require__(68);

	var invariant = __webpack_require__(35);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 68 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'';

	var adler32 = __webpack_require__(71);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'';

	var ReactRef = __webpack_require__(73);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'';

	var ReactOwner = __webpack_require__(74);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'';

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactElement = __webpack_require__(64);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'';

	var CallbackQueue = __webpack_require__(77);
	var PooledClass = __webpack_require__(78);
	var ReactPerf = __webpack_require__(40);
	var ReactReconciler = __webpack_require__(72);
	var Transaction = __webpack_require__(79);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'';

	var PooledClass = __webpack_require__(78);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'';

	var isTextNode = __webpack_require__(82);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'';

	var isNode = __webpack_require__(83);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'';

	var ReactCompositeComponent = __webpack_require__(85);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactNativeComponent = __webpack_require__(91);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'';

	var ReactComponentEnvironment = __webpack_require__(86);
	var ReactCurrentOwner = __webpack_require__(27);
	var ReactElement = __webpack_require__(64);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactPerf = __webpack_require__(40);
	var ReactPropTypeLocations = __webpack_require__(87);
	var ReactPropTypeLocationNames = __webpack_require__(88);
	var ReactReconciler = __webpack_require__(72);
	var ReactUpdateQueue = __webpack_require__(75);

	var assign = __webpack_require__(61);
	var emptyObject = __webpack_require__(80);
	var invariant = __webpack_require__(35);
	var shouldUpdateReactComponent = __webpack_require__(89);
	var warning = __webpack_require__(47);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'';

	var invariant = __webpack_require__(35);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'';

	var keyMirror = __webpack_require__(39);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'';

	var ReactElement = __webpack_require__(64);
	var ReactEmptyComponentRegistry = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(72);

	var assign = __webpack_require__(61);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'';

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'';

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);
	var warning = __webpack_require__(47);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'';

	var BeforeInputEventPlugin = __webpack_require__(94);
	var ChangeEventPlugin = __webpack_require__(102);
	var ClientReactRootIndex = __webpack_require__(105);
	var DefaultEventPluginOrder = __webpack_require__(106);
	var EnterLeaveEventPlugin = __webpack_require__(107);
	var ExecutionEnvironment = __webpack_require__(31);
	var HTMLDOMPropertyConfig = __webpack_require__(111);
	var ReactBrowserComponentMixin = __webpack_require__(112);
	var ReactComponentBrowserEnvironment = __webpack_require__(48);
	var ReactDefaultBatchingStrategy = __webpack_require__(114);
	var ReactDOMComponent = __webpack_require__(115);
	var ReactDOMTextComponent = __webpack_require__(28);
	var ReactEventListener = __webpack_require__(140);
	var ReactInjection = __webpack_require__(143);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactMount = __webpack_require__(50);
	var ReactReconcileTransaction = __webpack_require__(147);
	var SelectEventPlugin = __webpack_require__(152);
	var ServerReactRootIndex = __webpack_require__(153);
	var SimpleEventPlugin = __webpack_require__(154);
	var SVGDOMPropertyConfig = __webpack_require__(163);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(164);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPropagators = __webpack_require__(95);
	var ExecutionEnvironment = __webpack_require__(31);
	var FallbackCompositionState = __webpack_require__(96);
	var SyntheticCompositionEvent = __webpack_require__(98);
	var SyntheticInputEvent = __webpack_require__(100);

	var keyOf = __webpack_require__(101);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPluginHub = __webpack_require__(53);

	var warning = __webpack_require__(47);

	var accumulateInto = __webpack_require__(57);
	var forEachAccumulated = __webpack_require__(58);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'';

	var PooledClass = __webpack_require__(78);

	var assign = __webpack_require__(61);
	var getTextContentAccessor = __webpack_require__(97);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticEvent = __webpack_require__(99);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'';

	var PooledClass = __webpack_require__(78);

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);
	var warning = __webpack_require__(47);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	  this.target = nativeEventTarget;
	  this.currentTarget = nativeEventTarget;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticEvent = __webpack_require__(99);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 101 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPluginHub = __webpack_require__(53);
	var EventPropagators = __webpack_require__(95);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(76);
	var SyntheticEvent = __webpack_require__(99);

	var getEventTarget = __webpack_require__(103);
	var isEventSupported = __webpack_require__(62);
	var isTextInputElement = __webpack_require__(104);
	var keyOf = __webpack_require__(101);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'';

	var keyOf = __webpack_require__(101);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPropagators = __webpack_require__(95);
	var SyntheticMouseEvent = __webpack_require__(108);

	var ReactMount = __webpack_require__(50);
	var keyOf = __webpack_require__(101);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticUIEvent = __webpack_require__(109);
	var ViewportMetrics = __webpack_require__(60);

	var getEventModifierState = __webpack_require__(110);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticEvent = __webpack_require__(99);

	var getEventTarget = __webpack_require__(103);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'';

	var DOMProperty = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(31);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'';

	var ReactInstanceMap = __webpack_require__(69);

	var findDOMNode = __webpack_require__(113);
	var warning = __webpack_require__(47);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'';

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactMount = __webpack_require__(50);

	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'';

	var ReactUpdates = __webpack_require__(76);
	var Transaction = __webpack_require__(79);

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'';

	var AutoFocusUtils = __webpack_require__(116);
	var CSSPropertyOperations = __webpack_require__(118);
	var DOMProperty = __webpack_require__(45);
	var DOMPropertyOperations = __webpack_require__(44);
	var EventConstants = __webpack_require__(52);
	var ReactBrowserEventEmitter = __webpack_require__(51);
	var ReactComponentBrowserEnvironment = __webpack_require__(48);
	var ReactDOMButton = __webpack_require__(126);
	var ReactDOMInput = __webpack_require__(127);
	var ReactDOMOption = __webpack_require__(131);
	var ReactDOMSelect = __webpack_require__(134);
	var ReactDOMTextarea = __webpack_require__(135);
	var ReactMount = __webpack_require__(50);
	var ReactMultiChild = __webpack_require__(136);
	var ReactPerf = __webpack_require__(40);
	var ReactUpdateQueue = __webpack_require__(75);

	var assign = __webpack_require__(61);
	var canDefineProperty = __webpack_require__(65);
	var escapeTextContentForBrowser = __webpack_require__(43);
	var invariant = __webpack_require__(35);
	var isEventSupported = __webpack_require__(62);
	var keyOf = __webpack_require__(101);
	var setInnerHTML = __webpack_require__(41);
	var setTextContent = __webpack_require__(42);
	var shallowEqual = __webpack_require__(139);
	var validateDOMNesting = __webpack_require__(92);
	var warning = __webpack_require__(47);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'';

	var ReactMount = __webpack_require__(50);

	var findDOMNode = __webpack_require__(113);
	var focusNode = __webpack_require__(117);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'';

	var CSSProperty = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactPerf = __webpack_require__(40);

	var camelizeStyleName = __webpack_require__(120);
	var dangerousStyleValue = __webpack_require__(122);
	var hyphenateStyleName = __webpack_require__(123);
	var memoizeStringOnly = __webpack_require__(125);
	var warning = __webpack_require__(47);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'';

	var camelize = __webpack_require__(121);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 121 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'';

	var CSSProperty = __webpack_require__(119);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'';

	var hyphenate = __webpack_require__(124);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 126 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'';

	var ReactDOMIDOperations = __webpack_require__(49);
	var LinkedValueUtils = __webpack_require__(128);
	var ReactMount = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'';

	var ReactPropTypes = __webpack_require__(129);
	var ReactPropTypeLocations = __webpack_require__(87);

	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'';

	var ReactElement = __webpack_require__(64);
	var ReactPropTypeLocationNames = __webpack_require__(88);

	var emptyFunction = __webpack_require__(37);
	var getIteratorFn = __webpack_require__(130);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'';

	var ReactChildren = __webpack_require__(132);
	var ReactDOMSelect = __webpack_require__(134);

	var assign = __webpack_require__(61);
	var warning = __webpack_require__(47);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    nativeProps.children = content;
	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'';

	var PooledClass = __webpack_require__(78);
	var ReactElement = __webpack_require__(64);

	var emptyFunction = __webpack_require__(37);
	var traverseAllChildren = __webpack_require__(133);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'';

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactElement = __webpack_require__(64);
	var ReactInstanceHandles = __webpack_require__(67);

	var getIteratorFn = __webpack_require__(130);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'';

	var LinkedValueUtils = __webpack_require__(128);
	var ReactMount = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var warning = __webpack_require__(47);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, props, value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'';

	var LinkedValueUtils = __webpack_require__(128);
	var ReactDOMIDOperations = __webpack_require__(49);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'';

	var ReactComponentEnvironment = __webpack_require__(86);
	var ReactMultiChildUpdateTypes = __webpack_require__(38);

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactReconciler = __webpack_require__(72);
	var ReactChildReconciler = __webpack_require__(137);

	var flattenChildren = __webpack_require__(138);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'';

	var ReactReconciler = __webpack_require__(72);

	var instantiateReactComponent = __webpack_require__(84);
	var shouldUpdateReactComponent = __webpack_require__(89);
	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(47);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'';

	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(47);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'';

	var EventListener = __webpack_require__(141);
	var ExecutionEnvironment = __webpack_require__(31);
	var PooledClass = __webpack_require__(78);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactMount = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(76);

	var assign = __webpack_require__(61);
	var getEventTarget = __webpack_require__(103);
	var getUnboundedScrollPosition = __webpack_require__(142);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'';

	var emptyFunction = __webpack_require__(37);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'';

	var DOMProperty = __webpack_require__(45);
	var EventPluginHub = __webpack_require__(53);
	var ReactComponentEnvironment = __webpack_require__(86);
	var ReactClass = __webpack_require__(144);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactBrowserEventEmitter = __webpack_require__(51);
	var ReactNativeComponent = __webpack_require__(91);
	var ReactPerf = __webpack_require__(40);
	var ReactRootIndex = __webpack_require__(68);
	var ReactUpdates = __webpack_require__(76);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'';

	var ReactComponent = __webpack_require__(145);
	var ReactElement = __webpack_require__(64);
	var ReactPropTypeLocations = __webpack_require__(87);
	var ReactPropTypeLocationNames = __webpack_require__(88);
	var ReactNoopUpdateQueue = __webpack_require__(146);

	var assign = __webpack_require__(61);
	var emptyObject = __webpack_require__(80);
	var invariant = __webpack_require__(35);
	var keyMirror = __webpack_require__(39);
	var keyOf = __webpack_require__(101);
	var warning = __webpack_require__(47);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'';

	var ReactNoopUpdateQueue = __webpack_require__(146);

	var canDefineProperty = __webpack_require__(65);
	var emptyObject = __webpack_require__(80);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'';

	var warning = __webpack_require__(47);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'';

	var CallbackQueue = __webpack_require__(77);
	var PooledClass = __webpack_require__(78);
	var ReactBrowserEventEmitter = __webpack_require__(51);
	var ReactDOMFeatureFlags = __webpack_require__(63);
	var ReactInputSelection = __webpack_require__(148);
	var Transaction = __webpack_require__(79);

	var assign = __webpack_require__(61);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'';

	var ReactDOMSelection = __webpack_require__(149);

	var containsNode = __webpack_require__(81);
	var focusNode = __webpack_require__(117);
	var getActiveElement = __webpack_require__(151);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var getNodeForCharacterOffset = __webpack_require__(150);
	var getTextContentAccessor = __webpack_require__(97);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 151 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not yet defined.
	 */
	'';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }

	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPropagators = __webpack_require__(95);
	var ExecutionEnvironment = __webpack_require__(31);
	var ReactInputSelection = __webpack_require__(148);
	var SyntheticEvent = __webpack_require__(99);

	var getActiveElement = __webpack_require__(151);
	var isTextInputElement = __webpack_require__(104);
	var keyOf = __webpack_require__(101);
	var shallowEqual = __webpack_require__(139);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventListener = __webpack_require__(141);
	var EventPropagators = __webpack_require__(95);
	var ReactMount = __webpack_require__(50);
	var SyntheticClipboardEvent = __webpack_require__(155);
	var SyntheticEvent = __webpack_require__(99);
	var SyntheticFocusEvent = __webpack_require__(156);
	var SyntheticKeyboardEvent = __webpack_require__(157);
	var SyntheticMouseEvent = __webpack_require__(108);
	var SyntheticDragEvent = __webpack_require__(160);
	var SyntheticTouchEvent = __webpack_require__(161);
	var SyntheticUIEvent = __webpack_require__(109);
	var SyntheticWheelEvent = __webpack_require__(162);

	var emptyFunction = __webpack_require__(37);
	var getEventCharCode = __webpack_require__(158);
	var invariant = __webpack_require__(35);
	var keyOf = __webpack_require__(101);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticEvent = __webpack_require__(99);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticUIEvent = __webpack_require__(109);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticUIEvent = __webpack_require__(109);

	var getEventCharCode = __webpack_require__(158);
	var getEventKey = __webpack_require__(159);
	var getEventModifierState = __webpack_require__(110);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'';

	var getEventCharCode = __webpack_require__(158);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticMouseEvent = __webpack_require__(108);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticUIEvent = __webpack_require__(109);

	var getEventModifierState = __webpack_require__(110);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'';

	var SyntheticMouseEvent = __webpack_require__(108);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'';

	var DOMProperty = __webpack_require__(45);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'';

	var DOMProperty = __webpack_require__(45);
	var ReactDefaultPerfAnalysis = __webpack_require__(165);
	var ReactMount = __webpack_require__(50);
	var ReactPerf = __webpack_require__(40);

	var performanceNow = __webpack_require__(166);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'';

	var assign = __webpack_require__(61);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'';

	var performance = __webpack_require__(167);
	var curPerformance = performance;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!curPerformance || !curPerformance.now) {
	  curPerformance = Date;
	}

	var performanceNow = curPerformance.now.bind(curPerformance);

	module.exports = performanceNow;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'';

	module.exports = '0.14.2';

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'';

	var ReactMount = __webpack_require__(50);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'';

	var ReactDefaultInjection = __webpack_require__(93);
	var ReactServerRendering = __webpack_require__(171);
	var ReactVersion = __webpack_require__(168);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'';

	var ReactDefaultBatchingStrategy = __webpack_require__(114);
	var ReactElement = __webpack_require__(64);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactMarkupChecksum = __webpack_require__(70);
	var ReactServerBatchingStrategy = __webpack_require__(172);
	var ReactServerRenderingTransaction = __webpack_require__(173);
	var ReactUpdates = __webpack_require__(76);

	var emptyObject = __webpack_require__(80);
	var instantiateReactComponent = __webpack_require__(84);
	var invariant = __webpack_require__(35);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 172 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'';

	var PooledClass = __webpack_require__(78);
	var CallbackQueue = __webpack_require__(77);
	var Transaction = __webpack_require__(79);

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'';

	var ReactChildren = __webpack_require__(132);
	var ReactComponent = __webpack_require__(145);
	var ReactClass = __webpack_require__(144);
	var ReactDOMFactories = __webpack_require__(175);
	var ReactElement = __webpack_require__(64);
	var ReactElementValidator = __webpack_require__(176);
	var ReactPropTypes = __webpack_require__(129);
	var ReactVersion = __webpack_require__(168);

	var assign = __webpack_require__(61);
	var onlyChild = __webpack_require__(178);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'';

	var ReactElement = __webpack_require__(64);
	var ReactElementValidator = __webpack_require__(176);

	var mapObject = __webpack_require__(177);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'';

	var ReactElement = __webpack_require__(64);
	var ReactPropTypeLocations = __webpack_require__(87);
	var ReactPropTypeLocationNames = __webpack_require__(88);
	var ReactCurrentOwner = __webpack_require__(27);

	var canDefineProperty = __webpack_require__(65);
	var getIteratorFn = __webpack_require__(130);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'';

	var ReactElement = __webpack_require__(64);

	var invariant = __webpack_require__(35);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'';

	var assign = __webpack_require__(61);
	var warning = __webpack_require__(47);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'';

	var LinkedStateMixin = __webpack_require__(181);
	var React = __webpack_require__(25);
	var ReactComponentWithPureRenderMixin = __webpack_require__(184);
	var ReactCSSTransitionGroup = __webpack_require__(186);
	var ReactFragment = __webpack_require__(192);
	var ReactTransitionGroup = __webpack_require__(187);
	var ReactUpdates = __webpack_require__(76);

	var cloneWithProps = __webpack_require__(193);
	var shallowCompare = __webpack_require__(185);
	var update = __webpack_require__(196);
	var warning = __webpack_require__(47);

	var warnedAboutBatchedUpdates = false;

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: function () {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(warnedAboutBatchedUpdates, 'React.addons.batchedUpdates is deprecated. Use ' + 'ReactDOM.unstable_batchedUpdates instead.') : undefined;
	      warnedAboutBatchedUpdates = true;
	    }
	    return ReactUpdates.batchedUpdates.apply(this, arguments);
	  },
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  shallowCompare: shallowCompare,
	  update: update
	};

	if (process.env.NODE_ENV !== 'production') {
	  React.addons.Perf = __webpack_require__(164);
	  React.addons.TestUtils = __webpack_require__(197);
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'';

	var ReactLink = __webpack_require__(182);
	var ReactStateSetters = __webpack_require__(183);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function (key) {
	    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
	  }
	};

	module.exports = LinkedStateMixin;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   _handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(25);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ? React.PropTypes.any.isRequired : linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;

/***/ },
/* 183 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (component, funcReturningState) {
	    return function (a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function (funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function (key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentWithPureRenderMixin
	 */

	'';

	var shallowCompare = __webpack_require__(185);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function (nextProps, nextState) {
	    return shallowCompare(this, nextProps, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule shallowCompare
	*/

	'';

	var shallowEqual = __webpack_require__(139);

	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
	}

	module.exports = shallowCompare;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'';

	var React = __webpack_require__(25);

	var assign = __webpack_require__(61);

	var ReactTransitionGroup = __webpack_require__(187);
	var ReactCSSTransitionGroupChild = __webpack_require__(189);

	function createTransitionTimeoutPropValidator(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	        }
	    }
	  };
	}

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: ReactCSSTransitionGroupChild.propTypes.name,

	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool,
	    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
	    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
	    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
	  },

	  getDefaultProps: function () {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function (child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return React.createElement(ReactCSSTransitionGroupChild, {
	      name: this.props.transitionName,
	      appear: this.props.transitionAppear,
	      enter: this.props.transitionEnter,
	      leave: this.props.transitionLeave,
	      appearTimeout: this.props.transitionAppearTimeout,
	      enterTimeout: this.props.transitionEnterTimeout,
	      leaveTimeout: this.props.transitionLeaveTimeout
	    }, child);
	  },

	  render: function () {
	    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));
	  }
	});

	module.exports = ReactCSSTransitionGroup;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'';

	var React = __webpack_require__(25);
	var ReactTransitionChildMapping = __webpack_require__(188);

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function () {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function () {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function () {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function () {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function (key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      this.setState(function (state) {
	        var newChildren = assign({}, state.children);
	        delete newChildren[key];
	        return { children: newChildren };
	      });
	    }
	  },

	  render: function () {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }
	    return React.createElement(this.props.component, this.props, childrenToRender);
	  }
	});

	module.exports = ReactTransitionGroup;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'';

	var flattenChildren = __webpack_require__(138);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function (children) {
	    if (!children) {
	      return children;
	    }
	    return flattenChildren(children);
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function (prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'';

	var React = __webpack_require__(25);
	var ReactDOM = __webpack_require__(26);

	var CSSCore = __webpack_require__(190);
	var ReactTransitionEvents = __webpack_require__(191);

	var onlyChild = __webpack_require__(178);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  propTypes: {
	    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      active: React.PropTypes.string
	    }), React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      enterActive: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      leaveActive: React.PropTypes.string,
	      appear: React.PropTypes.string,
	      appearActive: React.PropTypes.string
	    })]).isRequired,

	    // Once we require timeouts to be specified, we can remove the
	    // boolean flags (appear etc.) and just accept a number
	    // or a bool for the timeout flags (appearTimeout etc.)
	    appear: React.PropTypes.bool,
	    enter: React.PropTypes.bool,
	    leave: React.PropTypes.bool,
	    appearTimeout: React.PropTypes.number,
	    enterTimeout: React.PropTypes.number,
	    leaveTimeout: React.PropTypes.number
	  },

	  transition: function (animationType, finishCallback, userSpecifiedDelay) {
	    var node = ReactDOM.findDOMNode(this);

	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }

	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timeout = null;

	    var endListener = function (e) {
	      if (e && e.target !== node) {
	        return;
	      }

	      clearTimeout(timeout);

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    // If the user specified a timeout delay.
	    if (userSpecifiedDelay) {
	      // Clean-up the animation after the specified delay
	      timeout = setTimeout(endListener, userSpecifiedDelay);
	    } else {
	      // DEPRECATED: this listener will be removed in a future version of react
	      ReactTransitionEvents.addEndEventListener(node, endListener);
	    }
	  },

	  queueClass: function (className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function () {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function () {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function () {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function (done) {
	    if (this.props.appear) {
	      this.transition('appear', done, this.props.appearTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function (done) {
	    if (this.props.enter) {
	      this.transition('enter', done, this.props.enterTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function (done) {
	    if (this.props.leave) {
	      this.transition('leave', done, this.props.leaveTimeout);
	    } else {
	      done();
	    }
	  },

	  render: function () {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	'';

	var invariant = __webpack_require__(35);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function (element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'';

	var ExecutionEnvironment = __webpack_require__(31);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactFragment
	 */

	'';

	var ReactChildren = __webpack_require__(132);
	var ReactElement = __webpack_require__(64);

	var emptyFunction = __webpack_require__(37);
	var invariant = __webpack_require__(35);
	var warning = __webpack_require__(47);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is an array.
	 */

	var numericPropertyRegex = /^\d+$/;

	var warnedAboutNumeric = false;

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function (object) {
	    if (typeof object !== 'object' || !object || Array.isArray(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : undefined;
	      return object;
	    }
	    if (ReactElement.isValidElement(object)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : undefined;
	      return object;
	    }

	    !(object.nodeType !== 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(false) : undefined;

	    var result = [];

	    for (var key in object) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : undefined;
	          warnedAboutNumeric = true;
	        }
	      }
	      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
	    }

	    return result;
	  }
	};

	module.exports = ReactFragment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'';

	var ReactElement = __webpack_require__(64);
	var ReactPropTransferer = __webpack_require__(194);

	var keyOf = __webpack_require__(101);
	var warning = __webpack_require__(47);

	var CHILDREN_PROP = keyOf({ children: null });

	var didDeprecatedWarn = false;

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 * @deprecated
	 */
	function cloneWithProps(child, props) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(didDeprecatedWarn, 'cloneWithProps(...) is deprecated. ' + 'Please use React.cloneElement instead.') : undefined;
	    didDeprecatedWarn = true;
	    process.env.NODE_ENV !== 'production' ? warning(!child.ref, 'You are calling cloneWithProps() on a child with a ref. This is ' + 'dangerous because you\'re creating a new child which will not be ' + 'added as a ref to its parent.') : undefined;
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'';

	var assign = __webpack_require__(61);
	var emptyFunction = __webpack_require__(37);
	var joinClasses = __webpack_require__(195);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function (props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function (a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function (oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;

/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} className
	 * @return {string}
	 */
	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	/* global hasOwnProperty:true */

	'';

	var assign = __webpack_require__(61);
	var keyOf = __webpack_require__(101);
	var invariant = __webpack_require__(35);
	var hasOwnProperty = ({}).hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({ $push: null });
	var COMMAND_UNSHIFT = keyOf({ $unshift: null });
	var COMMAND_SPLICE = keyOf({ $splice: null });
	var COMMAND_SET = keyOf({ $set: null });
	var COMMAND_MERGE = keyOf({ $merge: null });
	var COMMAND_APPLY = keyOf({ $apply: null });

	var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function (command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : undefined;
	  var specValue = spec[command];
	  !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : undefined;
	}

	function update(value, spec) {
	  !(typeof spec === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : undefined;

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : undefined;

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    !(mergeObj && typeof mergeObj === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : undefined;
	    !(nextValue && typeof nextValue === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : undefined;
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function (item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function (item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : undefined;
	    !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	    spec[COMMAND_SPLICE].forEach(function (args) {
	      !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : undefined;
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'';

	var EventConstants = __webpack_require__(52);
	var EventPluginHub = __webpack_require__(53);
	var EventPropagators = __webpack_require__(95);
	var React = __webpack_require__(25);
	var ReactDOM = __webpack_require__(26);
	var ReactElement = __webpack_require__(64);
	var ReactBrowserEventEmitter = __webpack_require__(51);
	var ReactCompositeComponent = __webpack_require__(85);
	var ReactInstanceHandles = __webpack_require__(67);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactMount = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(76);
	var SyntheticEvent = __webpack_require__(99);

	var assign = __webpack_require__(61);
	var emptyObject = __webpack_require__(80);
	var findDOMNode = __webpack_require__(113);
	var invariant = __webpack_require__(35);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	function findAllInRenderedTreeInternal(inst, test) {
	  if (!inst || !inst.getPublicInstance) {
	    return [];
	  }
	  var publicInst = inst.getPublicInstance();
	  var ret = test(publicInst) ? [publicInst] : [];
	  var currentElement = inst._currentElement;
	  if (ReactTestUtils.isDOMComponent(publicInst)) {
	    var renderedChildren = inst._renderedChildren;
	    var key;
	    for (key in renderedChildren) {
	      if (!renderedChildren.hasOwnProperty(key)) {
	        continue;
	      }
	      ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
	    }
	  } else if (ReactElement.isValidElement(currentElement) && typeof currentElement.type === 'function') {
	    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
	  }
	  return ret;
	}

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function (instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return ReactDOM.render(instance, div);
	  },

	  isElement: function (element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function (inst, convenienceConstructor) {
	    return ReactElement.isValidElement(inst) && inst.type === convenienceConstructor;
	  },

	  isDOMComponent: function (inst) {
	    return !!(inst && inst.nodeType === 1 && inst.tagName);
	  },

	  isDOMComponentElement: function (inst) {
	    return !!(inst && ReactElement.isValidElement(inst) && !!inst.tagName);
	  },

	  isCompositeComponent: function (inst) {
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      // Accessing inst.setState warns; just return false as that'll be what
	      // this returns when we have DOM nodes as refs directly
	      return false;
	    }
	    return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function (inst, type) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return false;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;

	    return constructor === type;
	  },

	  isCompositeComponentElement: function (inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
	  },

	  isCompositeComponentElementWithType: function (inst, type) {
	    var internalInstance = ReactInstanceMap.get(inst);
	    var constructor = internalInstance._currentElement.type;

	    return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
	  },

	  getRenderedChildOfCompositeComponent: function (inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function (inst, test) {
	    if (!inst) {
	      return [];
	    }
	    !ReactTestUtils.isCompositeComponent(inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : invariant(false) : undefined;
	    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function (root, classNames) {
	    if (!Array.isArray(classNames)) {
	      classNames = classNames.split(/\s+/);
	    }
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      if (ReactTestUtils.isDOMComponent(inst)) {
	        var className = inst.className;
	        if (typeof className !== 'string') {
	          // SVG, probably.
	          className = inst.getAttribute('class') || '';
	        }
	        var classList = className.split(/\s+/);
	        return classNames.every(function (name) {
	          return classList.indexOf(name) !== -1;
	        });
	      }
	      return false;
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function (root, className) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' + '(found: ' + all.length + ') for class:' + className);
	    }
	    return all[0];
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function (root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function (root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },

	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return {array} an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function (root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
	      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function (root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for componentType:' + componentType + ' (found ' + all.length + ')');
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function (module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || 'div';

	    module.prototype.render.mockImplementation(function () {
	      return React.createElement(mockTagName, null, this.props.children);
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on an `Element` node.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occurred
	   * on the `ReactDOMComponent` `comp`.
	   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
	   * @param {!ReactDOMComponent} comp
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
	  },

	  nativeTouchData: function (x, y) {
	    return {
	      touches: [{ pageX: x, pageY: y }]
	    };
	  },

	  createRenderer: function () {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function () {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function () {
	  return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
	};

	var NoopInternalComponent = function (element) {
	  this._renderedOutput = element;
	  this._currentElement = element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function () {},

	  receiveComponent: function (element) {
	    this._renderedOutput = element;
	    this._currentElement = element;
	  },

	  unmountComponent: function () {}

	};

	var ShallowComponentWrapper = function () {};
	assign(ShallowComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: function (element) {
	    return new NoopInternalComponent(element);
	  },
	  _replaceNodeWithMarkupByID: function () {},
	  _renderValidatedComponent: ReactCompositeComponent.Mixin._renderValidatedComponentWithoutOwnerOrContext
	});

	ReactShallowRenderer.prototype.render = function (element, context) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : invariant(false) : undefined;
	  !(typeof element.type !== 'string') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom ' + 'components, not primitives (%s). Instead of calling `.render(el)` and ' + 'inspecting the rendered output, look at `el.props` directly instead.', element.type) : invariant(false) : undefined;

	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(false);
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function () {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function (element, transaction, context) {
	  if (this._instance) {
	    this._instance.receiveComponent(element, transaction, context);
	  } else {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function (domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = findDOMNode(domComponentOrNode);
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var dispatchConfig = ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType];

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(dispatchConfig, ReactMount.getID(node), fakeNativeEvent, node);
	    assign(event, eventData);

	    if (dispatchConfig.phasedRegistrationNames) {
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	    } else {
	      EventPropagators.accumulateDirectDispatches(event);
	    }

	    ReactUpdates.batchedUpdates(function () {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue(true);
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element|ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function () {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function () {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function (domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
	    } else if (domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
	    }
	  };
	}

	Object.keys(topLevelTypes).forEach(function (eventType) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element|ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
	});

	module.exports = ReactTestUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = createTransitionManager;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _historyLibActions = __webpack_require__(7);

	var _computeChangedRoutes2 = __webpack_require__(200);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(202);

	var _isActive2 = __webpack_require__(204);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(205);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(206);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    var indexOnly = undefined;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }

	    return _isActive3['default'](location, indexOnly, state.location, state.routes, state.params);
	  }

	  function createLocationFromRedirectInfo(location) {
	    return history.createLocation(location, _historyLibActions.REPLACE);
	  }

	  var partialNextState = undefined;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      _matchRoutes2['default'](routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;

	    _TransitionUtils.runLeaveHooks(leaveRoutes);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
	      if (error) {
	        callback(error);
	      } else if (redirectInfo) {
	        callback(null, createLocationFromRedirectInfo(redirectInfo));
	      } else {
	        // TODO: Fetch components after state is updated.
	        _getComponents2['default'](nextState, function (error, components) {
	          if (error) {
	            callback(error);
	          } else {
	            // TODO: Make match a pure function and have some other API
	            // for "match and update state".
	            callback(null, null, state = _extends({}, nextState, { components: components }));
	          }
	        });
	      }
	    });
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = {};

	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }

	  function transitionHook(location, callback) {
	    _matchRoutes2['default'](routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

	      var result = undefined;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = undefined;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = undefined,
	      unlistenBeforeUnload = undefined;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and must return either a) a prompt message to show
	   * the user, to make sure they want to leave the page or b) false, to prevent
	   * the transition.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];

	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	      RouteHooks[routeID] = [hook];

	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);

	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : undefined;

	        hooks.push(hook);
	      }
	    }

	    return function () {
	      var hooks = RouteHooks[routeID];

	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.transitionTo(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
	          }
	        });
	      }
	    });
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}

	//export default useRoutes
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;
	exports['default'] = routerWarning;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	function routerWarning(falseToWarn, message) {
	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  process.env.NODE_ENV !== 'production' ? _warning2['default'].apply(undefined, [falseToWarn, message].concat(args)) : undefined;
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(201);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = undefined,
	      enterRoutes = undefined;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = nextRoutes.filter(function (route) {
	        return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports['default'] = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function escapeSource(string) {
	  return escapeRegExp(string).replace(/\/+/g, '/+');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = undefined,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/?#]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '([\\s\\S]*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '([\\s\\S]*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = {};

	function compilePattern(pattern) {
	  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */

	function matchPattern(pattern, pathname) {
	  // Make leading slashes consistent between pattern and pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;

	  regexpSource += '/*'; // Capture path separators

	  // Special-case patterns like '*' for catch-all routes.
	  var captureRemaining = tokens[tokens.length - 1] !== '*';

	  if (captureRemaining) {
	    // This will match newlines in the remaining path.
	    regexpSource += '([\\s\\S]*?)';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));

	  var remainingPathname = undefined,
	      paramValues = undefined;
	  if (match != null) {
	    if (captureRemaining) {
	      remainingPathname = match.pop();
	      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);

	      // If we didn't match the entire pathname, then make sure that the match
	      // we did get ends at a path separator (potentially the one we added
	      // above at the beginning of the path, if the actual match was empty).
	      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
	        return {
	          remainingPathname: null,
	          paramNames: paramNames,
	          paramValues: null
	        };
	      }
	    } else {
	      // If this matched at all, then the match was the entire pathname.
	      remainingPathname = '';
	    }

	    paramValues = match.slice(1).map(function (v) {
	      return v != null ? decodeURIComponent(v) : v;
	    });
	  } else {
	    remainingPathname = paramValues = null;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: paramValues
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var _matchPattern = matchPattern(pattern, pathname);

	  var paramNames = _matchPattern.paramNames;
	  var paramValues = _matchPattern.paramValues;

	  if (paramValues != null) {
	    return paramNames.reduce(function (memo, paramName, index) {
	      memo[paramName] = paramValues[index];
	      return memo;
	    }, {});
	  }

	  return null;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */

	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;

	  var token = undefined,
	      paramName = undefined,
	      paramValue = undefined;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runLeaveHooks = runLeaveHooks;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _AsyncUtils = __webpack_require__(203);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function createEnterHook(hook, route) {
	  return function (a, b, callback) {
	    hook.apply(route, arguments);

	    if (hook.length < 3) {
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));

	    return hooks;
	  }, []);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */

	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);

	  if (!hooks.length) {
	    callback();
	    return;
	  }

	  var redirectInfo = undefined;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };

	      return;
	    }

	    redirectInfo = location;
	  }

	  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
	    hooks[index](nextState, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	          next();
	        }
	    });
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */

	function runLeaveHooks(routes) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 203 */
/***/ function(module, exports) {

	"";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;
	exports['default'] = isActive;

	var _PatternUtils = __webpack_require__(201);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if (typeof a === 'object') {
	    for (var p in a) {
	      if (!a.hasOwnProperty(p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!b.hasOwnProperty(p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	function paramsAreActive(paramNames, paramValues, activeParams) {
	  // FIXME: This doesn't work on repeated params in activeParams.
	  return paramNames.every(function (paramName, index) {
	    return String(paramValues[index]) === String(activeParams[paramName]);
	  });
	}

	function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
	    var route = activeRoutes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null) {
	      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	      remainingPathname = matched.remainingPathname;
	      paramNames = [].concat(paramNames, matched.paramNames);
	      paramValues = [].concat(paramValues, matched.paramValues);
	    }

	    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
	  }

	  return null;
	}

	/**
	 * Returns true if the given pathname matches the active routes
	 * and params.
	 */
	function routeIsActive(pathname, routes, params, indexOnly) {
	  var i = getMatchingRouteIndex(pathname, routes, params);

	  if (i === null) {
	    // No match.
	    return false;
	  } else if (!indexOnly) {
	    // Any match is good enough.
	    return true;
	  }

	  // If any remaining routes past the match index have paths, then we can't
	  // be on the index route.
	  return routes.slice(i + 1).every(function (route) {
	    return !route.path;
	  });
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */

	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;

	  if (currentLocation == null) return false;

	  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;

	  return queryIsActive(query, currentLocation.query);
	}

	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(203);

	function getComponentsForRoute(location, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	  } else if (route.getComponent) {
	    route.getComponent(location, callback);
	  } else if (route.getComponents) {
	    route.getComponents(location, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState.location, route, callback);
	  }, callback);
	}

	exports['default'] = getComponents;
	module.exports = exports['default'];

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _AsyncUtils = __webpack_require__(203);

	var _PatternUtils = __webpack_require__(201);

	var _RouteUtils = __webpack_require__(207);

	function getChildRoutes(route, location, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = undefined;

	  route.getChildRoutes(location, function (error, childRoutes) {
	    childRoutes = !error && _RouteUtils.createRoutes(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    route.getIndexRoute(location, function (error, indexRoute) {
	      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (obj) {
	        return !obj.hasOwnProperty('path');
	      });

	      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  if (remainingPathname !== null) {
	    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	    remainingPathname = matched.remainingPathname;
	    paramNames = [].concat(paramNames, matched.paramNames);
	    paramValues = [].concat(paramValues, matched.paramValues);

	    if (remainingPathname === '' && route.path) {
	      var _ret2 = (function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : undefined;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });
	        return {
	          v: undefined
	        };
	      })();

	      if (typeof _ret2 === 'object') return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback) {
	  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
	  return (function () {
	    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
	      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	        if (error || match) {
	          done(error, match);
	        } else {
	          next();
	        }
	      });
	    }, callback);
	  })();
	}

	exports['default'] = matchRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isValidChild(object) {
	  return object == null || _react2['default'].isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      /* istanbul ignore if: error logging */
	      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, error.message) : undefined;
	    }
	  }
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *   
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */

	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2['default'].Children.forEach(children, function (element) {
	    if (_react2['default'].isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */

	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;
	exports.falsy = falsy;

	var _react = __webpack_require__(24);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;

	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = shape({
	  listen: func.isRequired,
	  pushState: func.isRequired,
	  replaceState: func.isRequired,
	  go: func.isRequired
	});

	exports.history = history;
	var location = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

	exports.location = location;
	var component = oneOfType([func, string]);
	exports.component = component;
	var components = oneOfType([component, object]);
	exports.components = components;
	var route = oneOfType([object, element]);
	exports.route = route;
	var routes = oneOfType([route, arrayOf(route)]);

	exports.routes = routes;
	exports['default'] = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _deprecateObjectProperties = __webpack_require__(210);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _getRouteParams = __webpack_require__(211);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _RouteUtils = __webpack_require__(207);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _React$PropTypes = _react2['default'].PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */
	var RouterContext = _react2['default'].createClass({
	  displayName: 'RouterContext',

	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2['default'].createElement
	    };
	  },

	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;

	    if (!router) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`<RouterContext>` expects a `router` rather than a `history`') : undefined;

	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      location = _deprecateObjectProperties2['default'](location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }

	    return { history: history, location: location, router: router };
	  },

	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },

	  render: function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = _getRouteParams2['default'](route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if (_RouteUtils.isReactChildren(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
	          }
	        }

	        if (typeof components === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (components.hasOwnProperty(key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

	    return element;
	  }

	});

	exports['default'] = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint no-empty: 0*/
	'';

	exports.__esModule = true;
	exports['default'] = deprecateObjectProperties;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var useMembrane = false;

	if (process.env.NODE_ENV !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', { get: function get() {
	        return true;
	      } }).x) {
	      useMembrane = true;
	    }
	  } catch (e) {}
	}

	// wraps an object in a membrane to warn about deprecated property access

	function deprecateObjectProperties(object, message) {
	  if (!useMembrane) return object;

	  var membrane = {};

	  var _loop = function (prop) {
	    if (typeof object[prop] === 'function') {
	      membrane[prop] = function () {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	        return object[prop].apply(object, arguments);
	      };
	    } else {
	      Object.defineProperty(membrane, prop, {
	        configurable: false,
	        enumerable: false,
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	          return object[prop];
	        }
	      });
	    }
	  };

	  for (var prop in object) {
	    _loop(prop);
	  }

	  return membrane;
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(201);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  for (var p in params) {
	    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
	  }return routeParams;
	}

	exports['default'] = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _deprecateObjectProperties = __webpack_require__(210);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}

	// deprecated

	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);

	  if (process.env.NODE_ENV !== 'production') {
	    history = _deprecateObjectProperties2['default'](history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }

	  return history;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _React$PropTypes = _react2['default'].PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	function isEmptyObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return false;
	  }return true;
	}

	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;

	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }

	  return to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2['default'].createClass({
	  displayName: 'Link',

	  contextTypes: {
	    router: object
	  },

	  propTypes: {
	    to: oneOfType([string, object]).isRequired,
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      className: '',
	      style: {}
	    };
	  },

	  handleClick: function handleClick(event) {
	    var allowTransition = true;

	    if (this.props.onClick) this.props.onClick(event);

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    if (event.defaultPrevented === true) allowTransition = false;

	    // If target prop is set (e.g. to "_blank") let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) {
	      if (!allowTransition) event.preventDefault();

	      return;
	    }

	    event.preventDefault();

	    if (allowTransition) {
	      var _props = this.props;
	      var to = _props.to;
	      var query = _props.query;
	      var hash = _props.hash;
	      var state = _props.state;

	      var _location = createLocationDescriptor(to, { query: query, hash: hash, state: state });

	      this.context.router.push(_location);
	    }
	  },

	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : undefined;

	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;

	    if (router) {
	      var _location2 = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(_location2);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(_location2, onlyActiveOnIndex)) {
	          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2['default'].createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }

	});

	exports['default'] = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(213);

	var _Link2 = _interopRequireDefault(_Link);

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2['default'].createClass({
	  displayName: 'IndexLink',

	  render: function render() {
	    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }

	});

	exports['default'] = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(216);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _PropTypes = __webpack_require__(208);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	var IndexRedirect = _react2['default'].createClass({
	  displayName: 'IndexRedirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(207);

	var _PatternUtils = __webpack_require__(201);

	var _PropTypes = __webpack_require__(208);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	var Redirect = _react2['default'].createClass({
	  displayName: 'Redirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = _RouteUtils.createRouteFromReactElement(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;

	        var pathname = undefined;
	        if (route.to.charAt(0) === '/') {
	          pathname = _PatternUtils.formatPattern(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = _PatternUtils.formatPattern(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },

	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }

	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(207);

	var _PropTypes = __webpack_require__(208);

	var func = _react2['default'].PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	var IndexRoute = _react2['default'].createClass({
	  displayName: 'IndexRoute',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    path: _PropTypes.falsy,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(207);

	var _PropTypes = __webpack_require__(208);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	var Route = _react2['default'].createClass({
	  displayName: 'Route',

	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _PropTypes = __webpack_require__(208);

	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {

	  contextTypes: {
	    history: _PropTypes.history
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : undefined;
	    this.history = this.context.history;
	  }

	};

	exports['default'] = History;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */
	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },

	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },

	  componentDidMount: function componentDidMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : undefined;
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

	    var route = this.props.route || this.context.route;

	    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }

	};

	exports['default'] = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */
	var RouteContext = {

	  propTypes: {
	    route: object.isRequired
	  },

	  childContextTypes: {
	    route: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : undefined;
	  }

	};

	exports['default'] = RouteContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibUseQueries = __webpack_require__(21);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _createTransitionManager = __webpack_require__(198);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : undefined;

	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var routes = _ref.routes;

	    var options = _objectWithoutProperties(_ref, ['routes']);

	    var history = _historyLibUseQueries2['default'](createHistory)(options);
	    var transitionManager = _createTransitionManager2['default'](history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}

	exports['default'] = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(24);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(209);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(199);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var RoutingContext = _react2['default'].createClass({
	  displayName: 'RoutingContext',

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : undefined;
	  },

	  render: function render() {
	    return _react2['default'].createElement(_RouterContext2['default'], this.props);
	  }
	});

	exports['default'] = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var PathUtils = __webpack_require__(225);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) return new Match(pathname, params, query, [route, defaultRoute]);

	  // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) return new Match(pathname, params, query, [route, notFoundRoute]);

	  // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) return new Match(pathname, params, query, [route]);

	  return null;
	}

	var Match = (function () {
	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var invariant = __webpack_require__(6);
	var assign = __webpack_require__(226);
	var qs = __webpack_require__(227);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?(?![^\/=]+=.*$)/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) return null;

	    var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) return PathUtils.withoutQuery(path) + '?' + queryString;

	    return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 226 */
/***/ function(module, exports) {

	'';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(228);


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(229);
	var Parse = __webpack_require__(231);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(230);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 230 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(230);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;
	exports['default'] = useRouterHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(21);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(233);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ExecutionEnvironment = __webpack_require__(9);

	var _PathUtils = __webpack_require__(8);

	var _runTransitionHook = __webpack_require__(19);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(20);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var basename = options.basename;

	    // Automatically use the value of <base href> in HTML
	    // documents as basename if it's not explicitly given.
	    if (basename == null && _ExecutionEnvironment.canUseDOM) {
	      var base = document.getElementsByTagName('base')[0];

	      if (base) basename = _PathUtils.extractPath(base.href);
	    }

	    function addBasename(location) {
	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      if (!basename) return location;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateBrowserHistory = __webpack_require__(235);

	var _historyLibCreateBrowserHistory2 = _interopRequireDefault(_historyLibCreateBrowserHistory);

	var _createRouterHistory = __webpack_require__(236);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateBrowserHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(7);

	var _PathUtils = __webpack_require__(8);

	var _ExecutionEnvironment = __webpack_require__(9);

	var _DOMUtils = __webpack_require__(10);

	var _DOMStateStorage = __webpack_require__(11);

	var _createDOMHistory = __webpack_require__(12);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    historyState = historyState || window.history.state || {};

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };

	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _useRouterHistory = __webpack_require__(232);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	exports['default'] = function (createHistory) {
	  var history = undefined;
	  if (canUseDOM) history = _useRouterHistory2['default'](createHistory)();
	  return history;
	};

	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateHashHistory = __webpack_require__(4);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _createRouterHistory = __webpack_require__(236);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateHashHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'';

	exports.__esModule = true;
	exports['default'] = createMemoryHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(21);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(233);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	var _historyLibCreateMemoryHistory = __webpack_require__(239);

	var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = _historyLibCreateMemoryHistory2['default'](options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}

	module.exports = exports['default'];

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(5);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(6);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathUtils = __webpack_require__(8);

	var _Actions = __webpack_require__(7);

	var _createHistory = __webpack_require__(13);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'';

	module.exports = __webpack_require__(26);


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/5.
	 */
	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(247);
	var IconButton = __webpack_require__(248);
	var Url = __webpack_require__(249);
	var Msg = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            commonDevtList: [],
	            commonSceList: [],
	            checkid: 0,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    myScroll: "",
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	        } else {
	            p.myScroll.refresh();
	        }

	        this.getUser(function (user) {
	            if (user) {
	                p.doFlash(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#main";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    doFlash: function doFlash(user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getCommomSceneListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                if (dt && dt.success) {
	                    var list = dt.data;
	                    if (list.length < 6) {
	                        var num = 6 - list.length;
	                        for (var i = 0; i < num; i++) {
	                            list.push({ hicon: "", buttonname: "" });
	                        }
	                    }
	                    p.setState({ commonSceList: list });
	                }
	            });

	            Ajax("POST", "getCommonDeviceListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                if (dt && dt.success) {
	                    //var list = [{icon:"huijiamoshi1",buttonname:""},{icon:"huijiamoshi1",buttonname:""},{icon:"huijiamoshi1",buttonname:""}];
	                    var list = dt.data;
	                    if (list.length < 6) {
	                        var num = 6 - list.length;
	                        for (var i = 0; i < num; i++) {
	                            list.push({ icon: "", buttonname: "" });
	                        }
	                    }
	                    p.setState({ commonDevtList: list });
	                }
	            });
	        } else {
	            location.href = "/login?pid=" + p.state.pid;
	        }
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                // p.refs.msg.setState({show: true,word: dt.msg, timeout: 1000});
	            }
	        });
	    },

	    doScence: function doScence(id) {
	        var p = this;
	        var sceneList = this.state.commonSceList;
	        if (id) {
	            this.setState({ checkid: id });
	            for (var i = 0; i < sceneList.length; i++) {
	                if (id == sceneList[i].id) {
	                    //发送命令
	                    var comList = JSON.parse(sceneList[i].attributes);
	                    for (var j = 0; j < comList.length; j++) {
	                        var devId = comList[j].devID;
	                        var ddcId = null;
	                        if (comList[j].hasOwnProperty("ddcmac")) {
	                            ddcId = comList[j].ddcmac;
	                        } else {
	                            ddcId = comList[j].ddcID;
	                        }
	                        var obj = p.cmd_protocol(devId, ddcId);
	                        obj.attributes = comList[j].attributes;
	                        if (comList[j].attributes && comList[j].attributes.hasOwnProperty("GRP") && comList[j].attributes.hasOwnProperty("TYP") && comList[j].attributes.GRP != "00") {
	                            if (devId == "0000000000000000") {
	                                obj.attributes["GRP"] = comList[j].attributes.GRP;
	                                obj.attributes["TYP"] = comList[j].attributes.TYP;
	                            } else {
	                                if (comList[j].attributes.hasOwnProperty("NAM") && comList[j].attributes.NAM && comList[j].attributes.NAM != devId) {
	                                    obj.attributes["NAM"] = comList[j].attributes.NAM;
	                                }
	                            }
	                        }
	                        this.cmd(JSON.stringify(obj));
	                    }
	                    break;
	                }
	            }
	        }
	    },

	    goDetail: function goDetail(link, id) {
	        location.href = "#" + link + "/" + id + "?f=1";
	    },

	    render: function render() {
	        var p = this;

	        var sceData = "";
	        var s = 0;
	        var sceList = this.state.commonSceList;
	        var checkid = this.state.checkid;
	        if (sceList.length > 0) {
	            sceData = sceList.map(function (obj) {
	                var flag = false;
	                if (checkid == obj.id) {
	                    flag = true;
	                }
	                if (s > 5) {
	                    return "";
	                } else {
	                    return React.createElement(
	                        'div',
	                        { key: "key_" + s++ },
	                        React.createElement(IconButton, { classStyle: flag ? "IB_k2" : "IB_k", bgc: obj.hicon ? "TB" + s : "", icon: obj.hicon, text: obj.buttonname ? obj.buttonname : "", count: '3', onClick: function () {
	                                p.doScence(obj.id);
	                            } })
	                    );
	                }
	            });
	        }

	        var devData = "";
	        var d = 0;
	        var devList = this.state.commonDevtList;
	        if (devList.length > 0) {
	            devData = devList.map(function (obj) {
	                if (d > 5) {
	                    return "";
	                } else {
	                    return React.createElement(
	                        'div',
	                        { key: "key_" + d++ },
	                        React.createElement(IconButton, { bgc: obj.icon ? "TB" + d : "", icon: obj.hicon, text: obj.name ? obj.name : "", count: '3', onClick: function () {
	                                p.goDetail(obj.link, obj.id);
	                            } })
	                    );
	                }
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: '首页', style: { background: "transparent" }, ref: 'nav' }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "55%", width: "100%", position: "absolute", zIndex: "1", color: "white" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "5rem", width: "100%", marginTop: "4rem" } },
	                    React.createElement('i', { className: "iconfont icon-duoyun", style: { fontSize: "5rem", textAlign: "center" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "left", width: "50%", height: "4rem", marginTop: "0.5rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'tianqi BJ_DW_FY' },
	                        "14~20℃"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'tianqi BJ_DW_FY BJ_DW_QC', style: { fontSize: "1.4rem" } },
	                        "晴转多云"
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "right", width: "50%", height: "4rem", marginTop: "0.5rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'tianqi BJ_DW_FZ' },
	                        "45"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'tianqi BJ_DW_FZ BJ_DW_QC' },
	                        "PM 2.5"
	                    )
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'scrollmain' },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "68rem" } },
	                        React.createElement('img', { className: 'main_bg', src: 'images/main/main_bg.png' }),
	                        React.createElement(
	                            'div',
	                            { style: { position: "absolute", zIndex: "1", height: "52rem", marginTop: "46%" } },
	                            sceData,
	                            React.createElement('div', { style: { clear: "both" } }),
	                            React.createElement(
	                                'div',
	                                { className: 'ad_k' },
	                                React.createElement('img', { style: { width: "100%" }, src: 'images/main/ad1.png' })
	                            ),
	                            devData
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Footer, { viewTab: '1' })
	        );
	    }
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/16.
	 *
	 * footer
	 *
	 *         height : 高度
	 *          width : 宽度
	 *
	 *     eg:  <Footer viewTab = "1"/>
	 */

	'';

	var React = __webpack_require__(24);
	var FooterBtn = __webpack_require__(243);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            viewTab: "1",
	            isIp: "",
	            showDev: "0",
	            showAlert: "0",
	            user: {}
	        };
	    },

	    componentDidMount: function componentDidMount() {},

	    reloadData: function reloadData() {
	        try {
	            var user = JSON.parse(localStorage.getItem("ibms-login"));
	            this.setState({ user: user });
	        } catch (e) {
	            console.log("footer:" + e);
	        }
	    },

	    changeTable: function changeTable(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        switch (parseInt(id)) {
	            case 1:
	                location.href = "#main";break;
	            case 2:
	                location.href = "#device";break;
	            case 3:
	                location.href = "#scene";break;
	            case 4:
	                location.href = "#news";break;
	            case 5:
	                location.href = "#mine";break;
	            default:
	                location.href = "#main";break;
	        }
	    },

	    render: function render() {
	        var p = this;
	        var viewTab = this.props.viewTab;
	        return React.createElement(
	            'div',
	            { className: " FT_k ", style: { height: p.props.height ? p.props.height : "", width: p.props.width ? p.props.width : "" } },
	            React.createElement(FooterBtn, { color: viewTab == "1" ? "TBS" : "WZS", width: '20%', height: '5rem', icon: 'home', text: '首页', 'data-id': '1', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "2" ? "TBS" : "WZS", width: '20%', height: '5rem', icon: 'equipment', text: '设备', 'data-id': '2', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "3" ? "TBS" : "WZS", width: '20%', height: '5rem', icon: 'contextual', text: '情景', 'data-id': '3', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "4" ? "TBS" : "WZS", width: '20%', height: '5rem', icon: 'inform', text: '通知', 'data-id': '4', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "5" ? "TBS" : "WZS", width: '20%', height: '5rem', icon: 'personage', text: '我的', 'data-id': '5', onClick: p.changeTable })
	        );
	    }
	});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by caolinlin on 17/12/18.
	 *
	 * FooterButton
	 *        icon : 图标
	 *       color : 颜色
	 *       width : 宽度
	 *      height : 高度
	 *        text : 文字
	 *     onClick : 点击事件
	 *
	 *     eg:  <FooterButton icon="zhanghao" color={"TBS"} width="20%" height="5rem" text="首页" data-id="1" onClick={p.changeTable}/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentWillMount: function componentWillMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: " FB_k " + (p.props.color ? p.props.color : " TBS"), style: { width: p.props.width ? p.props.width : "3rem", height: p.props.height ? p.props.height : "5rem" },
	                onClick: this.props.onClick ? this.props.onClick : function () {},
	                "data-id": this.props["data-id"] ? this.props["data-id"] : ""
	            },
	            React.createElement(
	                "div",
	                { className: "FB_i" },
	                React.createElement("i", { className: " FB_i_b iconfont icon-" + (p.props.icon ? p.props.icon : "zhanghao") })
	            ),
	            React.createElement(
	                "div",
	                { className: "FB_text" },
	                this.props.text ? this.props.text : "文字"
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	"";

	var doAjax = __webpack_require__(245);
	module.exports = function (type, pn, data, _success, timeout) {
	    data.pn = pn;
	    doAjax({
	        type: type ? type : "POST",
	        url: "http://jky.lierdalux.cn:8006/action", //http://n2n.lierdalux.cn:8060 ;http://jky.lierdalux.cn:8006
	        dataType: "JSON",
	        data: data,
	        timeout: timeout ? timeout : 8000,
	        crossDomain: true,
	        beforeSend: function beforeSend() {},
	        success: function success(response) {
	            var result = null;
	            if (response) {
	                try {
	                    result = JSON.parse(response);
	                } catch (e) {
	                    console.log("error:" + response);
	                }
	                _success(result);
	            } else {
	                _success(result);
	            }
	        },
	        error: function error(state, type) {
	            console.log("state:" + state + "type:" + type);
	            _success(false);
	        }
	    });
	};

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var type = __webpack_require__(246);

	var jsonpID = 0,
	    document = window.document,
	    key,
	    name,
	    rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	    scriptTypeRE = /^(?:text|application)\/javascript/i,
	    xmlTypeRE = /^(?:text|application)\/xml/i,
	    jsonType = 'application/json',
	    htmlType = 'text/html',
	    blankRE = /^\s*$/;

	var ajax = module.exports = function (options) {
	    var settings = extend({}, options || {});
	    for (key in ajax.settings) if (settings[key] === undefined) settings[key] = ajax.settings[key];

	    ajaxStart(settings);

	    if (!settings.crossDomain) settings.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(settings.url) && RegExp.$2 != window.location.host;

	    var dataType = settings.dataType,
	        hasPlaceholder = /=\?/.test(settings.url);
	    if (dataType == 'jsonp' || hasPlaceholder) {
	        if (!hasPlaceholder) settings.url = appendQuery(settings.url, 'callback=?');
	        return ajax.JSONP(settings);
	    }

	    if (!settings.url) settings.url = window.location.toString();
	    serializeData(settings);

	    var mime = settings.accepts[dataType],
	        baseHeaders = {},
	        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
	        xhr = ajax.settings.xhr(),
	        abortTimeout;

	    if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest';
	    if (mime) {
	        baseHeaders['Accept'] = mime;
	        if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0];
	        xhr.overrideMimeType && xhr.overrideMimeType(mime);
	    }
	    if (settings.contentType || settings.data && settings.type.toUpperCase() != 'GET') baseHeaders['Content-Type'] = settings.contentType || 'application/x-www-form-urlencoded';
	    settings.headers = extend(baseHeaders, settings.headers || {});

	    xhr.onreadystatechange = function () {
	        if (xhr.readyState == 4) {
	            clearTimeout(abortTimeout);
	            var result,
	                error = false;
	            if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304 || xhr.status == 0 && protocol == 'file:') {
	                dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'));
	                result = xhr.responseText;

	                try {
	                    if (dataType == 'script') (1, eval)(result);else if (dataType == 'xml') result = xhr.responseXML;else if (dataType == 'json') result = blankRE.test(result) ? null : JSON.parse(result);
	                } catch (e) {
	                    error = e;
	                }

	                if (error) ajaxError(error, 'parsererror', xhr, settings);else ajaxSuccess(result, xhr, settings);
	            } else {
	                ajaxError(null, 'error', xhr, settings);
	            }
	        }
	    };

	    var async = 'async' in settings ? settings.async : true;
	    xhr.open(settings.type, settings.url, async);

	    for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name]);

	    if (ajaxBeforeSend(xhr, settings) === false) {
	        xhr.abort();
	        return false;
	    }

	    if (settings.timeout > 0) abortTimeout = setTimeout(function () {
	        xhr.onreadystatechange = empty;
	        xhr.abort();
	        ajaxError(null, 'timeout', xhr, settings);
	    }, settings.timeout);

	    // avoid sending empty string (#319)
	    xhr.send(settings.data ? settings.data : null);
	    return xhr;
	};

	// trigger a custom event and return false if it was cancelled
	function triggerAndReturn(context, eventName, data) {
	    //todo: Fire off some events
	    //var event = $.Event(eventName)
	    //$(context).trigger(event, data)
	    return true; //!event.defaultPrevented
	}

	// trigger an Ajax "global" event
	function triggerGlobal(settings, context, eventName, data) {
	    if (settings.global) return triggerAndReturn(context || document, eventName, data);
	}

	// Number of active Ajax requests
	ajax.active = 0;

	function ajaxStart(settings) {
	    if (settings.global && ajax.active++ === 0) triggerGlobal(settings, null, 'ajaxStart');
	}
	function ajaxStop(settings) {
	    if (settings.global && ! --ajax.active) triggerGlobal(settings, null, 'ajaxStop');
	}

	// triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
	function ajaxBeforeSend(xhr, settings) {
	    var context = settings.context;
	    if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) return false;

	    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]);
	}
	function ajaxSuccess(data, xhr, settings) {
	    var context = settings.context,
	        status = 'success';
	    settings.success.call(context, data, status, xhr);
	    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]);
	    ajaxComplete(status, xhr, settings);
	}
	// type: "timeout", "error", "abort", "parsererror"
	function ajaxError(error, type, xhr, settings) {
	    var context = settings.context;
	    settings.error.call(context, xhr, type, error);
	    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error]);
	    ajaxComplete(type, xhr, settings);
	}
	// status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
	function ajaxComplete(status, xhr, settings) {
	    var context = settings.context;
	    settings.complete.call(context, xhr, status);
	    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]);
	    ajaxStop(settings);
	}

	// Empty function, used as default callback
	function empty() {}

	ajax.JSONP = function (options) {
	    if (!('type' in options)) return ajax(options);

	    var callbackName = 'jsonp' + ++jsonpID,
	        script = document.createElement('script'),
	        abort = function abort() {
	        //todo: remove script
	        //$(script).remove()
	        if (callbackName in window) window[callbackName] = empty;
	        ajaxComplete('abort', xhr, options);
	    },
	        xhr = { abort: abort },
	        abortTimeout,
	        head = document.getElementsByTagName("head")[0] || document.documentElement;

	    if (options.error) script.onerror = function () {
	        xhr.abort();
	        options.error();
	    };

	    window[callbackName] = function (data) {
	        clearTimeout(abortTimeout);
	        //todo: remove script
	        //$(script).remove()
	        delete window[callbackName];
	        ajaxSuccess(data, xhr, options);
	    };

	    serializeData(options);
	    script.src = options.url.replace(/=\?/, '=' + callbackName);

	    // Use insertBefore instead of appendChild to circumvent an IE6 bug.
	    // This arises when a base node is used (see jQuery bugs #2709 and #4378).
	    head.insertBefore(script, head.firstChild);

	    if (options.timeout > 0) abortTimeout = setTimeout(function () {
	        xhr.abort();
	        ajaxComplete('timeout', xhr, options);
	    }, options.timeout);

	    return xhr;
	};

	ajax.settings = {
	    // Default type of request
	    type: 'GET',
	    // Callback that is executed before request
	    beforeSend: empty,
	    // Callback that is executed if the request succeeds
	    success: empty,
	    // Callback that is executed the the server drops error
	    error: empty,
	    // Callback that is executed on request complete (both: error and success)
	    complete: empty,
	    // The context for the callbacks
	    context: null,
	    // Whether to trigger "global" Ajax events
	    global: true,
	    // Transport
	    xhr: function xhr() {
	        //return new window.XDomainRequest()
	        return new window.XMLHttpRequest();
	    },
	    // MIME types mapping
	    accepts: {
	        script: 'text/javascript, application/javascript',
	        json: jsonType,
	        xml: 'application/xml, text/xml',
	        html: htmlType,
	        text: 'text/plain'
	    },
	    // Whether the request is to another domain
	    crossDomain: false,
	    // Default timeout
	    timeout: 0
	};

	function mimeToDataType(mime) {
	    return mime && (mime == htmlType ? 'html' : mime == jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';
	}

	function appendQuery(url, query) {
	    return (url + '&' + query).replace(/[&?]{1,2}/, '?');
	}

	// serialize payload and append it to the URL for GET requests
	function serializeData(options) {
	    if (type(options.data) === 'object') options.data = param(options.data);
	    if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) options.url = appendQuery(options.url, options.data);
	}

	ajax.get = function (url, success) {
	    return ajax({ url: url, success: success });
	};

	ajax.post = function (url, data, success, dataType) {
	    if (type(data) === 'function') dataType = dataType || success, success = data, data = null;
	    return ajax({ type: 'POST', url: url, data: data, success: success, dataType: dataType });
	};

	ajax.getJSON = function (url, success) {
	    return ajax({ url: url, success: success, dataType: 'json' });
	};

	var escape = encodeURIComponent;

	function serialize(params, obj, traditional, scope) {
	    var array = type(obj) === 'array';
	    for (var key in obj) {
	        var value = obj[key];

	        if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']';
	        // handle data in serializeArray() format
	        if (!scope && array) params.add(value.name, value.value);
	        // recurse into nested objects
	        else if (traditional ? type(value) === 'array' : type(value) === 'object') serialize(params, value, traditional, key);else params.add(key, value);
	    }
	}

	function param(obj, traditional) {
	    var params = [];
	    params.add = function (k, v) {
	        this.push(escape(k) + '=' + escape(v));
	    };
	    serialize(params, obj, traditional);
	    return params.join('&').replace('%20', '+');
	}

	function extend(target) {
	    var slice = Array.prototype.slice;
	    slice.call(arguments, 1).forEach(function (source) {
	        for (key in source) if (source[key] !== undefined) target[key] = source[key];
	    });
	    return target;
	}

/***/ },
/* 246 */
/***/ function(module, exports) {

	var toString = Object.prototype.toString

	module.exports = function(val){
	  switch (toString.call(val)) {
	    case '[object Function]': return 'function'
	    case '[object Date]': return 'date'
	    case '[object RegExp]': return 'regexp'
	    case '[object Arguments]': return 'arguments'
	    case '[object Array]': return 'array'
	    case '[object String]': return 'string'
	  }

	  if (typeof val == 'object' && val && typeof val.length == 'number') {
	    try {
	      if (typeof val.callee == 'function') return 'arguments';
	    } catch (ex) {
	      if (ex instanceof TypeError) {
	        return 'arguments';
	      }
	    }
	  }

	  if (val === null) return 'null'
	  if (val === undefined) return 'undefined'
	  if (val && val.nodeType === 1) return 'element'
	  if (val === Object(val)) return 'object'

	  return typeof val
	}


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/20.
	 *
	 * MainNavigation
	 *
	 *                  style : 系统方法
	 *              leftIcon1 : 左图标1
	 *              leftIcon1 : 左图标2
	 *                   text : 左侧的文字   (state属性)
	 *                  title : 标题
	 *
	 *       eg:  <MainNavigation title="首页" style={{background:"transparent"}}/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            text: "杭州"
	        };
	    },

	    area: "",
	    componentWillMount: function componentWillMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        //console.log("area : " + this.refs.area.value);
	        //console.log("area1 : " + this.refs.area1.value);
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        p.area = new LArea();
	        p.area.init({
	            'trigger': '#area', //触发选择控件的文本框，同时选择完毕后name属性输出到该位置
	            //'valueTo': '#value1', //选择完毕后id属性输出到该位置
	            'keys': {
	                id: 'name',
	                name: 'name'
	            }, //绑定数据源相关字段 id对应valueTo的value属性输出 name对应trigger的value属性输出
	            'type': 1, //数据源类型
	            'data': LAreaData //数据源
	        });

	        //p.area.
	        //area.getData(function(value){
	        //    console.log("value "+ value);
	        //});
	    },

	    getValue: function getValue() {
	        var p = this;
	        console.log("area : " + this.refs.area.value);
	        return this.refs.area.value;
	    },

	    onFocus: function onFocus() {
	        var area = document.getElementById("area");
	        if (area) {
	            area.blur();
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "MNA_k", style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                "div",
	                { className: "MNA_l1", onClick: p.props.leftClick ? p.props.leftClick : "" },
	                React.createElement("i", { className: "iconfont icon-" + (this.props.leftIcon1 ? this.props.leftIcon1 : "dingwei"), style: { fontSize: "1.3rem" } })
	            ),
	            React.createElement(
	                "div",
	                { className: "MNA_t1" },
	                React.createElement("input", { style: { background: "transparent", color: "rgba(255,255,255,0.8)", width: "100%" }, id: "area", ref: "area", onFocus: p.onFocus, readOnly: "readOnly", value: this.state.text })
	            ),
	            React.createElement(
	                "div",
	                { className: "MNA_t" },
	                this.props.title ? this.props.title : ""
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/12.
	 *
	 * IconButton
	 *           style : 自定义宽度以及位置,系统方法
	 *      hightLight : 高亮颜色(css 147行,可以添加)
	 *
	 *
	 *     eg: <IconButton style={{marginLeft:"30px",marginTop:"130px"}} />
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentWillMount: function componentWillMount() {},

	    render: function render() {
	        var p = this;
	        var count = this.props.count;
	        return React.createElement(
	            "div",
	            { className: this.props.classStyle ? this.props.classStyle : " IB_k ", style: { width: count == 3 ? "30%" : "", marginLeft: count == 3 ? "2.5%" : "2%" },
	                onClick: this.props.onClick ? this.props.onClick : function () {} },
	            React.createElement(
	                "div",
	                { style: { height: "auto", width: "auto" } },
	                React.createElement(
	                    "div",
	                    { className: "IB_i" },
	                    React.createElement(
	                        "div",
	                        { className: " IB_i_b " + (this.props.bgc ? this.props.bgc : "") + " " + (this.props.color ? this.props.color : " LBS ") },
	                        React.createElement("i", { className: " iconfont icon-" + (this.props.icon ? this.props.icon : ""), style: { fontSize: "3rem" } })
	                    )
	                ),
	                React.createElement(
	                    "div",
	                    { className: "IB_text" },
	                    this.props.text ? this.props.text : ""
	                )
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 249 */
/***/ function(module, exports) {

	/**
	 * Created by shc@lierda.com on 2016/8/23.
	 */
	"";

	module.exports.getParameterByName = function (name) {
	    var reg = new RegExp("(^|\\?|&)" + name + "=([^&]*)(\\s|&|$)", "i");
	    if (reg.test(location.href)) return unescape(RegExp.$2.replace(/\+/g, " "));
	    return "";
	};

	//js验证一个URl字符串是否有效
	function isValidURL(url) {
	    var urlRegExp = /^((https|http|ftp|rtsp|mms)?:\/\/)+[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/;
	    if (urlRegExp.test(url)) {
	        return true;
	    } else {
	        return false;
	    }
	}
	//验证一个IP字符串是否有效
	function isValidIP(ip) {
	    var ipRegExp = /([0-9]{1,3}\.{1}){3}[0-9]{1,3}/;
	    if (ipRegExp.exec(ip)) {
	        return true;
	    } else {
	        return false;
	    }
	}

	//得到一个url的详情
	function parseURL(url) {
	    var a = document.createElement('a');
	    a.href = url;
	    return {
	        source: url,
	        protocol: a.protocol.replace(':', ''),
	        host: a.hostname,
	        port: a.port,
	        query: a.search,
	        params: (function () {
	            var ret = {},
	                seg = a.search.replace(/^\?/, '').split('&'),
	                len = seg.length,
	                i = 0,
	                s;
	            for (; i < len; i++) {
	                if (!seg[i]) {
	                    continue;
	                }
	                s = seg[i].split('=');
	                ret[s[0]] = s[1];
	            }
	            return ret;
	        })(),
	        file: (a.pathname.match(/\/([^\/?#]+)$/i) || [, ''])[1],
	        hash: a.hash.replace('#', ''),
	        path: a.pathname.replace(/^([^\/])/, '/$1'),
	        relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [, ''])[1],
	        segments: a.pathname.replace(/^\//, '').split('/')
	    };
	}

	module.exports.isValidURL = isValidURL;
	module.exports.isValidIP = isValidIP;
	module.exports.parseURL = parseURL;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by caolinlin on 17/12/27.
	 *
	 * MsgsWin
	 *      style : 自定义宽度以及位置,系统方法
	 *      title : 弹框的标题
	 *       hide : 隐藏窗口
	 *     doDone : 确定按钮
	 *   doCancel : 取消按钮
	 *
	 *
	 *     eg:   <Win ref="win"/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            type: 1, // 1: 时间控制不需要点击确定  2:需要点击确定
	            timeout: 0,
	            word: ""
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (p.props.type == 1) {
	            if (this.state.timeout > 0) {
	                setTimeout(function () {
	                    p.setState({ show: false, timeout: 0 });
	                }, this.state.timeout);
	            }
	        }
	    },

	    hide: function hide() {
	        var p = this;
	        p.setState({ show: false });
	    },

	    stopPop: function stopPop(event) {
	        event.preventDefault();
	        event.stopPropagation();
	    },

	    doDone: function doDone() {
	        if (this.props.doDone) {
	            this.props.doDone();
	        }
	        this.hide();
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: this.state.show ? " W_b BJ_DW_XS" : "W_b BJ_DW_YC" },
	            React.createElement(
	                "div",
	                { className: " W_k", style: this.props.style ? this.props.style : {}, onClick: p.stopPop },
	                React.createElement(
	                    "div",
	                    { className: " BJ_DQ_ZX TBS FS15 ", style: { width: "100%", height: "4rem", lineHeight: "4rem" } },
	                    this.props.title ? this.props.title : "提示"
	                ),
	                React.createElement("div", { style: { height: "2px", borderBottom: "1px solid #e9e5f0", width: "90%", marginLeft: "5%" } }),
	                React.createElement(
	                    "div",
	                    { className: "MW_Word" },
	                    p.state.word
	                ),
	                p.props.type == 2 ? React.createElement(
	                    "div",
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        "div",
	                        { className: "MW_btn BJ_DW_FZ TBS", style: { marginLeft: "16%" }, onClick: p.doCancel },
	                        "取消"
	                    ),
	                    React.createElement(
	                        "div",
	                        { className: "MW_btn BJ_DW_FY TBS", style: { marginRight: "16%" }, onClick: p.doDone },
	                        "确定"
	                    )
	                ) : ""
	            )
	        );
	    }
	});

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/13.
	 */
	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	var IconInput = __webpack_require__(253);
	var PwdInput = __webpack_require__(255);
	var Msg = __webpack_require__(250);
	var Url = __webpack_require__(249);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            pid: 1,
	            APPinfo: { address: "http://n2n.lierdalux.cn:8585/ui/www.zip", version: "v1.1" }
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        if (this.state.APPinfo) {
	            localStorage.setItem("ibms-edition", JSON.stringify(this.state.APPinfo));
	        }
	        this.islogin(function (success) {
	            if (success) {
	                location.href = "#main";
	            }
	        });
	        this.doScan();
	    },
	    islogin: function islogin(cb) {
	        var user = null;
	        var pid = null;
	        var serverUrl = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	            serverUrl = localStorage.getItem("serverUrl");
	            pid = localStorage.getItem("pid");
	        } catch (e) {
	            console.log("user:" + e);
	        }
	        if (user && serverUrl && pid) {
	            cb(true);
	        } else {
	            cb(false);
	        }
	    },
	    gotoReg: function gotoReg() {
	        console.log("gotoReg");
	        location.href = "#register";
	    },
	    gotoForgetPWD: function gotoForgetPWD() {
	        console.log("gotoForgetPWD");
	        location.href = "#forget";
	    },
	    doLogin: function doLogin() {
	        var p = this;
	        var username = this.refs.username.getValue();
	        if (!username) {
	            this.refs.msg.setState({ show: true, word: "用户名不能为空", timeout: 1500 });
	            return;
	        }
	        var password = this.refs.password.getValue();
	        if (!password) {
	            this.refs.msg.setState({ show: true, word: "密码不能为空", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "login", { username: username, password: password }, function (dt) {
	            if (dt && dt.success) {
	                var user = dt.data;
	                var u = { username: user.username, userid: user.userid, role: user.role, parentid: user.parentid, nat: user.nat, phone: user.phone, companyid: user.companyid, exithiden: user.exithiden, img: user.img };
	                localStorage.setItem("ibms-login", JSON.stringify(u));
	                localStorage.setItem("pid", p.state.pid);
	                localStorage.setItem("serverUrl", "http://n2n.lierdalux.cn:8060");
	                location.href = "#main";
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    gotoSaoMiao: function gotoSaoMiao() {
	        if (window.jsbridge) {
	            window.jsbridge.scan();
	        }
	    },
	    doScan: function doScan() {
	        if (window.jsbridge) {

	            window.doScan = this.ScanData;
	        }
	    },

	    ScanData: function ScanData(data) {
	        console.log(data);

	        if (data) {
	            this.refs.msg.setState({
	                show: true, word: data, timeout: 1500
	            });
	            //1.我方免登陆功能
	            if (Url.isValidURL(data)) {
	                var url = Url.parseURL(data);
	                var host = url.host;
	                var hostnew = "";
	                switch (host) {
	                    case "www.lierdalux.cn":
	                        hostnew = "http://www.lierdalux.cn";localStorage.setItem("serverUrl", hostnew);this.setYsView(hostnew, url);break;
	                    case "lsd.lierdalux.cn":
	                        hostnew = "http://lsd.lierdalux.cn";localStorage.setItem("serverUrl", hostnew);this.setYsView(hostnew, url);break;
	                    case "hotel.lierdalux.cn":
	                        hostnew = "http://hotel.lierdalux.cn";localStorage.setItem("serverUrl", hostnew);this.setYsView(hostnew, url);break;
	                    case "jky.lierdalux.cn":
	                        hostnew = "http://jky.lierdalux.cn:8006";localStorage.setItem("serverUrl", hostnew);this.setYsView(hostnew, url);break;
	                    default:
	                        this.gotoHost(data);
	                        break;
	                }
	            } else {
	                //2.普通字符串
	                console.log(data);
	                p.ref.msg.setState({
	                    show: true, word: data
	                });
	            }
	            //3.其他网站
	        } else {
	                this.refs.msg.setState({
	                    show: true, word: "无法识别", timeout: 1500
	                });
	            }
	    },
	    gotoHost: function gotoHost(data) {
	        location.href = "#iframe?url=" + data + "";
	    },
	    setYsView: function setYsView(host, url) {
	        if (host && url && url.path.indexOf("ys") && url.params.hasOwnProperty("yscode")) {
	            Ajax("POST", "yscode", { yscode: url.params.yscode }, function (dt) {
	                if (dt && dt.success) {
	                    var user = dt.data;
	                    var u = { username: user.username, userid: user.userid, role: user.role, parentid: user.parentid, nat: user.nat, phone: user.phone, companyid: user.companyid, exithiden: user.exithiden };
	                    localStorage.setItem("ibms-login", JSON.stringify(u));
	                    if (url.params.hasOwnProperty("pid")) {
	                        localStorage.setItem("pid", url.params.pid);
	                        location.href = "/?pid=" + url.params.pid + "&yscode=1";
	                    } else {
	                        location.href = "/?pid=" + 1 + "&yscode=1";
	                    }
	                }
	            });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main' },
	            React.createElement('div', { className: 'iconfont icon-saoma', style: { position: "absolute", zIndex: 1000, width: "5rem", height: "5rem", lineHeight: "3rem", top: "1rem", left: "2%", fontSize: "3rem", color: "#f5f3f9" }, onClick: this.gotoSaoMiao }),
	            React.createElement('img', { className: 'login_bg', src: 'images/main/login_bg.png' }),
	            React.createElement(
	                'div',
	                { className: 'main', style: { position: "absolute", zIndex: 1 } },
	                React.createElement(IconInput, { ref: 'username', placeholder: '请输入用户名', style: { width: "65%", marginLeft: "17.5%", marginTop: "70%" } }),
	                React.createElement(PwdInput, { ref: 'password', placeholder: '请输入密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(
	                    'div',
	                    { className: 'login_forget', onClick: p.gotoForgetPWD },
	                    "忘记密码?"
	                ),
	                React.createElement(
	                    Button,
	                    { height: '3rem', style: { backgroundColor: "", marginLeft: "19.5%", marginTop: "1rem", width: "65%", borderRadius: "15rem" }, onClick: p.doLogin },
	                    "登 录"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ', style: { width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'login_reg', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem", textAlign: "center" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FY', style: { color: "#8877ff", marginRight: "22%" }, onClick: p.gotoReg },
	                            " 注册"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FY' },
	                            "还没有账户? 现在去 "
	                        )
	                    )
	                ),
	                React.createElement(Msg, { ref: 'msg', type: 1 })
	            )
	        );
	    }
	});

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/4.
	 *
	 * Button
	 *
	 *        style : 自定义宽度以及位置,系统方法
	 *   hightLight : 高亮颜色(css 147行,可以添加)
	 *
	 *
	 *     eg: <Button style={{marginLeft:"30px",marginTop:"130px"}}>{"按钮"}</Button>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentWillMount: function componentWillMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: " B_k " + (this.props.hightLight ? this.props.hightLight : "  "), style: this.props.style ? this.props.style : "",
	                onClick: this.props.onClick ? this.props.onClick : function () {}
	            },
	            this.props.children
	        );
	    }
	});

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by caolinlin on 17/12/8.
	 *
	 * Input:
	 *          style : 自定义宽度以及位置,系统方法
	 *    placeholder : 占位符
	 *        onClick : 点击事件
	 *        doClear : 点击清除输入框中的内容
	 *       doChange : 输入框有变化时调用
	 *   doRightClick : 右边按钮的点击事件(没有写默认 doClear事件 )
	 *
	 *           取值 : var value = this.refs.input.getValue;
	 *
	 *    eg: <Input ref="input" style={{width:"80%",marginTop:"100px",marginLeft:"10%"}} onClick={this.onClick}/>
	 *
	 */
	'';

	var React = __webpack_require__(24);
	var Input = __webpack_require__(254);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            showClear: false,
	            type: "",
	            text: ""
	        };
	    },
	    componentDidMount: function componentDidMount() {},
	    setValue: function setValue(text) {
	        this.refs.input.setState({ text: text });
	    },
	    getValue: function getValue() {
	        return this.refs.input.state.text;
	    },

	    doChange: function doChange(text) {
	        this.setState({ text: text });
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'II_k', style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                'div',
	                { className: ' BJ_DW_FZ TBS ', style: { width: "20%", textAlign: "center" } },
	                React.createElement('i', { className: "TBS iconfont icon-" + (this.props.icon ? this.props.icon : "zhanghao"), style: { fontSize: "2rem" } })
	            ),
	            React.createElement(Input, { ref: 'input', doRightClick: p.doRightClick, doChange: p.doChange, style: { width: "80%", marginLeft: "20%" }, placeholder: this.props.placeholder ? this.props.placeholder : "请输入..." }),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/11/30.
	 *
	 * Input:
	 *          style : 自定义宽度以及位置,系统方法
	 *    placeholder : 占位符
	 *        onClick : 点击事件
	 *        doClear : 点击清除输入框中的内容
	 *       doChange : 输入框有变化时调用
	 *   doRightClick : 右边按钮的点击事件(没有写默认 doClear事件 )
	 *
	 *           取值 : var value = this.refs.input.getValue;
	 *           设置 : this.refs.input.setValue("值");
	 *
	 *    eg: <Input ref="input" style={{width:"80%",marginTop:"100px",marginLeft:"10%"}} onClick={this.onClick}/>
	 *
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            showClear: false,
	            type: "text",
	            icon2: "",
	            text: ""
	        };
	    },

	    componentDidMount: function componentDidMount() {},

	    doClear: function doClear() {
	        this.setState({ text: "" });
	        this.refs.input.focus();
	        this.setState({ showClear: false });
	        if (this.props.doChange) {
	            this.props.doChange("");
	        }
	    },

	    getValue: function getValue() {
	        return this.refs.input.value;
	    },
	    setValue: function setValue(value) {
	        this.refs.input.value = value;
	        this.setState({
	            text: value
	        });
	    },
	    doChange: function doChange(e) {
	        var p = this;
	        var value = e.target.value;
	        if (value.length > 0) {
	            this.setState({ showClear: true });
	        } else {
	            this.setState({ showClear: false });
	        }

	        this.setState({ text: value });
	        if (p.props.doChange) {
	            p.props.doChange(value);
	        }
	    },

	    render: function render() {
	        var p = this;

	        var h_ = this.props.height ? this.props.height : "";
	        var H_ = "";
	        if (h_) {
	            H_ = parseInt(h_.substring(0, h_.length - 3)) - 0.1;
	        }

	        return React.createElement(
	            "div",
	            { className: "I_k", style: this.props.style ? this.props.style : {} },
	            React.createElement("input", { type: p.state.type, className: "I_inp", placeholder: this.props.placeholder ? this.props.placeholder : "请输入...",
	                ref: "input", value: this.state.text, onChange: p.doChange, style: { height: this.props.height ? H_ + "rem" : "1.9rem", lineHeight: this.props.height ? H_ + "rem" : "1.9rem" },
	                onFocus: this.props.onfocus ? this.props.onfocus : "",
	                onBlur: this.props.onblur ? this.props.onblur : "",
	                onClick: this.props.onClick ? this.props.onClick : "" }),
	            React.createElement(
	                "div",
	                { className: this.state.showClear ? " I_ri " : " BJ_DW_YC" },
	                p.state.icon2 ? React.createElement(
	                    "div",
	                    { className: "I_x", style: { color: "gray" }, onClick: this.props.doRightClick ? this.props.doRightClick : p.doClear },
	                    React.createElement("i", { className: "iconfont icon-" + p.state.icon2, style: { fontSize: "2.1rem" } })
	                ) : React.createElement(
	                    "div",
	                    { className: "I_x", onClick: p.doClear },
	                    React.createElement("i", { className: "iconfont icon-guanbi", style: { fontSize: "2.5rem" } })
	                )
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/8.
	 *
	 * PwdInput:
	 *          style : 自定义宽度以及位置,系统方法
	 *    placeholder : 占位符
	 *        onClick : 点击事件
	 *       doChange : 输入框有变化时调用
	 *   doRightClick : 右边按钮的点击事件(没有写默认 doClear事件 )
	 *
	 *           取值 : var value = this.refs.input.getValue;
	 *
	 *    eg: <PwdInput  placeholder="请输入密码" style={{width:"70%",marginLeft:"15%",marginTop:"50px"}}/>
	 *
	 */
	'';

	var React = __webpack_require__(24);
	var Input = __webpack_require__(254);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            showClear: false,
	            type: "",
	            text: ""
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        this.refs.input.setState({ type: "password" });
	        this.refs.input.setState({ icon2: "yanjingbi" });
	    },

	    setValue: function setValue(text) {
	        this.refs.input.setState({ text: text });
	    },
	    getValue: function getValue() {
	        return this.refs.input.state.text;
	    },

	    doChange: function doChange(text) {
	        this.setState({ text: text });
	    },

	    doRightClick: function doRightClick() {
	        if (this.refs.input.state.type == "text") {
	            this.refs.input.setState({ type: "password" });
	            this.refs.input.setState({ icon2: "yanjingbi" });
	        } else {
	            this.refs.input.setState({ type: "text" });
	            this.refs.input.setState({ icon2: "yanjingkai" });
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'II_k', style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                'div',
	                { className: 'BJ_DW_FZ TBS ', style: { width: "20%", textAlign: "center" } },
	                React.createElement('i', { className: "TBS iconfont icon-" + (this.props.icon ? +this.props.icon : "mima"), style: { fontSize: "2rem" } })
	            ),
	            React.createElement(Input, { ref: 'input', doChange: p.doChange, doRightClick: p.doRightClick, style: { width: "80%", marginLeft: "20%" }, placeholder: this.props.placeholder ? this.props.placeholder : "请输入..." }),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/28.
	 */

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(257);
	var Ajax = __webpack_require__(244);
	var DevItem = __webpack_require__(258);
	var MsgWin = __webpack_require__(250);
	var DDCNetAllow = __webpack_require__(260);
	var IconButton = __webpack_require__(248);
	var global = __webpack_require__(262);
	var OpWin = __webpack_require__(263);
	var SearchDevwin = __webpack_require__(264);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            choose: "1",
	            devList: [],
	            groupList: [],

	            user: null,
	            role: 1
	        };
	    },

	    myScroll: "",
	    scrollTop: "",

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user != null) {
	                p.getDevList(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },

	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },

	    bk: function bk() {
	        location.href = "#main";
	    },

	    getDevList: function getDevList(user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ devList: dt.data });

	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                    if (global.homeTag == 2) {
	                        p.myScroll.scrollTo(0, global.scrollTop, 0, IScroll.utils.ease.elastic);
	                        global.homeTag = 0;
	                    }
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "用户失效，请重新登录", timeout: 800 });
	            setTimeout(function () {
	                var pid = localStorage.getItem("pid");
	                if (pid && pid != "NaN") {
	                    location.href = "/login?pid=" + pid;
	                } else {
	                    location.href = "/login";
	                }
	            }, 1500);
	        }
	    },

	    findDev: function findDev(text) {
	        var p = this;
	        var user = p.state.user;
	        if (user != null) {
	            Ajax("POST", "getDeviceListByName", { userid: user.parentid, uid: user.userid, role: user.role, name: text }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ devList: dt.data });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    } else {
	                        p.myScroll.refresh();
	                        p.myScroll.scrollTo(0, 0, 0, IScroll.utils.ease.elastic); // 滚动到顶部
	                    }
	                }
	            });
	        }
	    },

	    doChoose: function doChoose(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id == 1) {
	            location.href = "#groupList";
	        } else {
	            location.href = "#deviceList";
	        }
	    },
	    doTag: function doTag() {},
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    itemClick: function itemClick(obj, str) {
	        var p = this;
	        if (p.myScroll) {
	            p.scrollTop = p.myScroll.y;
	        }

	        var attr = JSON.parse(obj.attributes);
	        var devList = this.state.devList;
	        for (var i = 0; i < devList.length; i++) {
	            if (devList[i].id == obj.id) {
	                for (var o in str) {
	                    console.log("att : " + devList[i].attributes);
	                    var att = JSON.parse(devList[i].attributes);
	                    if (obj.type == 23 || obj.type == 35) {
	                        att["TIP"] = 1;
	                    }
	                    att[o] = str[o];
	                    console.log("att[o]- : " + o);
	                    console.log("att[o] : " + att[o]);
	                    devList[i].attributes = JSON.stringify(att);
	                    console.log("devList[i].attributes : " + devList[i].attributes);
	                }
	            }
	        }
	        this.setState({ devList: devList });

	        if (attr["LIVE"] && attr["LIVE"] == "ON") {
	            var cmdStr = this.cmd_protocol(obj.macid, obj.ddcmac);
	            cmdStr.attributes = str;
	            if (attr.hasOwnProperty("GRP") && attr.GRP != "00" && obj.macid == "0000000000000000") {
	                cmdStr.attributes["GRP"] = attr.GRP;
	                cmdStr.attributes["TYP"] = attr.TYP;
	            } else {
	                if (attr.hasOwnProperty("NAM") && attr.NAM && attr.NAM != obj.macid) {
	                    cmdStr.attributes["NAM"] = attr.NAM;
	                }
	            }
	            this.cmd(JSON.stringify(cmdStr));
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备不在线", timeout: 1500 });
	        }
	    },

	    goDetail: function goDetail(link, id) {
	        global.homeTag = 2;
	        global.scrollTop = this.myScroll.y;
	        location.href = "#" + link + "/" + id + "?f=3";
	    },

	    addDevice: function addDevice() {

	        this.refs.ddcnetallow.initData(this.state.user);
	        this.refs.ddcnetallow.show();
	    },

	    netAllow: function netAllow(id, ddcId) {
	        var p = this;
	        var cmd = {
	            "sourceId": "123456",
	            "requestType": "network_close",
	            "serialNum": 0,
	            "id": "0000000000000000",
	            "ddcId": ddcId
	        };

	        cmd.requestType = "network_open";
	        var cmdStr = JSON.stringify(cmd);
	        console.log("cmdStr:" + cmdStr);
	        Ajax("POST", "AllowDDCAddDev", { cmdStr: cmdStr }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt.success) {}
	        });

	        var date = new Date();
	        var commonTime = date.toLocaleString();
	        var dateTime = p.format(commonTime);
	        // console.log("----dateTime : " + dateTime);

	        setTimeout(function (ddcId) {
	            p.refs.search.showWin(60, id, dateTime);
	        }, 400);
	    },

	    // 把当前时间转换成  "yy/MM/ss 上午hh:mm:ss" 转成 "yy-MM-ss hh:mm:ss"
	    format: function format(str) {
	        var p = this;
	        var list = (str + "").split(" ");
	        var date = list[0];
	        var time = list[1];

	        var dateL = date.split("/");
	        var yy = dateL[0];
	        var MM = dateL[1];
	        var dd = dateL[2];
	        var dateTemp = p._addZero(yy) + "-" + p._addZero(MM) + "-" + p._addZero(dd);
	        var timeStr = time.substring(0, 2);
	        var tt = time.substring(2);
	        var timeL = tt.split(":");
	        var timeTemp = "";
	        if (timeStr == "下午") {
	            var hh = parseInt(timeL[0]) + 12;
	            var ss = timeL[1];
	            var mm = timeL[2];
	            timeTemp = hh + ":" + p._addZero(ss) + ":" + p._addZero(mm);
	        } else {
	            var hh2 = timeL[0];
	            var ss2 = timeL[1];
	            var mm2 = timeL[2];
	            timeTemp = p._addZero(hh2) + ":" + p._addZero(ss2) + ":" + p._addZero(mm2);
	        }
	        return dateTemp + " " + timeTemp;
	    },
	    _addZero: function _addZero(str) {
	        var value = "";
	        if (str > 10) {
	            value = str;
	        } else {
	            value = "0" + str;
	        }
	        return value;
	    },

	    reflashData: function reflashData() {
	        var p = this;
	        var user = p.state.user;
	        if (user != null) {
	            p.getDevList(user);
	        } else {
	            console.log("用户不存在");
	        }
	    },

	    render: function render() {
	        var p = this;
	        var devData = "";
	        var d = 0;
	        if (this.state.devList.length > 0) {
	            devData = this.state.devList.map(function (obj) {
	                var attr = JSON.parse(obj.attributes);
	                var t = obj.type;
	                if (t == 15) {
	                    var obj15 = {};
	                    if (attr.titleid == 2) {
	                        if (attr.hasOwnProperty("TUN")) {
	                            if (attr.TUN == "OPEN") {
	                                obj15["TUN"] = "CLOSE";
	                            } else {
	                                obj15["TUN"] = "OPEN";
	                                obj15["STP"] = attr.STP;
	                                obj15["SMD"] = attr.SMD;
	                                obj15["SSP"] = attr.SSP;
	                            }
	                        }
	                    } else if (attr.titleid == 4) {
	                        if (attr.hasOwnProperty("SW1")) {
	                            if (attr.SW1 = "ON") {
	                                obj15["SW1"] = "OFF";
	                                obj15["SW2"] = "ON";
	                            } else {
	                                obj15["SW2"] = "OFF";
	                                obj15["SW1"] = "ON";
	                            }
	                        }
	                    }
	                }

	                //console.log("d : " + ((d%6)+1));

	                // 判断是否有这类设备
	                if (t == 1 || t == 14 || t == 26 || t == 27) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0 })
	                    );
	                } else if (t == 13 && attr.hasOwnProperty("titleid") && attr.titleid != 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname,
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0, type: '1' })
	                    );
	                } else if (t == 13 && attr.hasOwnProperty("titleid") && attr.titleid == 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, info: attr.hasOwnProperty("TUN") && attr.TUN == "OPEN" ? "地暖已开启" : "地暖已关闭" })
	                    );
	                } else if (t == 5 || t == 6 || t == 17) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "WIN": attr.hasOwnProperty("WIN") && attr.WIN == "OPEN" ? "CLOSE" : "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: attr.hasOwnProperty("WIN") && attr.WIN == "OPEN" ? 1 : 0 })
	                    );
	                } else if (t == 11 || t == 28 || t == 36 || t == 37) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "LCK": "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: false })
	                    );
	                } else if (t == 7 || t == 20 || t == 21) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, info: attr.hasOwnProperty("PIR") && attr.PIR == "YES" ? "有人经过" : "无人经过" })
	                    );
	                } else if (t == 8 || t == 18) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "LCK": "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: false
	                        })
	                    );
	                } else if (t == 9 || t == 25) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, info: attr.hasOwnProperty("TEM") && attr.hasOwnProperty("HUM") ? attr.TEM + "℃/" + attr.HUM + "%" : "℃/%"
	                        })
	                    );
	                } else if (t == 10) {
	                    var info = "门关闭";
	                    if (attr.hasOwnProperty("DOR")) {
	                        if (attr.DOR == "OPEN") {
	                            info = "门打开";
	                        } else {
	                            info = "门关闭";
	                        }
	                    } else {
	                        info = "未触发状态";
	                    }
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, info: info })
	                    );
	                } else if (t == 23 || t == 35) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("AIF") && attr.AIF.substr(0, 1) == 1 ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: attr.hasOwnProperty("TIP") ? attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0 : attr.hasOwnProperty("AIF") && attr.AIF.substr(0, 1) == 1 ? 1 : 0
	                        })
	                    );
	                } else if (t == 24) {
	                    // 溢水传感器
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, info: attr.hasOwnProperty("WAT") && attr.WAT == "YES" ? "已溢水" : "水位正常" })
	                    );
	                } else if (t == 15 && !attr.hasOwnProperty("titleid")) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, obj15);
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, isOpen: attr.hasOwnProperty("TUN") && attr.TUN == "OPEN" ? 1 : 0 })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 3) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 4) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else if (t == 2 || t == 3 || t == 4 || t == 12 || t == 19 || t == 22 || t == 29 || t == 31) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else if (t == 16 || t == 39) {
	                    // 平板没有控制字段和ddc名称
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias ? obj.alias : obj.macid, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                }
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { ref: 'navSearch', options: this.state.role, title: '设备', style: { background: "transparent" }, add: p.addDevice, search: p.findDev }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white" } },
	                React.createElement(
	                    'div',
	                    { className: " segment ", 'data-id': '1', onClick: p.doChoose },
	                    "区域"
	                ),
	                React.createElement(
	                    'div',
	                    { className: "segChoose", 'data-id': '2', onClick: p.doChoose },
	                    "设备"
	                ),
	                React.createElement('div', { style: { position: "relative", top: "7rem", backgroundImage: "url(images/main/main_bg1.png)", backgroundSize: "100%", height: "4rem" } })
	            ),
	            React.createElement('div', { style: { clear: "both" } }),
	            React.createElement(
	                'div',
	                { style: { height: "100%", paddingBottom: "15.5rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        devData,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '2' }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' }),
	            React.createElement(DDCNetAllow, { title: 'DDC选择', height: '13rem', ref: 'ddcnetallow', doDone: p.netAllow }),
	            React.createElement(SearchDevwin, { ref: 'search', hideWin: p.reflashData })
	        );
	    }
	});

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by caolinlin on 17/12/27.
	 *
	 * DevNavigation
	 *
	 *                  style : 系统方法
	 *              leftIcon1 : 左图标1
	 *              leftIcon1 : 左图标2
	 *                   text : 左侧的文字   (state属性)
	 *                  title : 标题
	 *
	 *       eg:  <DevNavigation title="首页" style={{background:"transparent"}}/>
	 */

	'';

	var React = __webpack_require__(24);
	var Input = __webpack_require__(254);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            sFlag: 0
	        };
	    },

	    componentDidMount: function componentDidMount() {},
	    search: function search(e) {
	        e.preventDefault();
	        var value = this.refs.input.value;
	        //alert("input: " + value);

	        this.props.search(value);
	    },

	    doSearch: function doSearch() {
	        var p = this;
	        var sFlag = this.state.sFlag;
	        if (sFlag) {
	            p.setState({ sFlag: 0 });
	        } else {
	            p.setState({ sFlag: 1 });
	        }
	    },
	    doClear: function doClear() {
	        this.refs.input.value = "";
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'DNA_k', style: this.props.style ? this.props.style : {} },
	            p.state.sFlag ? React.createElement(
	                'div',
	                { className: 'DNA_s' },
	                React.createElement(
	                    'form',
	                    { className: 'BJ_BL_W85 BJ_DW_FZ', id: 'search', action: '', onSubmit: p.search },
	                    React.createElement('input', { className: 'DNA_input', ref: 'input', placeholder: '搜索...', type: 'text', name: 'search' })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'I_qc' },
	                    React.createElement('i', { className: "iconfont icon-guanbi", onClick: p.doClear, style: { fontSize: "2.2rem" } })
	                )
	            ) : React.createElement(
	                'div',
	                { className: 'DNA_t' },
	                this.props.title ? this.props.title : "标题"
	            ),
	            this.props.options == 1 ? React.createElement('div', { className: 'DNA_r1' }) : React.createElement(
	                'div',
	                { className: 'DNA_r1', onClick: p.props.add ? p.props.add : "" },
	                React.createElement('i', { className: "iconfont icon-" + (this.props.icon1 ? this.props.icon1 : "tianjia"), style: { fontSize: "1.7rem" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'DNA_r2', onClick: p.doSearch },
	                React.createElement('i', { className: "iconfont icon-" + (this.props.icon2 ? this.props.icon2 : "sousuo"), style: { fontSize: "1.7rem" } })
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/27.
	 *
	 *
	 *         type: 1:有开关控制的  2:有文字显示的  3:什么也没有 (默认什么也没有)
	 *
	 */

	'';

	var React = __webpack_require__(24);
	var Input = __webpack_require__(254);
	var SwitchBtn = __webpack_require__(259);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            type: ""
	        };
	    },
	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;

	        var isnew = this.props.isnew;

	        return React.createElement(
	            'div',
	            { className: 'itemdev' },
	            React.createElement(
	                'div',
	                { className: 'itemicon' },
	                React.createElement(
	                    'div',
	                    { className: "itemCircle " + (p.props.color ? p.props.color : "TB4"), onClick: p.props.gotoDetail ? p.props.gotoDetail : "" },
	                    React.createElement('i', { className: "iconfont icon-" + (p.props.icon ? p.props.icon : "zhanghao"), style: { fontSize: "3rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'itemColl' },
	                    React.createElement('div', { className: " FS13 iconfont" + (p.props.commonuse ? " icon-xingxing HS" : " ") })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemTitlek' },
	                React.createElement(
	                    'div',
	                    { className: 'itemTitle', style: { width: isnew == 1 ? "40%" : "65%" }, onClick: p.props.gotoDetail ? p.props.gotoDetail : "" },
	                    p.props.name
	                ),
	                isnew == 1 ? React.createElement(
	                    'div',
	                    { className: "BJ_DW_FZ alertRound " },
	                    "new"
	                ) : "",
	                p.props.type == 1 ? React.createElement(
	                    'div',
	                    { className: 'itemBtn' },
	                    React.createElement(SwitchBtn, { choose: p.props.isOpen ? p.props.isOpen : 0, doSwitch: p.props.doSwitch ? p.props.doSwitch : "" })
	                ) : "",
	                p.props.type == 2 ? React.createElement(
	                    'div',
	                    { className: 'itemInfo' },
	                    this.props.info ? this.props.info : ""
	                ) : ""
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemInfom', onClick: p.props.gotoDetail ? p.props.gotoDetail : "" },
	                React.createElement(
	                    'div',
	                    { className: 'itemText1' },
	                    p.props.alias ? p.props.alias : ""
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'itemText2' },
	                    p.props.ddcname ? p.props.ddcname : ""
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemMore', 'data-id': this.props["data-id"] ? this.props["data-id"] : "", onClick: p.props.gotoDetail ? p.props.gotoDetail : "" },
	                React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	            ),
	            this.props.children
	        );
	    }
	});
	/*
	<div className="itemLine"></div>
	*/

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on on 17/12/18.
	 *
	 * SwitchButton
	 *        style : 自定义宽度以及位置,系统方法
	 *   hightLight : 高亮颜色(css 147行,可以添加)
	 *
	 *
	 *     eg: <SwitchButton style={{marginLeft:"30px",marginTop:"130px"}}/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            enclick: 1,
	            choose: 1
	        };
	    },

	    componentWillMount: function componentWillMount() {},
	    doClick: function doClick(e) {
	        var p = this;
	        e.preventDefault();
	        e.stopPropagation();
	        var t = e.currentTarget.getAttribute("data-id");
	        if (this.state.enclick) {
	            if (p.props.doSwitch) {
	                p.props.doSwitch(t);
	                p.setState({ enclick: 0 });
	                setTimeout(function () {
	                    p.setState({ enclick: 1 });
	                }, 1000);
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        //console.log("choose : " + this.props.choose);
	        var choose = this.props.choose ? this.props.choose : 0; // 0: 关  1: 开
	        return React.createElement(
	            "div",
	            { className: " SB_k " + (choose == 0 ? "YS_BJ_WFS" : "YS_BJ_TBS"), width: p.props.width,
	                onClick: this.doClick, style: this.props.style ? this.props.style : {},
	                "data-id": this.props["data-id"] ? this.props["data-id"] : ""
	            },
	            React.createElement("div", { className: "SB_l " + (choose == 0 ? "BJ_DW_XS" : "BJ_DW_YC") }),
	            React.createElement("div", { className: "SB_r " + (choose == 1 ? "BJ_DW_XS" : "BJ_DW_YC") }),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/4/11.
	 */

	'';

	var React = __webpack_require__(24);
	var BWin = __webpack_require__(261);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            data: []
	        };
	    },

	    myScroll: null,
	    componentDidMount: function componentDidMount() {},
	    hide: function hide() {
	        var p = this;
	        p.refs.win.setState({ show: false });
	    },

	    show: function show() {
	        /*  var p =this;
	         if(!p.myScroll ){
	         p.myScroll = new IScroll('#wrapper1', {scrollX: false, scrollY: true, click:true,mouseWheel: true});
	         }else{
	         p.myScroll.refresh();
	         }*/
	        this.refs.win.setState({ show: true });
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },

	    initData: function initData(user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDdcListByUserId", { userid: user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ data: dt.data });

	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                }
	            });
	        }
	    },

	    doDone: function doDone(e) {
	        e.preventDefault();
	        e.stopPropagation();

	        var id = e.currentTarget.getAttribute("data-id");
	        var ddcmac = e.currentTarget.getAttribute("data-ddcmac");
	        if (this.props.doDone) {
	            this.props.doDone(id, ddcmac);
	            this.hide();
	        }
	    },

	    render: function render() {
	        var p = this;

	        var t = 0;
	        var listData = "";
	        var data = p.state.data;
	        if (data.length > 0) {
	            listData = data.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "l_" + t++, className: ' ddcnet_item ', 'data-id': obj.id, 'data-mac': obj.ddcmac, onClick: p.doDone },
	                    obj.ddcname
	                );
	            });
	        }

	        return React.createElement(
	            BWin,
	            { type: '1', ref: 'win', title: this.props.title, height: this.props.height ? this.props.height : "20rem" },
	            React.createElement(
	                'div',
	                { id: 'wrapper', style: { height: "95%", marginTop: "5%" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto" } },
	                    listData
	                )
	            )
	        );
	    }
	});

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/26.
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            show: false
	        };
	    },

	    componentDidMount: function componentDidMount() {},
	    hide: function hide() {
	        var p = this;
	        p.setState({ show: false });
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: this.state.show ? " W_b  " : "W_b BJ_DW_YC" },
	            React.createElement(
	                "div",
	                { className: this.state.show ? " EW_k " : "EW_k  BJ_DW_YC" },
	                React.createElement(
	                    "div",
	                    { className: "EW_title" },
	                    React.createElement(
	                        "div",
	                        { className: "EW_text", style: { width: "100%" } },
	                        p.props.title ? p.props.title : "标题"
	                    )
	                ),
	                React.createElement("div", { className: "line", style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    "div",
	                    { style: { width: "100%", height: this.props.height ? this.props.height : "20rem" } },
	                    this.props.children
	                ),
	                React.createElement("div", { className: "line", style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    "div",
	                    { className: "BJ_DW_JZ", style: { height: "5rem", width: "20rem", marginTop: "1rem" } },
	                    p.props.type == 1 ? React.createElement(
	                        "div",
	                        { className: "BJ_DW_JZ", style: { width: "8rem" } },
	                        React.createElement(
	                            "div",
	                            { className: "MW_btn BJ_DW_FZ TBS", style: { width: "8rem", height: "2.5rem" }, onClick: p.hide },
	                            "取消"
	                        )
	                    ) : React.createElement(
	                        "div",
	                        { className: "BJ_DW_JZ", style: { width: "18rem" } },
	                        React.createElement(
	                            "div",
	                            { style: { height: "4rem" } },
	                            React.createElement(
	                                "div",
	                                { className: "MW_btn BJ_DW_FZ TBS", style: { width: "8rem", height: "2.5rem" }, onClick: p.hide },
	                                "取消"
	                            ),
	                            React.createElement(
	                                "div",
	                                { className: "MW_btn BJ_DW_FY TBS", style: { width: "8rem", height: "2.5rem" }, onClick: p.props.doDone },
	                                "确定"
	                            )
	                        )
	                    )
	                )
	            )
	        );
	    }
	});

/***/ },
/* 262 */
/***/ function(module, exports) {

	/**
	 * Created by caolinlin on 18/3/2.
	 */

	"";

	var global = {

	    searchText: "", // 搜索内容
	    scrollTop: 0, homeTag: 1, // 设备列表的
	    //groupDevScrollTop:0,groupDevTag:1,               // 区域列表的
	    //
	    //sceneScrollTop:0,sceneBottom:0,                  // 情景列表的返回
	    //robotScrollTop:0,robotBottom:0,                  // 机器人列表的返回
	    //
	    settingScrollTop: 0, settingBottom: 0, // 配置列表的返回
	    settingSeach: "", // 配置搜索内容
	    exeDevScrollTop: 0, // 执行设备Win
	    trigDevScrollTop: 0, // 触发设备Win
	    //
	    //padScrollTop:0,padBottom:0,                      // 平板列表
	    //
	    //installList:0,                                   // 微信中 安装
	    //servicingList:0,                                 // 微信中的 维修
	    //
	    //securityTop:0,securityTag:1,                     // 安防列表页面(左侧菜单栏)
	    //
	    //useScrollTop:0,                                   // 用户
	    //useUpdataTop:0

	    // setting
	    Sddc: {},
	    Sname: "",
	    Slogic: "", // and:与 or:或
	    StrigList: [],
	    StrigName: [],
	    SexecList: [],
	    SexecName: [],
	    Stime1: "",
	    Stime2: "",
	    Sweek: [0, 0, 0, 0, 0, 0, 0, 0],
	    Sdelay: "",
	    SdelayStr: ""

	};
	module.exports = global;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/26.
	 */

	'';

	var React = __webpack_require__(24);
	var BWin = __webpack_require__(261);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            //show:false,
	            data: []
	        };
	    },

	    myScroll: null,
	    componentDidMount: function componentDidMount() {},
	    hide: function hide() {
	        var p = this;
	        p.refs.win.setState({ show: false });
	    },

	    show: function show() {
	        /*  var p =this;
	          if(!p.myScroll ){
	              p.myScroll = new IScroll('#wrapper1', {scrollX: false, scrollY: true, click:true,mouseWheel: true});
	          }else{
	              p.myScroll.refresh();
	          }*/
	        this.refs.win.setState({ show: true });
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },

	    doDone: function doDone(e) {
	        e.preventDefault();
	        e.stopPropagation();

	        var id = e.currentTarget.getAttribute("data-id");
	        var fid = e.currentTarget.getAttribute("data-fid");
	        if (this.props.doDone) {
	            this.props.doDone(id, fid);
	        }
	    },

	    render: function render() {
	        var p = this;

	        var t = 0;
	        var listData = "";
	        var data = p.state.data;
	        if (data.length > 0) {
	            listData = data.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "l_" + t++, className: ' OW_item ', 'data-id': obj.id, 'data-fid': obj.fid, onClick: p.doDone },
	                    obj.name
	                );
	            });
	        }

	        return React.createElement(
	            BWin,
	            { type: '1', ref: 'win', title: this.props.title, height: this.props.height ? this.props.height : "20rem" },
	            React.createElement(
	                'div',
	                { style: { height: "100%" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto" } },
	                    listData
	                )
	            )
	        );
	    }
	});

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/4/12.
	 */

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            type: "loading",
	            word: "正在提交",
	            show: false,
	            time: 60,
	            count: 0
	        };
	    },
	    timer: "",
	    tt: "",

	    showWin: function showWin(time, id, datetime) {
	        var p = this;
	        p.setState({ show: true });
	        if (time > 0) {
	            var t = parseInt(time) - 1;
	            p.timer = setInterval(function () {
	                if (t == 0) {
	                    p.setState({ time: "" });
	                    p.hideWin();
	                } else {
	                    p.setState({ time: t });
	                    t--;
	                }
	            }, 1000);
	        }
	        p.tt = setInterval(function () {
	            p.getCount(id, datetime);
	        }, 5000);
	    },

	    getCount: function getCount(id, datetime) {
	        var p = this;
	        if (id && datetime) {
	            Ajax("POST", "getDeviceNewCount", { ddcid: id, datetime: datetime }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ count: dt.data.newtotal });
	                } else {
	                    console.log("error : " + dt.msg);
	                    p.setState({ count: 0 });
	                }
	            });
	        }
	    },
	    hideWin: function hideWin() {
	        var p = this;
	        clearInterval(p.timer);
	        clearInterval(p.tt);
	        p.setState({ show: false });
	        p.props.hideWin();
	    },

	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: this.state.show ? " searchDev " : " BJ_DW_YC", onClick: this.hideWin },
	            React.createElement(
	                'div',
	                { className: 'BJ_DW_JZ', style: { width: "64px", height: "64px", marginTop: "60%" } },
	                React.createElement('iframe', { src: "images/search.svg", frameBorder: '0' })
	            ),
	            React.createElement(
	                'div',
	                { style: { textAlign: "center", color: "white", width: "100%", marginTop: "1rem", height: "2rem", lineHeight: "2rem", fontSize: "1.4rem" } },
	                "设备入网倒计时 " + this.state.time + " 秒"
	            ),
	            React.createElement(
	                'div',
	                { style: { textAlign: "center", color: "white", width: "100%", marginTop: "1rem", height: "2rem", lineHeight: "2rem", fontSize: "1.4rem" } },
	                "搜索到 " + this.state.count + " 个新设备"
	            )
	        );
	    }
	});

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/28.
	 */

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var ajax = __webpack_require__(244);
	var DevItem = __webpack_require__(258);
	var MsgWin = __webpack_require__(250);
	var IconButton = __webpack_require__(248);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            choose: "1",
	            devList: [],
	            groupList: [],
	            role: 1
	        };
	    },

	    scrollTop: "",
	    myScroll2: "",

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.getGrpupListByUserId(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        location.href = "#main";
	    },
	    getGrpupListByUserId: function getGrpupListByUserId(user) {
	        var p = this;

	        if (user) {
	            ajax("POST", "getGrpupListByUserId", { userid: user.parentid }, function (dt) {

	                if (dt && dt.success) {
	                    p.setState({ groupList: dt.data });

	                    if (!p.myScroll2) {
	                        p.myScroll2 = new IScroll('#wrapper2', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll2.refresh();
	                    }
	                }
	            });
	        }
	    },

	    doChoose: function doChoose(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id == 1) {
	            location.href = "/#groupList";
	        } else {
	            location.href = "/#device";
	        }
	    },
	    doTag: function doTag() {},

	    itemClick: function itemClick(obj, str) {
	        var p = this;
	    },
	    noGroup: function noGroup() {
	        location.href = "/#/groupDevice/0/未分配";
	    },
	    goGroupDevice: function goGroupDevice(id, name) {
	        location.href = "/#groupDevice/" + id + "/" + name;
	    },
	    addArea: function addArea() {
	        console.log("addArea ");
	        location.href = "#updateGroupDev/0";
	    },

	    render: function render() {
	        var p = this;

	        //  var groupList = this.state.groupList;
	        var groupData = "";
	        var g = 0;
	        var count = 2;
	        if (this.state.groupList.length > 0) {
	            count = Math.ceil((this.state.groupList.length + 2) / 3);
	            groupData = this.state.groupList.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "g_" + ++g },
	                    React.createElement(IconButton, { bgc: "TB" + ((g - 1) % 6 + 1), icon: obj.dicon, text: obj.name, count: '3', onClick: function () {
	                            p.goGroupDevice(obj.id, obj.name);
	                        } })
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: '设备', style: { background: "transparent" } }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white" } },
	                React.createElement(
	                    'div',
	                    { className: "segChoose", 'data-id': '1', onClick: p.doChoose },
	                    "区域"
	                ),
	                React.createElement(
	                    'div',
	                    { className: "segment", 'data-id': '2', onClick: p.doChoose },
	                    "设备"
	                ),
	                React.createElement('div', { style: { position: "relative", top: "7rem", backgroundImage: "url(images/main/main_bg1.png)", backgroundSize: "100%", height: "4rem" } })
	            ),
	            React.createElement('div', { style: { clear: "both" } }),
	            React.createElement(
	                'div',
	                { style: { height: "100%", paddingBottom: "15.5rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper2', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: count * 10.6 + "rem" } },
	                        React.createElement(IconButton, { bgc: 'TB6', icon: 'keting', text: '未分区', count: '3', onClick: this.noGroup }),
	                        groupData,
	                        this.state.role == 1 ? "" : React.createElement(IconButton, { bgc: 'TB6', icon: 'tianjia', text: '添加', count: '3', onClick: this.addArea })
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '2' }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/18.
	 *
	 * Navigation
	 *                 style : 系统方法
	 *              leftIcon : 左图标
	 *             leftClick : 左事件
	 *             rightIcon : 右图标
	 *            rightClick : 右事件
	 *                 title : 标题
	 *
	 *       eg: <Navigation leftIcon="zhanghao" leftClick={this.leftClick}/>
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "NA_k", style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                "div",
	                { className: "NA_l", onClick: p.props.leftClick ? p.props.leftClick : "" },
	                React.createElement("i", { className: "iconfont icon-" + (this.props.leftIcon ? this.props.leftIcon : ""), style: { fontSize: "2.3rem" } })
	            ),
	            React.createElement(
	                "div",
	                { className: "NA_t" },
	                this.props.title ? this.props.title : "标题"
	            ),
	            React.createElement(
	                "div",
	                { className: "NA_r", onClick: p.props.rightClick ? p.props.rightClick : "" },
	                React.createElement("i", { className: "iconfont icon-" + (this.props.rightIcon ? this.props.rightIcon : ""), style: { fontSize: "2rem" } }),
	                React.createElement(
	                    "i",
	                    { style: { fontSize: "1.5rem" } },
	                    this.props.rightText ? this.props.rightText : ""
	                )
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/21.
	 */
	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var SceneItem = __webpack_require__(268);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            sceneList: [],
	            sceneid: 0,
	            role: 0
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.setState({
	                    role: user.role
	                });
	                p.getSceneByUserid(user.parentid, user.userid, user.role);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#main";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    myScroll: null,
	    getSceneByUserid: function getSceneByUserid(userid, uid, role) {
	        var p = this;
	        Ajax("POST", "getSceneListByUserId", { userid: userid, uid: uid, role: role }, function (dt) {
	            if (dt && dt.success) {
	                var scene = dt.data;
	                p.setState({
	                    sceneList: scene
	                });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            }
	        });
	    },

	    sendScene: function sendScene(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("id");
	        console.log(id);
	        this.getSceneById(id, function (scene) {
	            p.sendCmd(scene);
	        });
	    },
	    sendCmd: function sendCmd(scene) {
	        var p = this;
	        if (scene && scene.hasOwnProperty("attributes") && scene.hasOwnProperty("id")) {
	            p.setState({ sceneid: scene.id });
	            var comList = null;
	            try {
	                comList = JSON.parse(scene.attributes);
	            } catch (e) {
	                console.log(e);
	            }
	            if (comList) {
	                for (var j = 0; j < comList.length; j++) {
	                    var devId = comList[j].devID;
	                    var ddcId = null;
	                    if (comList[j].hasOwnProperty("ddcmac")) {
	                        ddcId = comList[j].ddcmac;
	                    } else {
	                        ddcId = comList[j].ddcID;
	                    }
	                    var obj = p.cmd_protocol(devId, ddcId);
	                    obj.attributes = comList[j].attributes;
	                    if (comList[j].attributes && comList[j].attributes.hasOwnProperty("GRP") && comList[j].attributes.hasOwnProperty("TYP") && comList[j].attributes.GRP != "00") {
	                        if (devId == "0000000000000000") {
	                            obj.attributes["GRP"] = comList[j].attributes.GRP;
	                            obj.attributes["TYP"] = comList[j].attributes.TYP;
	                        } else {
	                            if (comList[j].attributes.hasOwnProperty("NAM") && comList[j].attributes.NAM && comList[j].attributes.NAM != devId) {
	                                obj.attributes["NAM"] = comList[j].attributes.NAM;
	                            }
	                        }
	                    }
	                    this.cmd(JSON.stringify(obj));
	                }
	            }
	        }
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                console.log(dt.msg);
	            }
	        });
	    },
	    getSceneById: function getSceneById(id, cb) {
	        var sceneList = this.state.sceneList;
	        var scene = null;
	        for (var i = 0; i < sceneList.length; i++) {
	            if (sceneList[i].hasOwnProperty("id") && sceneList[i].id == id) {
	                scene = sceneList[i];
	            }
	        }
	        if (scene) {
	            cb(scene);
	        } else {
	            Ajax("POST", "getSceneById", { id: id }, function (dt) {
	                if (dt && dt.success) {
	                    scene = dt.data[0];
	                    cb(scene);
	                } else {
	                    cb(null);
	                }
	            });
	        }
	    },
	    setCommonUse: function setCommonUse(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        if (this.state.role == 1) {
	            this.refs.msg.setState({
	                show: true,
	                word: "该用户无此权限",
	                timeout: 1500
	            });
	        } else {
	            var id = e.currentTarget.getAttribute("id");
	            console.log(id);
	            var sceneList = this.state.sceneList;
	            for (var i = 0; i < sceneList.length; i++) {
	                if (sceneList[i].hasOwnProperty("id") && sceneList[i].id == id) {
	                    var commonuse = sceneList[i].commonuse;
	                    if (parseInt(commonuse)) {
	                        sceneList[i].commonuse = 0;
	                    } else {
	                        sceneList[i].commonuse = 1;
	                    }
	                    this.setCommonSceneById(sceneList[i].id, sceneList[i].commonuse);
	                    this.setState({
	                        sceneList: sceneList
	                    });
	                }
	            }
	        }
	    },
	    setCommonSceneById: function setCommonSceneById(id, commonuse) {
	        Ajax("POST", "setCommonSceneById", { id: id, v: commonuse }, function (dt) {
	            if (dt && dt.success) {
	                console.log(dt.msg);
	            }
	        });
	    },
	    render: function render() {
	        var p = this;
	        var SceneButtonList = this.state.sceneList.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            if (obj.hasOwnProperty("id") && obj.id == p.state.sceneid) {
	                return React.createElement(SceneItem, { commonuse: obj.commonuse, bgc: bgc, icon: obj.hicon, text: obj.buttonname, key: "scen_" + num, id: obj.id, style: { boxShadow: " 0 0 12px #a5a3ab " }, onClick: p.sendScene, setCommonUse: p.setCommonUse });
	            } else {
	                return React.createElement(SceneItem, { commonuse: obj.commonuse, bgc: bgc, icon: obj.hicon, text: obj.buttonname, key: "scen_" + num, id: obj.id, onClick: p.sendScene, setCommonUse: p.setCommonUse });
	            }
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: '情景' }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100', style: { zIndex: "1", height: "28rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto", position: "absolute", zIndex: "1" } },
	                        SceneButtonList
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Footer, { viewTab: '3' })
	        );
	    }
	});

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	"";

	var React = __webpack_require__(24);
	//var IconButton=require("../components/IconButton");

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            choose: 1
	        };
	    },
	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        return React.createElement(
	            "div",
	            { className: " SCI_k ",
	                style: this.props.style ? this.props.style : {}, id: this.props.id, onClick: this.props.onClick ? this.props.onClick : function () {} },
	            React.createElement("div", { className: "BJ_DW_FY iconfont BJ_TC_Z2 " + (this.props.commonuse ? " icon-xingxing HS " : "icon-xingxing1 B3 "), id: this.props.id, style: { paddingTop: "1rem", paddingRight: "1rem", fontSize: "2rem" }, onClick: this.props.setCommonUse ? this.props.setCommonUse : "" }),
	            React.createElement(
	                "div",
	                { className: " SCI_i_b " + (this.props.bgc ? this.props.bgc : "TB1") },
	                React.createElement("i", { className: " iconfont icon-" + (this.props.icon ? this.props.icon : "zhanghao"),
	                    style: { fontSize: "4.5rem", marginLeft: "-2.2rem", marginTop: "-2.4rem" } })
	            ),
	            React.createElement(
	                "div",
	                { className: "SCI_text", style: { paddingTop: "1rem" } },
	                this.props.text ? this.props.text : "文字"
	            )
	        );
	    }
	});

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/8.
	 */
	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var SettingItem = __webpack_require__(270);
	var Input = __webpack_require__(254);
	var Loading = __webpack_require__(271);
	var OpWin = __webpack_require__(263);
	var MsgWin = __webpack_require__(250);
	var Url = __webpack_require__(249);
	var global = __webpack_require__(262);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            settingList: [],
	            selectedDdc: { ddcid: 0, ddcmac: "" },
	            userid: 0,
	            parentid: 0,
	            s: Url.getParameterByName("s"),

	            user: null,
	            role: 1,
	            currId: 0,
	            ddcmac: 0,
	            syn: null
	        };
	    },
	    myScroll: "",
	    currentTop: 0,

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        console.log("s : " + this.state.s);

	        if (p.state.s == 3 && global.settingSeach) {
	            if (this.refs.input) {
	                this.refs.input.setValue(global.settingSeach);
	            }
	            //  this.findSetting();
	            global.settingSeach = "";
	        } else {
	            this.getUser(function (user) {
	                if (user) {
	                    p.flashData(user);
	                } else {
	                    localStorage.clear();
	                    location.href = "/";
	                }
	            });
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        location.href = "#mine";
	    },
	    flashData: function flashData(user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getSettingByUserid", { id: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ settingList: [] });
	                    p.setState({ settingList: dt.data });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                    }

	                    if (p.state.s == 2) {
	                        // 添加,滚动到底部
	                        p.myScroll.scrollTo(0, p.myScroll.maxScrollY, 0, IScroll.utils.ease.elastic);
	                        p.setState({ s: "" });
	                        return;
	                    }
	                    if (p.state.s == 3) {
	                        // 修改
	                        p.myScroll.scrollTo(0, global.settingScrollTop, 0, IScroll.utils.ease.elastic);
	                        global.settingScrollTop = 0;
	                        p.setState({ s: "" });
	                        return;
	                    }
	                    if (p.currentTop != 0) {
	                        p.myScroll.scrollTo(0, p.currentTop, 0, IScroll.utils.ease.elastic);
	                        p.currentTop = 0;
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        }
	    },

	    goBack: function goBack() {
	        location.href = "/#/mine";
	    },

	    doAdd: function doAdd() {
	        global.settingScrollTop = this.myScroll.y;
	        location.href = "/#/setting/1";
	    },

	    doSearch: function doSearch() {
	        var p = this;
	        var user = this.state.user;
	        var name = this.refs.input.getValue();
	        if (user) {
	            Ajax("POST", "querySettingByName", { userid: user.parentid, name: name ? name : "" }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ settingList: dt.data });
	                    if (p.myScroll) {
	                        p.myScroll.scrollTo(0, 0, 0, IScroll.utils.ease.elastic); // 滚动到顶部
	                        p.myScroll.refresh(); // 会重新计算高度
	                    } else {
	                            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                            document.addEventListener('touchmove', function () {}, false);
	                        }
	                }
	            });
	        } else {
	            console.log("参数不全");
	        }
	    },

	    doOperate: function doOperate(id, ddcmac, syn) {
	        if (id) {
	            this.refs.opWin.setState({
	                data: [{ name: "修改", id: 1, fid: id }, { name: "删除", id: 2, fid: id }, { name: "启用", id: 3, fid: id }, { name: "禁用", id: 4, fid: id }]
	            });
	            this.setState({
	                currId: id,
	                ddcmac: ddcmac,
	                syn: syn
	            });
	            this.refs.opWin.show();
	        }
	    },

	    doDone: function doDone(id, fid) {
	        //console.log("id: "+id+" - fid: "+fid);
	        switch (parseInt(id)) {
	            case 1:
	                global.settingSeach = this.refs.input.getValue();
	                global.settingScrollTop = this.myScroll.y;
	                location.href = "#/setting/" + fid;
	                break;
	            case 2:
	                this.delSettingconfirm(fid);
	                break;
	            case 3:
	                this.doEnable(fid, "enable");
	                break;
	            case 4:
	                this.doEnable(fid, "disable");
	                break;
	        }
	        this.refs.opWin.hide();
	    },
	    // 配置使能 : 启用 和 禁用
	    doEnable: function doEnable(fid, str) {
	        var p = this;
	        if (this.state.userid && this.state.userid == parseInt(this.state.parentid)) {
	            var id = this.state.currId;
	            var ddcmac = this.state.ddcmac;
	            if (id && ddcmac && str) {
	                //p.refs.msg.setState({show: true, type: "loading"});
	                Ajax("POST", "doSettingEnable", { id: id, str: str, ddcmac: ddcmac }, function (dt) {
	                    console.log("dt : " + JSON.stringify(dt));
	                    if (dt && dt.success) {
	                        p.refs.msg.setState({ type: "text", word: "操作成功", timeout: 1000, show: true });
	                        setTimeout(function () {
	                            p.flashData();
	                        }, 1000);
	                    } else {
	                        p.refs.msg.setState({ type: "text", word: dt.msg, timeout: 1000, show: true });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ type: "text", word: "参数不全", timeout: 1000, show: true });
	            }
	        } else {
	            p.refs.msg.setState({ type: "text", word: "本用户无此权限！", timeout: 1000, show: true });
	        }
	    },
	    delSettingconfirm: function delSettingconfirm() {
	        if (this.state.userid == this.state.parentid) {
	            this.refs.msg2.setState({ show: true, word: "是否删除此配置?" });
	        } else {
	            this.refs.msg.setState({ type: "text", word: "本用户无此权限！", timeout: 1000, show: true });
	        }
	    },

	    delSetting: function delSetting() {
	        var p = this;
	        var id = this.state.currId;
	        var ddcmac = this.state.ddcmac;
	        var syn = this.state.syn;
	        console.log("del id:" + id + "ddcmac : " + ddcmac + "syn : " + syn);
	        if (id) {
	            p.refs.loading.setState({ show: true, timeout: 500 });
	            Ajax("POST", "delSettingById", { id: id, ddcmac: ddcmac, syn: syn }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success) {
	                    p.refs.loading.setState({ show: false });
	                    p.refs.msg2.setState({ show: false });
	                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 500 });
	                    //setTimeout(function(){ p.flashData();},500);
	                } else {
	                        p.refs.msg.setState({ show: true, word: "删除失败", timeout: 500 });
	                    }
	            });
	        }
	    },

	    render: function render() {
	        var p = this;

	        var s = 0;
	        var settingData = "";
	        var settingList = this.state.settingList;
	        if (settingList.length > 0) {
	            settingData = settingList.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "key_" + ++s },
	                    React.createElement(SettingItem, { options: p.state.role, color: "TB" + ((s - 1) % 6 + 1), type: '1', name: obj.name, 'data-id': obj.id,
	                        icon: "peizhi", text1: obj.ddcname, text2: obj.syn ? "已同步" : "未同步",
	                        text3: obj.enable == null || obj.enable == 1 ? "已启用" : "已禁用",
	                        gotoDetail: function () {
	                            p.doOperate(obj.id, obj.ddcmac, obj.syn);
	                        } })
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { style: { background: "transparent" }, title: "配置", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: this.state.role == 1 ? "" : "tianjia", rightClick: this.state.role ? function () {} : this.doAdd }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "10rem", width: "100%", position: "absolute", zIndex: "1", color: "white" } },
	                React.createElement(
	                    'div',
	                    { style: { width: "80%", marginLeft: "10%", marginTop: "5rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "left", width: "85%", borderRadius: "1.5rem", height: "3rem", lineHeight: "3rem", backgroundColor: "white", paddingLeft: "5%" } },
	                        React.createElement(Input, { ref: 'input', height: '3rem', style: { height: "3rem", lineHeight: "3rem" }, placeholder: "请输入..." })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", width: "15%", height: "3rem", lineHeight: "3rem", textAlign: "center", color: "white" }, onClick: p.doSearch },
	                        React.createElement('i', { className: "iconfont icon-sousuo YS_GL_HC", style: { fontSize: "2.1rem" } })
	                    )
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'settingk' },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        settingData,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(OpWin, { title: '操作选择', height: '15rem', ref: 'opWin', doDone: p.doDone }),
	            React.createElement(MsgWin, { ref: 'msg2', type: '2', doDone: p.delSetting }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1', doDone: p.delSetting }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by caolinlin on 18/2/28.
	 *
	 *         type: 1:有开关控制的  2:有文字显示的  3:什么也没有 (默认什么也没有)
	 *
	 */

	'';

	var React = __webpack_require__(24);
	var Input = __webpack_require__(254);
	var SwitchBtn = __webpack_require__(259);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            type: ""
	        };
	    },
	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'itemdev' },
	            React.createElement(
	                'div',
	                { className: 'itemicon' },
	                React.createElement(
	                    'div',
	                    { className: "itemCircle " + (p.props.color ? p.props.color : "TB4") },
	                    React.createElement('i', { className: "iconfont icon-" + (p.props.icon ? p.props.icon : "zhanghao"), style: { fontSize: "3rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'itemColl' },
	                    React.createElement('div', { className: " FS13 iconfont" + (p.props.commonuse ? " icon-xingxing HS" : " ") })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemTitlek' },
	                React.createElement(
	                    'div',
	                    { className: 'itemTitle' },
	                    p.props.name
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemInfom' },
	                React.createElement(
	                    'div',
	                    { className: 'itemText1' },
	                    p.props.text1 ? p.props.text1 : ""
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'itemText2', style: { width: "auto" } },
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { color: p.props.text2 == "未同步" ? "red" : "" } },
	                        p.props.text2 ? p.props.text2 : ""
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { marginLeft: "0.5rem", marginRight: "0.5rem", float: "left" } },
	                        "|"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ' },
	                        p.props.text3 ? p.props.text3 : ""
	                    )
	                )
	            ),
	            this.props.options == 1 ? "" : React.createElement(
	                'div',
	                { className: 'itemMore', 'data-id': this.props["data-id"] ? this.props["data-id"] : "", onClick: p.props.gotoDetail ? p.props.gotoDetail : "" },
	                React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	            ),
	            this.props.children
	        );
	    }
	});
	/*
	<div className="itemLine"></div>
	*/

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/4.
	 *
	 * Loading
	 *        style : 自定义宽度以及位置,系统方法
	 *      timeout : 时间长度( 1000 为 1s)
	 *         show : 默认false,不显示
	 *
	 *     eg:  <Loading ref="loading"/>
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            timeout: 0
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        if (this.state.timeout > 0) {
	            var p = this;
	            setTimeout(function () {
	                p.setState({ show: false, timeout: 0 });
	            }, this.state.timeout);
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: this.state.show ? " L_k " : "BJ_DW_YC ", style: p.props.style ? p.props.style : {} },
	            React.createElement(
	                "div",
	                { className: " L_box " },
	                React.createElement("img", { src: "images/main/loading.gif" })
	            )
	        );
	    }
	});

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/9.
	 */
	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var DevItem = __webpack_require__(258);
	var IconButton = __webpack_require__(248);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);
	var global = __webpack_require__(262);
	var MsgWin = __webpack_require__(250);
	var Weeks = __webpack_require__(273);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: this.props.params.id ? this.props.params.id : 1, //1为新增,大于1为修改id
	            s: Url.getParameterByName("s"),
	            settingList: [],
	            settingid: 0,
	            ddcmac: 0,
	            syn: null,
	            parentid: 0,
	            user: {},
	            Sddc: {},
	            trigStr: "",
	            exeStr: "",

	            selectActDev: [],
	            selectTrigDev: [], //trigger设备
	            selectDev: { 'in': [], out: [] }
	        };
	    },
	    myScroll: "",
	    lock: 1,

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;

	        var p = this;
	        var id = this.state.id;
	        var s = this.state.s;
	        this.flashData();

	        var calendartime1 = new lCalendar();
	        calendartime1.init({
	            'trigger': '#time1',
	            'type': 'time'
	        });
	        var calendartime2 = new lCalendar();
	        calendartime2.init({
	            'trigger': '#time2',
	            'type': 'time'
	        });

	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        this.setState({ user: user });
	        if (id == 1) {
	            if (s == 1) {
	                p.dosetState();
	            } else {
	                p.setState({ Sddc: {} });
	            }
	        } else if (id != 2) {
	            p.getSettingById(p.state.id, user.parentid);
	        }
	    },
	    bk: function bk() {
	        location.href = "#setting";
	    },

	    dosetState: function dosetState() {
	        var p = this;
	        p.setState({ Sddc: global.Sddc });
	        if (p.refs.name) {
	            p.refs.name.value = global.Sname;
	        }

	        var sDev = this.state.selectDev;
	        sDev['in'] = global.StrigList;
	        sDev.out = global.SexecList;
	        this.setState({ selectDev: sDev });

	        var triList = [];
	        var trigDev = global.StrigName ? global.StrigName : [];
	        for (var m = 0; m < trigDev.length; m++) {
	            triList.push(trigDev[m].devname);
	        }
	        var trigStr = triList.join(",");
	        p.setState({ trigStr: trigStr });

	        var exeList = [];
	        var exeDev = global.SexecList;
	        for (var n = 0; n < exeDev.length; n++) {
	            exeList.push(exeDev[n].devname);
	        }
	        var exeStr = exeList.join(",");
	        p.setState({ exeStr: exeStr });

	        if (global.Stime1) {
	            if (this.refs.time1) {
	                this.refs.time1.value = global.Stime1;
	            }
	        }
	        if (global.Stime2) {
	            if (this.refs.time2) {
	                this.refs.time2.value = global.Stime2;
	            }
	        }

	        if (p.refs.weekscheck) {
	            p.refs.weekscheck.setState({ weeks: global.Sweek });
	        }
	    },

	    getSettingById: function getSettingById(id, parentid) {
	        var p = this;
	        if (id && parentid) {
	            Ajax("POST", "getSettingById", { id: id, userid: parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (dt.data && dt.data[0]) {
	                        var obj = dt.data[0];
	                        var attr = null;
	                        var ddc = {};
	                        if (!global.Sddc.hasOwnProperty("ddcname")) {
	                            ddc = { ddcname: obj.ddcname, id: obj.ddcid };
	                            global.Sddc = ddc;
	                        }
	                        ddc = global.Sddc;
	                        p.setState({ Sddc: ddc });

	                        if (!global.Sname) {
	                            p.refs.name.value = obj.name;
	                            global.Sname = obj.name;
	                        } else {
	                            p.refs.name.value = global.Sname;
	                        }

	                        try {
	                            attr = JSON.parse(dt.data[0].attributes);
	                        } catch (e) {
	                            console.log(e);
	                        }

	                        if (!global.Slogic) {
	                            global.Slogic = attr.logic;
	                        }

	                        var inStemp = { 'in': [], out: [] };
	                        if (attr && attr.hasOwnProperty("in")) {
	                            var trigDev = [];
	                            if (global.StrigList.length == 0) {
	                                global.StrigList = attr['in'];
	                                inStemp['in'] = attr['in'];
	                                trigDev = attr['in'];
	                            } else {
	                                trigDev = global.StrigList;
	                                inStemp['in'] = global.StrigList;
	                            }

	                            var triList = [];
	                            for (var m = 0; m < trigDev.length; m++) {
	                                triList.push(trigDev[m].devname);
	                            }
	                            var trigStr = triList.join(",");
	                            p.setState({ trigStr: trigStr });
	                        }

	                        if (attr && attr.hasOwnProperty("out")) {
	                            var exeDev = [];
	                            if (global.SexecList.length == 0) {
	                                global.SexecList = attr.out;
	                                inStemp.out = attr.out;
	                                exeDev = attr.out;
	                            } else {
	                                exeDev = global.SexecList;
	                                inStemp.out = global.SexecList;
	                            }
	                            var exeList = [];
	                            for (var n = 0; n < exeDev.length; n++) {
	                                exeList.push(exeDev[n].devname);
	                            }
	                            var exeStr = exeList.join(",");
	                            p.setState({ exeStr: exeStr });

	                            if (!global.Sdelay) {
	                                if (attr.delay) {
	                                    var delay = attr.delay;
	                                    var hh = parseInt(delay / 3600);
	                                    var dd = parseInt(parseInt(delay % 3600) / 60);
	                                    var ss = parseInt(delay % 3600) % 60;
	                                    if (hh < 10) {
	                                        hh = "0" + hh;
	                                    }
	                                    if (dd < 10) {
	                                        dd = "0" + dd;
	                                    }
	                                    if (ss < 10) {
	                                        ss = "0" + ss;
	                                    }
	                                    global.Sdelay = hh + ":" + dd + ":" + ss;
	                                    global.SdelayStr = delay;
	                                }
	                            }

	                            if (global.Stime1) {
	                                if (p.refs.time1) {
	                                    p.refs.time1.value = global.Stime1;
	                                }
	                            } else {
	                                if (attr.active_time && attr.active_time.timer) {
	                                    var timer1 = attr.active_time.timer.split(",");
	                                    if (p.refs.time1) {
	                                        p.refs.time1.value = timer1[0];
	                                        global.Stime1 = timer1[0];
	                                    }
	                                }
	                            }

	                            if (global.Stime2) {
	                                if (p.refs.time2) {
	                                    p.refs.time2.value = global.Stime2;
	                                }
	                            } else {
	                                if (attr.active_time && attr.active_time.timer) {
	                                    var timer2 = attr.active_time.timer.split(",");
	                                    if (p.refs.time2) {
	                                        p.refs.time2.value = timer2[1];
	                                        global.Stime2 = timer2[1];
	                                    }
	                                }
	                            }

	                            var weekF = global.Sweek;
	                            var flag = false;
	                            for (var j = 0; j < weekF.length; j++) {
	                                if (weekF[j] == 1) {
	                                    flag = true;
	                                }
	                            }
	                            if (!flag) {
	                                if (attr.active_time.weekday) {
	                                    var weekday = attr.active_time.weekday;
	                                    var week = weekday.split(",");
	                                    var weeks = [0, 0, 0, 0, 0, 0, 0, 0];
	                                    for (var k in week) {
	                                        weeks[parseInt(week[k])] = 1;
	                                    }
	                                    p.refs.weekscheck.setState({ weeks: weeks });
	                                    global.Sweek = weeks;
	                                }
	                            } else {
	                                p.refs.weekscheck.setState({ weeks: global.Sweek });
	                            }
	                        }
	                        p.setState({ selectDev: inStemp });
	                    }
	                }
	            });
	        } else {
	            console.log("参数不足");
	        }
	    },

	    flashData: function flashData() {
	        var p = this;
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        this.setState({ userid: user.userid });
	        if (user["parentid"]) {
	            this.setState({
	                parentid: user.parentid
	            });
	        }
	        if (user) {
	            Ajax("POST", "getSettingByUserid", { id: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ settingList: [] });
	                    p.setState({ settingList: dt.data });
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        }
	    },

	    goBack: function goBack() {
	        var p = this;
	        p.clearGlobal();
	        location.href = "#setting?s=3";
	    },

	    clearGlobal: function clearGlobal() {
	        global.Sddc = {};
	        global.Sname = "";
	        global.Slogic = "";
	        global.StrigList = [];
	        global.StrigName = [];
	        global.SexecList = [];
	        global.SexecName = [];
	        global.Stime1 = "";
	        global.Stime2 = "";
	        global.Sweek = [];
	        global.Sdelay = "";
	        global.SdelayStr = "";
	    },

	    doChoose: function doChoose() {
	        if (this.refs.time1 && this.refs.time1.value) {
	            global.Stime1 = this.refs.time1.value;
	        }
	        if (this.refs.time2 && this.refs.time2.value) {
	            global.Stime2 = this.refs.time2.value;
	        }
	        location.href = "#ddcChoose/" + this.state.id;
	    },

	    doTriList: function doTriList() {
	        if (global.Sddc.hasOwnProperty("id")) {
	            if (this.refs.time1 && this.refs.time1.value) {
	                global.Stime1 = this.refs.time1.value;
	            }
	            if (this.refs.time2 && this.refs.time2.value) {
	                global.Stime2 = this.refs.time2.value;
	            }
	            location.href = "#trigView/" + this.state.id + "/" + global.Sddc.id;
	        } else {
	            this.refs.msg.setState({ show: true, word: "请选择DDC", timeout: 1500 });
	        }
	    },

	    doExeList: function doExeList() {
	        if (global.Sddc.hasOwnProperty("id")) {
	            if (this.refs.time1 && this.refs.time1.value) {
	                global.Stime1 = this.refs.time1.value;
	            }
	            if (this.refs.time2 && this.refs.time2.value) {
	                global.Stime2 = this.refs.time2.value;
	            }
	            location.href = "#exeView/" + this.state.id + "/" + global.Sddc.id;
	        } else {
	            this.refs.msg.setState({ show: true, word: "请选择DDC", timeout: 1500 });
	        }
	    },

	    doTime: function doTime() {
	        location.href = "#timeView";
	    },
	    onChange: function onChange() {
	        global.Sname = this.refs.name.value;
	    },

	    save: function save() {
	        var p = this;
	        var startTime = p.refs.time1.value;
	        var endTime = p.refs.time2.value;
	        var delay = global.SdelayStr;

	        var settingName = this.refs.name.value;
	        if (settingName) {

	            var selectedDdc = this.state.Sddc;
	            if (selectedDdc.ddcid != 0) {
	                var weeks = this.refs.weekscheck.state.weeks;
	                var logic = global.Slogic;
	                if (logic) {
	                    var weekday = "";
	                    if (weeks[0] == 1) {
	                        weekday = "1,2,3,4,5,6,7";
	                    } else {
	                        for (var i = 1; i <= weeks.length; i++) {
	                            if (weeks[i] == 1) {
	                                weekday = weekday + (i + ",");
	                            }
	                        }
	                        weekday = weekday.substring(0, weekday.length - 1);
	                    }

	                    var selectDev = this.state.selectDev;
	                    if (selectDev.hasOwnProperty("in") && selectDev['in'].length > 0) {
	                        var attrinde = selectDev['in'];
	                        if (logic == "and") {
	                            var attrin = [];
	                            for (var ii = 0; ii < attrinde.length; ii++) {
	                                var attributesin = attrinde[ii].attributes;
	                                if (attributesin.hasOwnProperty("NAM") && attributesin.NAM) {
	                                    //别名控制
	                                    //console.log("attributesin : " + JSON.stringify(attributesin));
	                                    for (var jj in attributesin) {
	                                        var jjs = jj.split("_");
	                                        switch (jjs[0]) {
	                                            case "SW1":
	                                                attrin.push({ KEY: 1, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW2":
	                                                attrin.push({ KEY: 2, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW3":
	                                                attrin.push({ KEY: 3, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW4":
	                                                attrin.push({ KEY: 4, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW5":
	                                                attrin.push({ KEY: 5, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW6":
	                                                attrin.push({ KEY: 6, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SW7":
	                                                attrin.push({ KEY: 7, SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "SWI":
	                                                attrin.push({ SWI: jjs[1], operator: "=", NAM: attributesin.NAM });break; // 灯和计量插座
	                                            case "DOR":
	                                                attrin.push({ DOR: jjs[1], operator: "=", NAM: attributesin.NAM });break; // 门磁  锁
	                                            case "PIR":
	                                                attrin.push({ PIR: jjs[1], operator: "=", NAM: attributesin.NAM });break; // 微波人感和红外人感 (20,21)
	                                            case "WAT":
	                                                attrin.push({ WAT: jjs[1], operator: "=", NAM: attributesin.NAM });break; // 溢水传感器
	                                            case "WIN":
	                                                attrin.push({ WIN: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "CH1":
	                                                attrin.push({ CH1: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "CH2":
	                                                attrin.push({ CH2: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "CH3":
	                                                attrin.push({ CH3: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "TUN":
	                                                attrin.push({ TUN: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "RL1":
	                                                attrin.push({ RL1: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "RL2":
	                                                attrin.push({ RL2: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "KEY":
	                                                attrin.push({ KEY: jjs[1], operator: "=", NAM: attributesin.NAM });break;
	                                            case "LIG":
	                                                attrin.push({ LIG: attributesin["LIG"], operator: attributesin.operator, NAM: attributesin.NAM });break;
	                                            case "STP":
	                                                attrin.push({ STP: attributesin["STP"], operator: attributesin.operator, NAM: attributesin.NAM });break;
	                                        }
	                                    }
	                                } else {
	                                    //console.log("attributesin : " + JSON.stringify(attributesin));
	                                    for (var jj in attributesin) {
	                                        var jjs = jj.split("_");
	                                        switch (jjs[0]) {
	                                            case "SW1":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 1, SWI: jjs[1], operator: "=" });break;
	                                            case "SW2":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 2, SWI: jjs[1], operator: "=" });break;
	                                            case "SW3":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 3, SWI: jjs[1], operator: "=" });break;
	                                            case "SW4":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 4, SWI: jjs[1], operator: "=" });break;
	                                            case "SW5":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 5, SWI: jjs[1], operator: "=" });break;
	                                            case "SW6":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 6, SWI: jjs[1], operator: "=" });break;
	                                            case "SW7":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: 7, SWI: jjs[1], operator: "=" });break;

	                                            case "SWI":
	                                                attrin.push({ MAC: attrinde[ii].MAC, SWI: jjs[1], operator: "=" });break; // 灯和计量插座
	                                            case "DOR":
	                                                attrin.push({ MAC: attrinde[ii].MAC, DOR: jjs[1], operator: "=" });break; // 门磁  锁
	                                            case "PIR":
	                                                attrin.push({ MAC: attrinde[ii].MAC, PIR: jjs[1], operator: "=" });break; // 微波人感和红外人感 (20,21)
	                                            case "WAT":
	                                                attrin.push({ MAC: attrinde[ii].MAC, WAT: jjs[1], operator: "=" });break;
	                                            case "WIN":
	                                                attrin.push({ MAC: attrinde[ii].MAC, WIN: jjs[1], operator: "=" });break;
	                                            case "CH1":
	                                                attrin.push({ MAC: attrinde[ii].MAC, CH1: jjs[1], operator: "=" });break;
	                                            case "CH2":
	                                                attrin.push({ MAC: attrinde[ii].MAC, CH2: jjs[1], operator: "=" });break;
	                                            case "CH3":
	                                                attrin.push({ MAC: attrinde[ii].MAC, CH3: jjs[1], operator: "=" });break;
	                                            case "TUN":
	                                                attrin.push({ MAC: attrinde[ii].MAC, TUN: jjs[1], operator: "=" });break;
	                                            case "KEY":
	                                                attrin.push({ MAC: attrinde[ii].MAC, KEY: jjs[1], operator: "=" });break;
	                                            case "RL1":
	                                                attrin.push({ MAC: attrinde[ii].MAC, RL1: jjs[1], operator: "=" });break;
	                                            case "RL2":
	                                                attrin.push({ MAC: attrinde[ii].MAC, RL2: jjs[1], operator: "=" });break;
	                                            case "LIG":
	                                                attrin.push({ MAC: attrinde[ii].MAC, LIG: attributesin["LIG"], operator: attributesin.operator });break;
	                                            case "STP":
	                                                attrin.push({ MAC: attrinde[ii].MAC, STP: attributesin["STP"], operator: attributesin.operator });break;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                        if (logic == "or") {
	                            //多条逻辑发送
	                            var attrin = [];
	                            for (var ix = 0; ix < attrinde.length; ix++) {
	                                var attributesinx = attrinde[ix].attributes;
	                                if (attributesinx.hasOwnProperty("NAM") && attributesinx.NAM) {
	                                    for (var jx in attributesinx) {
	                                        var jjsx = jx.split("_");
	                                        switch (jjsx[0]) {
	                                            case "SW1":
	                                                attrin.push({ KEY: 1, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW2":
	                                                attrin.push({ KEY: 2, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW3":
	                                                attrin.push({ KEY: 3, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW4":
	                                                attrin.push({ KEY: 4, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW5":
	                                                attrin.push({ KEY: 5, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW6":
	                                                attrin.push({ KEY: 6, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "SW7":
	                                                attrin.push({ KEY: 7, SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;

	                                            case "SWI":
	                                                attrin.push({ SWI: jjsx[1], operator: "=", NAM: attributesinx.NAM });break; // 灯和计量插座
	                                            case "DOR":
	                                                attrin.push({ DOR: jjsx[1], operator: "=", NAM: attributesinx.NAM });break; // 门磁 锁
	                                            case "PIR":
	                                                attrin.push({ PIR: jjsx[1], operator: "=", NAM: attributesinx.NAM });break; // 微波人感和红外人感 (20,21)
	                                            case "WIN":
	                                                attrin.push({ WIN: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "WAT":
	                                                attrin.push({ WAT: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;

	                                            case "RL1":
	                                                attrin.push({ RL1: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "RL2":
	                                                attrin.push({ RL2: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "CH1":
	                                                attrin.push({ CH1: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "CH2":
	                                                attrin.push({ CH2: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "CH3":
	                                                attrin.push({ CH3: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "TUN":
	                                                attrin.push({ TUN: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "KEY":
	                                                attrin.push({ KEY: jjsx[1], operator: "=", NAM: attributesinx.NAM });break;
	                                            case "LIG":
	                                                attrin.push({ LIG: attributesinx["LIG"], operator: attributesinx.operator, NAM: attributesinx.NAM });break;
	                                            case "STP":
	                                                attrin.push({ STP: attributesinx["STP"], operator: attributesinx.operator, NAM: attributesinx.NAM });break;
	                                        }
	                                    }
	                                } else {
	                                    for (var jx in attributesinx) {
	                                        var jjsx = jx.split("_");
	                                        switch (jjsx[0]) {
	                                            case "SW1":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 1, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW2":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 2, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW3":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 3, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW4":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 4, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW5":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 5, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW6":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 6, SWI: jjsx[1], operator: "=" });break;
	                                            case "SW7":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: 7, SWI: jjsx[1], operator: "=" });break;
	                                            case "KEY":
	                                                attrin.push({ MAC: attrinde[ix].MAC, KEY: jjsx[1], operator: "=" });break; // 红外遥控器
	                                            case "SWI":
	                                                attrin.push({ MAC: attrinde[ix].MAC, SWI: jjsx[1], operator: "=" });break; // 灯和计量插座
	                                            case "RL1":
	                                                attrin.push({ MAC: attrinde[ix].MAC, RL1: jjsx[1], operator: "=" });break;
	                                            case "RL2":
	                                                attrin.push({ MAC: attrinde[ix].MAC, RL2: jjsx[1], operator: "=" });break;
	                                            case "DOR":
	                                                attrin.push({ MAC: attrinde[ix].MAC, DOR: jjsx[1], operator: "=" });break; // 门磁 锁
	                                            case "PIR":
	                                                attrin.push({ MAC: attrinde[ix].MAC, PIR: jjsx[1], operator: "=" });break; // 微波人感和红外人感 (20,21)
	                                            case "WAT":
	                                                attrin.push({ MAC: attrinde[ix].MAC, WAT: jjsx[1], operator: "=" });break;
	                                            case "WIN":
	                                                attrin.push({ MAC: attrinde[ix].MAC, WIN: jjsx[1], operator: "=" });break;
	                                            case "CH1":
	                                                attrin.push({ MAC: attrinde[ix].MAC, CH1: jjsx[1], operator: "=" });break;
	                                            case "CH2":
	                                                attrin.push({ MAC: attrinde[ix].MAC, CH2: jjsx[1], operator: "=" });break;
	                                            case "CH3":
	                                                attrin.push({ MAC: attrinde[ix].MAC, CH3: jjsx[1], operator: "=" });break;
	                                            case "TUN":
	                                                attrin.push({ MAC: attrinde[ix].MAC, TUN: jjsx[1], operator: "=" });break;
	                                            case "LIG":
	                                                attrin.push({ MAC: attrinde[ix].MAC, LIG: attributesinx["LIG"], operator: attributesinx.operator });break;
	                                            case "STP":
	                                                attrin.push({ MAC: attrinde[ix].MAC, STP: attributesinx["STP"], operator: attributesinx.operator });break;
	                                        }
	                                    }
	                                }
	                            }
	                        }

	                        if (selectDev.hasOwnProperty('out') && selectDev.out.length > 0) {
	                            var attributes = { index: 1, cmd: "add", logic: logic, 'in': selectDev['in'], out: selectDev.out, active_time: {} };
	                            var attroutde = selectDev.out;
	                            var attrout = [];
	                            for (var j = 0; j < attroutde.length; j++) {
	                                if (attroutde[j] && typeof attroutde[j] != "undefined" && attroutde[j] != "") {
	                                    var attrobj = attroutde[j];
	                                    if (attrobj.hasOwnProperty("true") && attrobj.hasOwnProperty("false")) {
	                                        var obj = { 'true': {}, 'false': {} };
	                                        for (var k in attrobj) {
	                                            if (k) {
	                                                if (k != "devname" && k != "link" && k != "id") {
	                                                    if (k == "MAC" && attrobj[k].length != 16) {
	                                                        obj["MAC"] = "0000000000000000";
	                                                    } else {
	                                                        obj[k] = attrobj[k];
	                                                    }
	                                                }
	                                            }
	                                        }

	                                        if (obj && typeof obj != "undefined" && obj != "") {
	                                            console.log("attroutOne:" + JSON.stringify(obj));
	                                            if (obj.hasOwnProperty("NAM") && obj.NAM && obj.hasOwnProperty("MAC")) {
	                                                delete obj.MAC;
	                                            }
	                                            attrout.push(obj);
	                                        }
	                                    } else {
	                                        this.refs.msg.setState({ type: "text", word: "请选择执行设备", timeout: 1000, show: true });
	                                    }
	                                }
	                            }

	                            var attr = { index: 1, cmd: "add", logic: logic };
	                            if (delay && delay != 0) {
	                                attributes.delay = delay;
	                                for (var out = 0; out < attrout.length; out++) {
	                                    attrout[out]["false"] = {};
	                                    if (attrout[out] && attrout[out].hasOwnProperty("true") && attrout[out]["true"].hasOwnProperty("delay")) {
	                                        attrout[out]["true"] = attrout[out]["true"];
	                                        attrout[out]["true"]["delay"] = delay;
	                                    } else {
	                                        attrout[out]["true"] = attrout[out]["true"];
	                                        attrout[out]["true"].delay = delay;
	                                    }
	                                }
	                            } else {
	                                for (var out in attrout) {
	                                    attrout[out]['false'] = {};
	                                    if (attrout[out] && attrout[out].hasOwnProperty("true") && attrout[out]["true"].hasOwnProperty("delay")) {
	                                        delete attrout[out]["true"]["delay"];
	                                    }
	                                }
	                                for (var outa in attributes.out) {
	                                    attributes.out[outa]['false'] = {};
	                                }
	                            }
	                            //处理组的macid为"0000000000000000"
	                            for (var o in attrin) {
	                                var mac = attrin[o].MAC;
	                                if (mac && mac.indexOf("_") == 0) {
	                                    attrin[o].MAC = "0000000000000000";
	                                }
	                            }
	                            attr["in"] = attrin;
	                            for (var o in attrout) {
	                                var mac = attrout[o].MAC;
	                                if (mac && mac.indexOf("_") == 0) {
	                                    attrout[o].MAC = "0000000000000000";
	                                }
	                            }
	                            attr["out"] = attrout;
	                            if (weekday.length > 0) {
	                                attributes.active_time = {
	                                    weekday: weekday
	                                };
	                                attr.active_time = {
	                                    weekday: weekday
	                                };
	                            }
	                            if (startTime && endTime) {
	                                attributes.active_time = {
	                                    timer: startTime + "," + endTime
	                                };
	                                attr.active_time = {
	                                    timer: startTime + "," + endTime
	                                };
	                            }
	                            if (weekday.length > 0 && startTime && endTime) {
	                                attributes.active_time = {
	                                    timer: startTime + "," + endTime,
	                                    weekday: weekday
	                                };
	                                attr.active_time = {
	                                    timer: startTime + "," + endTime,
	                                    weekday: weekday
	                                };
	                            }

	                            if (attributes.active_time.hasOwnProperty("weekday") && attributes.active_time.weekday) {
	                                if (!attributes.active_time.hasOwnProperty("timer")) {
	                                    this.refs.msg.setState({ type: "text", word: "请选择时间范围", timeout: 1500, show: true });
	                                    return;
	                                } else if (!attributes.active_time.timer) {
	                                    this.refs.msg.setState({ type: "text", word: "请选择时间范围", timeout: 1500, show: true });
	                                    return;
	                                }
	                            }

	                            if (attributes.active_time.hasOwnProperty("timer") && attributes.active_time.timer) {
	                                if (!attributes.active_time.hasOwnProperty("weekday")) {
	                                    this.refs.msg.setState({ type: "text", word: "请选择重复设定", timeout: 1000, show: true });
	                                    return;
	                                } else if (!attributes.active_time.weekday) {
	                                    this.refs.msg.setState({ type: "text", word: "请选择重复设定", timeout: 1000, show: true });
	                                    return;
	                                }
	                            }
	                            var user = JSON.parse(localStorage.getItem("ibms-login"));
	                            var userid = user.parentid;
	                            var ddcid = selectedDdc.id;

	                            console.log("attr : " + JSON.stringify(attr));
	                            console.log("attributes : " + JSON.stringify(attributes));

	                            for (var m = 0; m < this.state.settingList.length; m++) {
	                                var tempObj = this.state.settingList[m];
	                                if (p.state.id != tempObj.id) {
	                                    if (settingName == tempObj.name) {
	                                        p.refs.msg.setState({
	                                            show: true,
	                                            type: "text",
	                                            word: "名字已存在,请重新命名",
	                                            timeout: 1000
	                                        });
	                                        return;
	                                    }
	                                }
	                            }

	                            if (this.lock != 1) {
	                                p.refs.msg.setState({ show: true, type: "text", word: "正在保存,请稍后", timeout: 1000 });
	                                return;
	                            }
	                            this.lock = 2;
	                            if (this.state.id == 1) {
	                                Ajax("POST", "saveOrUpdateSetting", { settingname: settingName, icon: "open", attributes: JSON.stringify(attributes), userid: userid, ddcid: ddcid, ddcmac: selectedDdc.ddcmac, message: settingName, attr: JSON.stringify(attr) }, function (dt) {
	                                    //console.log(" dt : " + JSON.stringify(dt));
	                                    p.lock = 1;
	                                    if (dt && dt.success) {
	                                        p.refs.loading.setState({ show: true, timeout: 1000 });
	                                        p.clearGlobal();
	                                        setTimeout(function () {
	                                            location.href = "/#/setting?s=2";
	                                        }, 1000);
	                                    } else {
	                                        p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                                    }
	                                });
	                            } else {
	                                Ajax("POST", "saveOrUpdateSetting", { id: this.state.id, settingname: settingName, icon: "open", attributes: JSON.stringify(attributes), userid: userid, ddcid: ddcid, ddcmac: selectedDdc.ddcmac, message: settingName, attr: JSON.stringify(attr) }, function (dt) {
	                                    //console.log(" dt : " + JSON.stringify(dt));
	                                    p.lock = 1;
	                                    if (dt && dt.success) {
	                                        p.refs.loading.setState({ show: true, timeout: 1000 });
	                                        p.clearGlobal();
	                                        setTimeout(function () {
	                                            location.href = "/#/setting?s=3";
	                                        }, 1000);
	                                    } else {
	                                        p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                                    }
	                                });
	                            }
	                        } else {
	                            this.refs.msg.setState({ word: "请选择执行设备", timeout: 1000, show: true });
	                        }
	                    } else {
	                        this.refs.msg.setState({ word: "请选择触发设备", timeout: 1000, show: true });
	                    }
	                } else {
	                    this.refs.msg.setState({ word: "请选择触发逻辑", timeout: 1000, show: true });
	                }
	            } else {
	                this.refs.msg.setState({ word: "请选择DDC", timeout: 1000, show: true });
	            }
	        } else {
	            this.refs.msg.setState({ word: "请输入配置名称", timeout: 1000, show: true });
	        }
	    },
	    onFocus: function onFocus() {
	        var input1 = document.getElementById("time1");
	        if (input1) {
	            input1.blur();
	        }
	        var input2 = document.getElementById("time2");
	        if (input2) {
	            input2.blur();
	        }
	    },

	    chooseWeek: function chooseWeek(attr) {
	        global.Sweek = attr;
	    },

	    render: function render() {
	        var p = this;

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: this.state.id != 1 ? "修改配置" : "新增配置", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'baocun', rightClick: this.save }),
	            React.createElement('div', { style: { marginTop: "4.5rem" } }),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "DDC选择"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'more', onClick: p.doChoose },
	                    React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'text', onClick: p.doChoose, style: { color: p.state.Sddc.ddcname ? "#6f6e73" : "#a7a4ad" } },
	                    p.state.Sddc.hasOwnProperty("ddcname") ? p.state.Sddc.ddcname : "请选择ddc"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "配置名称"
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "50%", float: "right", marginRight: "3.5rem", height: "4.5rem" } },
	                    React.createElement('input', { className: 'settingC', placeholder: '请输入名称', onChange: p.onChange, ref: 'name' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem2' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "触发设备"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'more', onClick: p.doTriList },
	                    React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'text', onClick: p.doTriList },
	                    global.Slogic == "and" ? "逻辑: 与 " : global.Slogic == "or" ? "逻辑: 或 " : ""
	                ),
	                React.createElement('div', { className: 'line ', style: { width: "95%", marginLeft: "2.5%", clear: "both", height: "1px", backgroundColor: "#ece7f9" } }),
	                React.createElement(
	                    'div',
	                    { className: 'title2', style: { color: "#6f6e73" } },
	                    p.state.trigStr ? p.state.trigStr : ""
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem2' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "执行设备"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'more', onClick: p.doExeList },
	                    React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'text', onClick: p.doExeList },
	                    global.SdelayStr ? "延时: " + global.SdelayStr + "s" : ""
	                ),
	                React.createElement('div', { className: 'line ', style: { width: "95%", marginLeft: "2.5%", clear: "both", height: "1px", backgroundColor: "#ece7f9" } }),
	                React.createElement(
	                    'div',
	                    { className: 'title2', style: { color: "#6f6e73" } },
	                    p.state.exeStr ? p.state.exeStr : ""
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem2', style: { height: "12rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "执行时间"
	                ),
	                React.createElement('div', { className: 'line ', style: { width: "95%", marginLeft: "2.5%", clear: "both", height: "1px", backgroundColor: "#ece7f9" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4.5rem", lineHeight: "4.5rem", width: "100%" } },
	                    React.createElement('input', { className: 'BJ_BL_W20 BJ_DQ_ZX BJ_DW_FZ FS14 ', style: { height: "4.5rem", lineHeight: "4.5rem", marginLeft: "1.2rem", color: "#6f6e73" }, id: 'time1', onFocus: p.onFocus, placeholder: '开始时间', ref: 'time1' }),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_BL_W20 BJ_DQ_ZX BJ_DW_FZ FS13' },
	                        "---"
	                    ),
	                    React.createElement('input', { className: 'BJ_BL_W20 BJ_DQ_ZX BJ_DW_FZ FS14 ', style: { height: "4.5rem", lineHeight: "4.5rem", color: "#6f6e73" }, id: 'time2', onFocus: p.onFocus, placeholder: '结束时间', ref: 'time2' })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "3.5rem", lineHeight: "3.5rem", width: "100%", marginLeft: "0.7rem" } },
	                    React.createElement(Weeks, { ref: 'weekscheck', chooseWeek: p.chooseWeek })
	                )
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/3/1.
	 *
	 *
	 *     sample:
	 *             <Weeks  refs ="weeks />
	 *
	 *
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            weeks: [0, 0, 0, 0, 0, 0, 0, 0] //0表示全部 1-7表示星期
	        };
	    },
	    componentDidMount: function componentDidMount() {},

	    weekSelect: function weekSelect(e) {
	        e.preventDefault();
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        var sel = parseInt(id);
	        var attr = this.state.weeks;
	        if (attr[sel] == 0) {
	            attr[sel] = 1;
	            if (sel == 0) {
	                attr = [1, 0, 0, 0, 0, 0, 0, 0];
	            } else {
	                attr[0] = 0;
	            }
	        } else {
	            attr[sel] = 0;
	        }
	        this.setState({ weeks: attr });
	        if (p.props.chooseWeek) {
	            p.props.chooseWeek(attr);
	        }
	    },
	    getweekSelect: function getweekSelect() {
	        return this.state.weeks;
	    },
	    setweekValue: function setweekValue(weeks) {
	        this.setState({
	            weeks: weeks
	        });
	    },

	    render: function render() {
	        var p = this;
	        var wk = ["全", "一", "二", "三", "四", "五", "六", "日"];
	        var dataWeeks = [];
	        for (var i = 0; i < 8; i++) {
	            var obj = React.createElement(
	                "div",
	                { key: "wk_" + i, className: (i == 0 ? "BJ_DW_FZ " : "BJ_DW_FZ BJ_BJ_ML5 ") + (p.state.weeks[i] == 1 ? " choosedTime " : " repeatTime "), onClick: p.weekSelect, "data-id": i },
	                wk[i]
	            );
	            dataWeeks.push(obj);
	        }
	        return React.createElement(
	            "div",
	            { style: this.props.style ? this.props.style : { float: "left", marginRight: "1rem" } },
	            dataWeeks
	        );
	    }
	});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/28.
	 */

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var Ajax = __webpack_require__(244);
	var MsgWin = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            choose: "1",
	            newsList: []
	        };
	    },

	    myScroll: "",
	    scrollTop: "",
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getData(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#main";
	    },
	    getData: function getData(user) {
	        var p = this;
	        Ajax("POST", "getLogbyNum", { userid: user.userid, num: 30 }, function (dt) {
	            if (dt.success) {
	                p.setState({ newsList: dt.data });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                } else {
	                    p.myScroll.refresh();
	                }
	            } else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	            }
	        });
	    },

	    doChoose: function doChoose(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id == 1) {
	            location.href = "#alertlist";
	        } else {
	            location.href = "#news";
	        }
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        ///  var p = this;
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            //   console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	            }
	        });
	    },

	    render: function render() {
	        var p = this;
	        var newsData = "";
	        var d = 0;
	        if (this.state.newsList.length > 0) {
	            newsData = this.state.newsList.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "d" + ++d, className: 'itemdev', style: { height: "7rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'itemicon', style: { height: "7rem", lineHeight: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: "itemCircle TB" + ((d - 1) % 6 + 1), style: { marginTop: "1rem" } },
	                            React.createElement('i', { className: "iconfont icon-rizhi", style: { fontSize: "3rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemTitlek' },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle' },
	                            obj.info ? obj.info : "无定义内容"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemInfom', style: { width: "73%", height: "2rem", lineHeight: "2rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemDDC', style: { fontSize: "1rem" } },
	                            React.createElement(
	                                'div',
	                                { style: { float: "left" } },
	                                "IP:" + obj.ip
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'itemDDC', style: { fontSize: "1rem", float: "right", height: "3rem" } },
	                            obj.createtime ? obj.createtime : ""
	                        )
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: "通知", style: { background: "transparent" } }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white" } },
	                React.createElement(
	                    'div',
	                    { className: "segment", 'data-id': '1', onClick: p.doChoose },
	                    "报警"
	                ),
	                React.createElement(
	                    'div',
	                    { className: "segChoose", 'data-id': '2', onClick: p.doChoose },
	                    "日志"
	                ),
	                React.createElement('div', { style: { position: "relative", top: "7rem", backgroundImage: "url(images/main/main_bg1.png)", backgroundSize: "100%", height: "4rem" } })
	            ),
	            React.createElement('div', { style: { clear: "both" } }),
	            React.createElement(
	                'div',
	                { style: { height: "100%", paddingBottom: "15.5rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        newsData,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '4' }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/28.
	 */

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var ajax = __webpack_require__(244);
	var MsgWin = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            choose: "2",
	            alertList: [],
	            user: null
	        };
	    },
	    myScroll: "",
	    scrollTop: "",

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.getData(user.parentid, 10);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    getData: function getData(parentid, num) {
	        var p = this;
	        ajax("POST", "getWarnMonthByUserPage", { parentid: parentid, num: num }, function (dt) {
	            if (dt.success) {
	                p.setState({ alertList: dt.data });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                } else {
	                    p.myScroll.refresh();
	                }
	            } else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	            }
	        });
	    },
	    doChoose: function doChoose(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id == 1) {
	            location.href = "#alertlist";
	        } else {
	            location.href = "#news";
	        }
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        console.log("cmdStr : " + cmdStr);
	        ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	            }
	        });
	    },

	    render: function render() {
	        var p = this;

	        var newsData = "";
	        var d = 0;
	        if (this.state.alertList.length > 0) {
	            newsData = this.state.alertList.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "d" + ++d, className: 'itemdev', style: { height: "7rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'itemicon', style: { height: "7rem", lineHeight: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: "itemCircle TB" + ((d - 1) % 6 + 1), style: { marginTop: "1rem" } },
	                            React.createElement('i', { className: "iconfont icon-baojing", style: { fontSize: "3rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemTitlek' },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle', style: { width: "100%" } },
	                            obj.info ? obj.info : "无定义内容"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemInfom', style: { width: "73%", height: "2rem", lineHeight: "2rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemDDC', style: { fontSize: "1rem" } },
	                            React.createElement(
	                                'div',
	                                { style: { float: "left" } },
	                                obj.createtime ? obj.createtime : ""
	                            )
	                        )
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: '通知', style: { background: "transparent" } }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white" } },
	                React.createElement(
	                    'div',
	                    { className: "segChoose", 'data-id': '1', onClick: p.doChoose },
	                    "报警"
	                ),
	                React.createElement(
	                    'div',
	                    { className: "segment", 'data-id': '2', onClick: p.doChoose },
	                    "日志"
	                ),
	                React.createElement('div', { style: { position: "relative", top: "7rem", backgroundImage: "url(images/main/main_bg1.png)", backgroundSize: "100%", height: "4rem" } })
	            ),
	            React.createElement('div', { style: { clear: "both" } }),
	            React.createElement(
	                'div',
	                { style: { height: "100%", paddingBottom: "15.5rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        newsData,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '4' }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});
	/*
	<div className="itemDDC" style={{fontSize:"1rem",float:"right"}}>
	   {obj.createtime?obj.createtime:""}
	</div>
	*/

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/21.
	 */
	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var IconButton = __webpack_require__(248);
	var OperatingListWin = __webpack_require__(263);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            headimg: "",
	            username: ""
	        };
	    },
	    componentwillmount: function componentwillmount() {
	        var headimg = localStorage.getItem("headimg") ? localStorage.getItem("headimg") : "";
	        this.setState({
	            headimg: headimg
	        });
	    },

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        window.getImageData = this.getImageData;
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                var headimg = p.state.headimg;
	                if (user.hasOwnProperty("username")) {
	                    p.setState({
	                        username: user.username
	                    });
	                }
	                if (!headimg) {
	                    Ajax("POST", "getUserDetailbyUserId", { userid: user.userid }, function (dt) {
	                        if (dt && dt.success) {
	                            var user = dt.data;
	                            if (user) {
	                                // 其他用户详情
	                                if (user.hasOwnProperty("headimg") && user.headimg) {
	                                    p.setState({
	                                        headimg: user.headimg
	                                    });
	                                }
	                            }
	                        }
	                    });
	                }
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#main";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    getSceneOperate: function getSceneOperate() {
	        this.refs.operatingListWin.setState({
	            data: [{ name: "拍照", id: 1, fid: 1 }, { name: "图片", id: 2, fid: 2 }]
	        });
	        this.refs.operatingListWin.show();
	    },
	    selectItem: function selectItem(id, scenceid) {
	        console.log("id:" + id + "scenceid" + scenceid);
	        this.refs.operatingListWin.hide();
	        switch (parseInt(id)) {
	            case 1:
	                this.takePhoto();break;
	            case 2:
	                this.choosePhoto();break;
	        }
	    },
	    takePhoto: function takePhoto() {
	        if (window.jsbridge) {
	            //console.log("window.jsbridge");
	            window.jsbridge.takePhoto();
	        } else {
	            console.log("no  window.jsbridge");
	        }
	    },
	    choosePhoto: function choosePhoto() {
	        if (window.jsbridge) {
	            window.jsbridge.choosePhoto();
	        } else {
	            console.log("no  window.jsbridge");
	        }
	    },

	    getImageData: function getImageData(url) {
	        console.log(url);
	        var headimg = "http://39.104.69.85:8585/" + url;
	        this.setState({
	            headimg: headimg
	        });
	        localStorage.setItem("headimg", headimg);
	        var userobj = { headimg: headimg };
	        Ajax("POST", "updateUserDetailbyUserid", { userid: userid, userObj: JSON.stringify(userobj) }, function (dt) {
	            if (dt && dt.success) {
	                console.log("操作成功");
	            } else {
	                console.log(JSON.stringify(dt));
	            }
	        });
	    },
	    doMore: function doMore() {
	        console.log("doMore");
	    },
	    getScene: function getScene() {
	        location.href = "#scenedetail";
	    },

	    getSetting: function getSetting() {
	        location.href = "#setting";
	    },

	    getVideo: function getVideo() {
	        location.href = "#video";
	    },
	    getDDC: function getDDC() {
	        location.href = "#ddc";
	    },
	    goUser: function goUser() {
	        location.href = "#user";
	    },
	    gotoTest: function gotoTest() {
	        location.href = "#test";
	    },
	    gotoInstall: function gotoInstall() {
	        location.href = "#otherhelp";
	    },
	    goRobot: function goRobot() {
	        location.href = "#robot";
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { style: { background: "transparent" }, title: "我的", rightClick: this.gotoInstall, rightText: "设置" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "45%", width: "100%", position: "absolute", zIndex: "1", color: "white" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "6.5rem", width: "100%", marginTop: "5rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'mineIcon' },
	                        React.createElement('img', { onClick: this.getSceneOperate, className: 'main_bg', src: this.state.headimg ? this.state.headimg : "images/main/user.png", style: { height: "6.5rem", width: "6.5rem", border: "3px solid white", borderRadius: "50%", marginTop: "1.5rem" } })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'FS13', style: { width: "100%", textAlign: "center", height: "3rem", lineHeight: "3rem" } },
	                    this.state.username
	                )
	            ),
	            React.createElement(
	                'div',
	                null,
	                React.createElement('img', { className: 'main_bg', src: 'images/main/main_bg.png', style: { top: "25%" } }),
	                this.state.role == 1 ? React.createElement(
	                    'div',
	                    { style: { position: "absolute", zIndex: "1", height: "52rem", marginTop: "54%", width: "100%" } },
	                    React.createElement(IconButton, { bgc: "TB2", color: 'LBS', icon: "qingjing", text: "情景", onClick: this.getScene, count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "peizhi", text: "配置", onClick: this.getSetting, count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB3", color: 'LBS', icon: "shefang", text: "设防", count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB4", color: 'LBS', icon: "shexiangtou", text: "摄像头", count: '3', onClick: this.getVideo }),
	                    React.createElement(IconButton, { bgc: "TB5", color: 'LBS', icon: "jiqiren", text: "机器人", count: '3' })
	                ) : React.createElement(
	                    'div',
	                    { style: { position: "absolute", zIndex: "1", height: "52rem", marginTop: "54%", width: "100%" } },
	                    React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "智能网关", count: '3', onClick: this.getDDC }),
	                    React.createElement(IconButton, { bgc: "TB2", color: 'LBS', icon: "qingjing", text: "情景", onClick: this.getScene, count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "peizhi", text: "配置", onClick: this.getSetting, count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB3", color: 'LBS', icon: "shefang", text: "设防", count: '3' }),
	                    React.createElement(IconButton, { bgc: "TB4", color: 'LBS', icon: "shexiangtou", text: "摄像头", count: '3', onClick: this.getVideo }),
	                    React.createElement(IconButton, { bgc: "TB6", color: 'LBS', icon: "zhanghaoshezhi", text: "账号", count: '3', onClick: this.goUser }),
	                    React.createElement(IconButton, { bgc: "TB5", color: 'LBS', icon: "jiqiren", text: "机器人", count: '3', onClick: this.goRobot })
	                )
	            ),
	            React.createElement(Footer, { viewTab: '5' }),
	            React.createElement(OperatingListWin, { height: '6rem', title: '操作选择', ref: 'operatingListWin', doDone: this.selectItem })
	        );
	    }
	});

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);

	var Nav = __webpack_require__(266);
	var Ajax = __webpack_require__(244);
	var ItemList = __webpack_require__(278);
	var OperatingListWin = __webpack_require__(263);
	var Msg = __webpack_require__(250);
	var MsgConfirm = __webpack_require__(250);
	var InputWin = __webpack_require__(280);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            sceneList: [],
	            sceneid: 0,
	            username: "",
	            IconList: [],
	            deleteSceneid: 0,
	            user: null,
	            role: 1
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getSceneByUserid(user.parentid, user.userid, user.role);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#mine";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    myScroll: null,

	    getSceneByUserid: function getSceneByUserid(userid, uid, role) {
	        var p = this;
	        Ajax("POST", "getSceneListByUserId", { userid: userid, uid: uid, role: role }, function (dt) {
	            if (dt && dt.success) {
	                var scene = dt.data;
	                p.setState({
	                    sceneList: scene
	                });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            }
	        });
	    },
	    getSceneById: function getSceneById(id, cb) {
	        var sceneList = this.state.sceneList;
	        var scene = null;
	        for (var i = 0; i < sceneList.length; i++) {
	            if (sceneList[i].hasOwnProperty("id") && sceneList[i].id == id) {
	                scene = sceneList[i];
	            }
	        }
	        if (scene) {
	            cb(scene);
	        } else {
	            Ajax("POST", "getSceneById", { id: id }, function (dt) {
	                if (dt && dt.success) {
	                    scene = dt.data[0];
	                    cb(scene);
	                } else {
	                    cb(null);
	                }
	            });
	        }
	    },
	    getSceneOperate: function getSceneOperate(id) {

	        this.refs.operatingListWin.setState({
	            data: [{ name: "修改", id: 1, fid: id }, { name: "删除", id: 2, fid: id }, { name: "设为常用", id: 3, fid: id }, { name: "取消常用", id: 4, fid: id }, { name: "定时", id: 5, fid: id }, { name: "排序", id: 6, fid: id }]
	        });
	        if (id) {
	            this.setState({
	                sceneid: id
	            });
	            console.log(id);
	            this.refs.operatingListWin.show();
	        } else {
	            console.log("getSceneOperate");
	        }
	    },
	    selectItem: function selectItem(id, scenceid) {
	        console.log("id:" + id + "scenceid" + scenceid);
	        switch (parseInt(id)) {
	            case 1:
	                this.updateScene(scenceid);break;
	            case 2:
	                this.delSceneconfirm(scenceid);break;
	            case 3:
	                this.setCommom(scenceid, 1);break;
	            case 4:
	                this.setCommom(scenceid, 0);break;
	            case 5:
	                this.setTiming(scenceid);break;

	            case 6:
	                var sceneList = this.state.sceneList;
	                for (var i = 0; i < sceneList.length; i++) {
	                    if (sceneList[i].id == scenceid) {
	                        // console.log(JSON.stringify())
	                        this.setState({
	                            currentobj: sceneList[i]
	                        });
	                    }
	                }
	                this.refs.operatingListWin.hide();
	                this.refs.sortNum.setState({ show: true });break;
	        }
	    },

	    updateScene: function updateScene(id) {
	        this.refs.operatingListWin.hide();
	        location.href = "#/sceneupdate/" + id;
	    },
	    delSceneconfirm: function delSceneconfirm(id) {
	        this.setState({
	            deleteSceneid: id
	        });
	        this.refs.operatingListWin.hide();
	        this.refs.msgconfirm.setState({
	            show: true,
	            word: "是否确认删除该情景？"
	        });
	    },

	    setCommom: function setCommom(scenceid, v) {
	        var p = this;
	        var user = this.state.user;
	        if (user && user.hasOwnProperty("parentid")) {
	            Ajax("POST", "setCommonSceneById", { id: scenceid, v: v, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (v == 1) {
	                        p.refs.msg.setState({ show: true, type: 1, word: "设为常用成功。", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, type: 1, word: "取消常用成功。", timeout: 1500 });
	                    }
	                    p.refs.operatingListWin.hide();
	                    setTimeout(function () {
	                        var user = p.state.user;
	                        p.getSceneByUserid(user.userid, user.parentid, user.role);
	                    }, 1600);
	                } else {
	                    p.refs.msg.setState({ show: true, type: 1, word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            console.log(JSON.stringify(user));
	        }
	    },

	    addScene: function addScene() {
	        location.href = "#sceneupdate";
	    },
	    setTiming: function setTiming(senceid) {
	        console.log(senceid);
	        location.href = "#sencetime/" + senceid;
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    cmd: function cmd(cmdStr) {
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                console.log(dt.msg);
	            }
	        });
	    },
	    sendCmd: function sendCmd(t) {
	        var sceneid = t;
	        var sceneList = this.state.sceneList;
	        for (var i = 0; i < sceneList.length; i++) {
	            if (sceneList[i] && sceneList[i].id == sceneid) {
	                this.sendScenCMD(sceneList[i]);
	                break;
	            }
	        }
	    },
	    confirm: function confirm() {
	        var deleteSceneId = this.state.deleteSceneid;
	        var p = this;
	        if (deleteSceneId) {
	            p.refs.msgconfirm.setState({ show: false });
	            Ajax("POST", "delSceneById", { id: deleteSceneId }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, type: 1, word: "删除成功", timeout: 1500 });
	                    setTimeout(function () {
	                        var user = p.state.user;
	                        p.getSceneByUserid(user.userid, user.parentid, user.role);
	                    }, 1600);
	                } else {
	                    p.refs.msg.setState({ show: true, type: 1, word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, type: 1, word: "删除失败", timeout: 1500 });
	        }
	    },
	    sendScenCMD: function sendScenCMD(scene) {
	        var p = this;
	        if (scene && scene.hasOwnProperty("attributes") && scene.hasOwnProperty("id")) {
	            var comList = null;
	            try {
	                comList = JSON.parse(scene.attributes);
	            } catch (e) {
	                console.log(e);
	            }
	            if (comList) {
	                for (var j = 0; j < comList.length; j++) {
	                    var devId = comList[j].devID;
	                    var ddcId = null;
	                    if (comList[j].hasOwnProperty("ddcmac")) {
	                        ddcId = comList[j].ddcmac;
	                    } else {
	                        ddcId = comList[j].ddcID;
	                    }
	                    var obj = p.cmd_protocol(devId, ddcId);
	                    obj.attributes = comList[j].attributes;
	                    if (comList[j].attributes && comList[j].attributes.hasOwnProperty("GRP") && comList[j].attributes.hasOwnProperty("TYP") && comList[j].attributes.GRP != "00") {
	                        if (devId == "0000000000000000") {
	                            obj.attributes["GRP"] = comList[j].attributes.GRP;
	                            obj.attributes["TYP"] = comList[j].attributes.TYP;
	                        } else {
	                            if (comList[j].attributes.hasOwnProperty("NAM") && comList[j].attributes.NAM && comList[j].attributes.NAM != devId) {
	                                obj.attributes["NAM"] = comList[j].attributes.NAM;
	                            }
	                        }
	                    }
	                    this.cmd(JSON.stringify(obj));
	                }
	            }
	        }
	    },
	    goBack: function goBack() {
	        location.href = "#mine";
	    },
	    doSortSence: function doSortSence(v) {
	        var p = this;
	        console.log(v);
	        p.refs.sortNum.setState({
	            show: false
	        });
	        var sceneList = this.state.sceneList;
	        if (!v.match(/^[1-9]+.?[1-9]*$/)) {
	            p.refs.msg.setState({ show: true, word: "无效输入", timeout: 1500 });
	            return;
	        }
	        if (v > sceneList.length) {
	            p.refs.msg.setState({ show: true, word: "已超过边界", timeout: 1500 });
	            return;
	        }
	        var index = parseInt(v) - 1;
	        var id1 = p.state.currentobj.id;
	        var id2 = sceneList[index].id;
	        var sortnum1 = p.state.currentobj.sortnum;
	        var sortnum2 = sceneList[index].sortnum;
	        if (id1 && id2 && sortnum1 && sortnum2) {
	            Ajax("POST", "sortSence", { senceid1: id1, senceid2: id2, sortnum1: sortnum1, sortnum2: sortnum2 }, function (dt) {
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "排序成功", timeout: 1500 });
	                    setTimeout(function () {
	                        var user = p.state.user;
	                        p.getSceneByUserid(user.userid, user.parentid, user.role);
	                        p.refs.sortNum.setValue("");
	                    }, 1500);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            console.log("参数不足，排序失败");
	        }
	    },
	    render: function render() {
	        var p = this;
	        var senceList = this.state.sceneList.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }

	            return React.createElement(ItemList, { key: "scene" + num, options: p.state.role, type: 1, info: '发送', id: obj.id, bgc: bgc, icon: obj.hicon, name: obj.buttonname, tip: obj.commonuse ? "常用" : "", ItemClick: p.getSceneOperate, sendCommand: p.sendCmd });
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: this.state.username ? this.state.username + "情景" : "我的情景", rightClick: this.state.role == 1 ? function () {} : this.addScene, rightIcon: this.state.role == 1 ? "" : "tianjia", leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            senceList
	                        )
	                    )
	                )
	            ),
	            React.createElement(OperatingListWin, { title: '操作选择', ref: 'operatingListWin', doDone: this.selectItem }),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(InputWin, { ref: 'sortNum', doDone: this.doSortSence, title: '排序', placeholder: '请输入想要排到第几位' }),
	            React.createElement(MsgConfirm, { ref: 'msgconfirm', type: '2', doDone: this.confirm })
	        );
	    }
	});

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var ButtonA = __webpack_require__(279);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {};
	    },
	    ItemClick: function ItemClick(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        var id = e.currentTarget.getAttribute("data-id");
	        this.props.ItemClick(id);
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'itemdev' },
	            React.createElement(
	                'div',
	                { className: 'itemicon' },
	                React.createElement(
	                    'div',
	                    { className: "itemCircle " + (p.props.bgc ? p.props.bgc : "TB4") },
	                    React.createElement('i', { className: "iconfont icon-" + (p.props.icon ? p.props.icon : "zhanghao"), style: { fontSize: "3rem" } })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemTitlek' },
	                React.createElement(
	                    'div',
	                    { className: 'itemTitle' },
	                    p.props.name
	                ),
	                p.props.type == 1 ? React.createElement(
	                    'div',
	                    { className: 'itemBtn' },
	                    React.createElement(
	                        ButtonA,
	                        { doSwitch: this.props.sendCommand, 'data-id': this.props.id ? this.props.id : 0, style: { width: "4.2rem", height: "2rem", lineHeight: "2rem", textAlign: "center", color: "#9a98a0" } },
	                        this.props.info ? this.props.info : ""
	                    )
	                ) : "",
	                p.props.type == 2 ? React.createElement(
	                    'div',
	                    { className: 'itemInfo' },
	                    this.props.info ? this.props.info : ""
	                ) : ""
	            ),
	            React.createElement(
	                'div',
	                { className: 'itemInfom' },
	                React.createElement(
	                    'div',
	                    { className: 'itemDDC' },
	                    p.props.tip
	                ),
	                React.createElement(
	                    'div',
	                    { className: "itemDDC " + (p.props.commonuse ? " BJ_DW_XS" : " BJ_DW_YC") },
	                    React.createElement(
	                        'div',
	                        { style: { marginLeft: "0.5rem", marginRight: "0.5rem", float: "left" } },
	                        "|"
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { float: "left" } },
	                        p.props.tip1
	                    )
	                )
	            ),
	            this.props.options == 1 ? "" : React.createElement(
	                'div',
	                { className: 'itemMore', 'data-id': this.props.id ? this.props.id : 0, onClick: this.ItemClick },
	                React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	            )
	        );
	    }
	});

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on on 17/12/18.
	 *
	 * SwitchButton
	 *        style : 自定义宽度以及位置,系统方法
	 *   hightLight : 高亮颜色(css 147行,可以添加)
	 *
	 *
	 *     eg: <SwitchButton style={{marginLeft:"30px",marginTop:"130px"}}/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            choose: 1
	        };
	    },

	    componentWillMount: function componentWillMount() {},
	    doClick: function doClick(e) {
	        var p = this;
	        e.preventDefault();
	        e.stopPropagation();
	        var t = e.currentTarget.getAttribute("data-id");
	        if (p.props.doSwitch) {
	            p.props.doSwitch(t);
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: " SB_k broderA ", width: p.props.width,
	                onClick: this.doClick, style: this.props.style ? this.props.style : {},
	                "data-id": this.props["data-id"] ? this.props["data-id"] : ""
	            },
	            this.props.children
	        );
	    }
	});

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Select = __webpack_require__(281);
	var IconInput = __webpack_require__(253);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false
	        };
	    },
	    backSelect: function backSelect() {
	        this.setState({
	            show: false
	        });
	    },
	    doShow: function doShow() {
	        this.setState({
	            show: true
	        });
	    },
	    doHide: function doHide() {
	        this.setState({
	            show: false
	        });
	    },

	    doUpdate: function doUpdate() {
	        var value = this.refs.inputData.getValue();
	        if (this.props.doDone) {
	            this.props.doDone(value);
	        }
	        if (!this.props.limit) {
	            this.doHide();
	        }
	    },

	    setValue: function setValue(text) {
	        this.refs.inputData.setValue(text);
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        this.refs.select.setState({
	            show: this.state.show
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            Select,
	            { ref: 'select', title: this.props.title ? this.props.title : "请输入", height: '7rem', goBack: this.backSelect, onClick: this.doUpdate },
	            React.createElement(IconInput, { ref: 'inputData', placeholder: this.props.placeholder, icon: this.props.icon ? this.props.icon : "inform", style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } })
	        );
	    }
	});

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by shc@lierda.com on 2016/8/1.
	 */
	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false
	        };
	    },
	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: this.state.show ? " W_b  " : "W_b BJ_DW_YC" },
	            React.createElement(
	                'div',
	                { className: this.state.show ? " EW_k " : "EW_k  BJ_DW_YC" },
	                React.createElement(
	                    'div',
	                    { className: 'EW_title' },
	                    React.createElement(
	                        'div',
	                        { className: 'EW_text', style: { width: "100%" } },
	                        p.props.title ? p.props.title : "标题"
	                    )
	                ),
	                React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: this.props.height ? this.props.height : "20rem", overflow: "hidden" } },
	                    this.props.children
	                ),
	                React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_JZ', style: { height: "5rem", width: "20rem", marginTop: "1rem" } },
	                    this.props.onClick ? React.createElement(
	                        'div',
	                        { className: 'BJ_DW_JZ', style: { width: "18rem" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'MW_btn BJ_DW_FZ TBS', style: { width: "8rem", height: "2.5rem" }, onClick: this.props.goBack },
	                                "取消"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'MW_btn2 BJ_DW_FY ', style: { width: "8rem", height: "2.5rem" }, onClick: this.props.onClick },
	                                "确定"
	                            )
	                        )
	                    ) : React.createElement(
	                        'div',
	                        { className: 'BJ_DW_JZ', style: { width: "8rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'MW_btn BJ_DW_FZ TBS', style: { width: "8rem", height: "2.5rem" }, onClick: this.props.goBack },
	                            "取消"
	                        )
	                    )
	                )
	            )
	        );
	    }
	});

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var Input = __webpack_require__(254);
	var Ajax = __webpack_require__(244);
	var IconWin = __webpack_require__(283);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var TypeWin = __webpack_require__(285);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            sceneid: this.props.params.id ? this.props.params.id : 0,
	            buttonname: "",
	            attributes: [],
	            selectedIcon: { id: 13, icon: "A-shangbanmoshi", name: "" },
	            selectGroups: [], //选中的区域
	            selectTypes: [], //选中的设备
	            devicelist: [], //所有设备
	            selectDev: [], //被选中的设备
	            commonData: [],
	            IconList: [],
	            GroupList: [],
	            TypeList: [],
	            user: { "username": "suojiu", "userid": 24, "role": 0, "parentid": 24, "nat": "011233444455557889999abbbccddeff", "phone": "18649821537", "companyid": 1, "exithiden": 0 }
	        };
	    },
	    myScroll: null,
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        if (this.state.sceneid) {
	            //更新操作
	            this.getSceneById(this.state.sceneid);
	        }

	        this.getUser(function (user) {
	            if (user) {
	                p.getDeviceByGroupsTypes(user, "", "");
	                p.getSceneIcon();
	                p.getGroupByUser();
	                p.getDeviceType();
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#scenedetail";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    getSceneIcon: function getSceneIcon() {
	        var p = this;
	        Ajax("POST", "getSceneIcon", {}, function (dt) {
	            if (dt && dt.success) {
	                var IconList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    IconList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({
	                    IconList: IconList
	                });
	            }
	        });
	    },

	    getDeviceByGroupsTypes: function getDeviceByGroupsTypes(user, groups, types) {
	        var p = this;
	        Ajax("POST", "getDeviceByGroupsTypes", { userid: user.parentid,
	            groups: groups.length ? groups.join(",") : "all",
	            types: types.length ? types.join(",") : ""
	        }, function (dt) {
	            if (dt && dt.success) {
	                var dev = dt.data;
	                for (var i = 0; i < dev.length; i++) {
	                    try {
	                        var attributes = JSON.parse(dev[i].attributes);
	                        dev[i].attributes = attributes;
	                    } catch (e) {
	                        //  console.log(JSON.stringify(dev[i]));
	                        cosnole.log(e);
	                    }
	                }
	                p.setState({ devicelist: dev });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	                p.getCheckIrbyt(dt.data);
	            }
	        });
	    },

	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({
	                    GroupList: GroupList
	                });
	            }
	        });
	    },
	    getDeviceType: function getDeviceType() {
	        var p = this;
	        Ajax("POST", "getAllDeviceType", {}, function (dt) {
	            if (dt && dt.success) {
	                //    console.log(JSON.stringify(dt.data));
	                var TypeList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    TypeList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].typename });
	                }
	                p.setState({
	                    TypeList: TypeList
	                });
	            }
	        });
	    },
	    getSceneById: function getSceneById(id) {
	        var p = this;
	        Ajax("POST", "getSceneById", { id: id }, function (dt) {
	            if (dt && dt.success) {
	                var scene = dt.data[0];
	                if (scene && scene.hasOwnProperty("buttonname")) {
	                    p.setState({
	                        buttonname: scene.buttonname
	                    });
	                    p.refs.buttoname.setValue(scene.buttonname);
	                } else {
	                    console.log("无buttonname");
	                }
	                if (scene && scene.hasOwnProperty("dicon") && scene.hasOwnProperty("iconid")) {
	                    var selectedIcon = {};
	                    selectedIcon.id = scene.iconid;
	                    selectedIcon.icon = scene.dicon;
	                    selectedIcon.name = scene.buttonname;
	                    p.refs.iconwin.setState({ select: { icon: scene.icon } });
	                    p.setState({
	                        selectedIcon: selectedIcon
	                    });
	                }
	                if (scene && scene.hasOwnProperty("attributes")) {
	                    console.log("attr:" + scene.attributes);
	                    try {
	                        var attr = JSON.parse(scene.attributes);
	                        p.setState({
	                            selectDev: attr
	                        });
	                    } catch (e) {
	                        console.log("getSceneById:" + e);
	                    }
	                }
	            }
	        });
	    },
	    saveScene: function saveScene() {
	        var p = this;
	        if (this.state.buttonname) {
	            if (this.state.selectedIcon) {
	                var selectedIcon = this.state.selectedIcon;
	                var user = this.state.user;
	                var selectDev = this.state.selectDev;
	                if (selectDev.length > 0) {
	                    var attributes = JSON.stringify(this.state.selectDev);
	                    for (var i = 0; i < selectDev.length; i++) {
	                        var attr = this.state.selectDev[i].attributes;
	                        var tempAttr = {}; // 为了判断除了 GRP 之外的属性
	                        for (var o in attr) {
	                            if (o != "GRP" && o != "NAM" && o != "TYP") {
	                                tempAttr[o] = attr[o];
	                            }
	                        }
	                    }
	                    if (JSON.stringify(tempAttr) != "{}") {
	                        if (tempAttr.hasOwnProperty("SWI") || tempAttr.hasOwnProperty("TUN") && tempAttr.TUN == "OPEN" && tempAttr.hasOwnProperty("SMD") && tempAttr.hasOwnProperty("SSP") || tempAttr.hasOwnProperty("SND") || tempAttr.hasOwnProperty("WIN") || tempAttr.hasOwnProperty("LCK") || tempAttr.hasOwnProperty("SW1") || tempAttr.hasOwnProperty("SW2") || tempAttr.hasOwnProperty("SW3") || tempAttr.hasOwnProperty("SW4") || tempAttr.hasOwnProperty("SW5") || tempAttr.hasOwnProperty("SW6") || tempAttr.hasOwnProperty("TUN") || tempAttr.hasOwnProperty("RL1") || tempAttr.hasOwnProperty("RL2")) {
	                            console.log("tempAttr" + JSON.stringify(tempAttr));
	                        } else {
	                            p.refs.msg.setState({ show: true, word: "请选择正确操作。", timeout: 1800 });
	                            return;
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "请选择正确操作。", timeout: 1800 });
	                        return;
	                    }
	                    Ajax("POST", "saveOrUpdateScene", {
	                        userid: user.parentid,
	                        attributes: attributes,
	                        buttonname: this.state.buttonname,
	                        iconid: selectedIcon.id,
	                        id: p.state.sceneid
	                    }, function (dt) {
	                        if (dt && dt.success) {
	                            location.href = "#scenedetail";
	                        }
	                    });
	                } else {
	                    this.refs.msg.setState({
	                        word: "请选择设备和操作。",
	                        timeout: 1800,
	                        show: true
	                    });
	                }
	            } else {
	                this.refs.msg.setState({
	                    word: "请选择正确的情景图标。",
	                    timeout: 1800,
	                    show: true
	                });
	            }
	        } else {
	            this.refs.msg.setState({
	                word: "请输入情景名称。",
	                timeout: 1800,
	                show: true
	            });
	        }
	    },
	    back: function back() {
	        location.href = "#scenedetail";
	    },
	    checkHandler: function checkHandler(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-type");
	        var attr = p.state.selectDev;
	        var flag = true;
	        var devObj = null;
	        var attrNew = [];
	        try {
	            devObj = JSON.parse(data);
	        } catch (e) {
	            console.log(e);
	        }
	        if (devObj) {
	            for (var i = 0; i < attr.length; i++) {
	                if (attr[i].id == devObj.id) {
	                    flag = false;
	                } else {
	                    attrNew.push(attr[i]);
	                }
	            }
	            if (flag) {
	                var obj = { id: devObj.id, devID: devObj.macid, ddcmac: devObj.ddcmac, attributes: {} };
	                var attributes = devObj.attributes;
	                if (attributes.hasOwnProperty("GRP") && attributes.GRP != "00" && devObj.macid == "0000000000000000") {
	                    obj.attributes["GRP"] = attributes.GRP;
	                    if (attributes.hasOwnProperty("TYP")) {
	                        obj.attributes["TYP"] = attributes.TYP;
	                    }
	                } else {
	                    if (attributes.hasOwnProperty("NAM") && attributes.NAM && attributes.NAM != devObj.macid) {
	                        obj.attributes["NAM"] = attributes.NAM;
	                    }
	                }
	                attrNew.push(obj);
	            }
	            p.setState({ selectDev: attrNew });
	        } else {
	            p.setState({
	                selectDev: attr
	            });
	        }
	    },
	    getLEV: function getLEV(e) {
	        var p = this;
	        var LEV = e.currentTarget.getAttribute("data-type");
	        var id = e.currentTarget.getAttribute("data-id");
	        var attr = p.state.selectDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].id == id) {
	                attr[i].attributes["LEV"] = LEV;
	            }
	        }
	        p.setState({ selectDev: attr });
	    },
	    getCTM: function getCTM(e) {
	        var p = this;
	        var CTM = e.currentTarget.getAttribute("data-type");
	        var id = e.currentTarget.getAttribute("data-id");
	        var attr = p.state.selectDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].id == id) {
	                attr[i].attributes["CTM"] = CTM;
	            }
	        }
	        p.setState({ selectDev: attr });
	    },
	    getOpen: function getOpen(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        var type = e.currentTarget.getAttribute("data-type");
	        console.log("id:" + id + "type:" + type);
	        var attr = p.state.selectDev;
	        if (type == "SWI,OFF" || type == "SWI,TOG" || type == "TUN,CLOSE") {
	            for (var j in attr) {
	                if (attr[j].id == id) {
	                    var sss = type.split(",");
	                    var obj = {};
	                    obj[sss[0]] = sss[1];
	                    if (attr[j].attributes.hasOwnProperty("GRP")) {
	                        obj.GRP = attr[j].attributes.GRP;
	                        if (attr[j].attributes.hasOwnProperty("TYP")) {
	                            obj.TYP = attr[j].attributes.TYP;
	                        }
	                    } else {
	                        if (attr[j].attributes.hasOwnProperty("NAM") && attr[j].attributes.NAM) {
	                            obj.NAM = attr[j].attributes.NAM;
	                        }
	                    }
	                    attr[j].attributes = obj;
	                    break;
	                }
	            }
	        } else {
	            for (var j in attr) {
	                if (attr[j].id == id) {
	                    var sss = type.split(",");
	                    var obj = attr[j].attributes;
	                    if (sss.length == 2) {
	                        obj[sss[0]] = sss[1];
	                    }
	                    if (sss.length == 4) {
	                        obj[sss[0]] = sss[1];
	                        obj[sss[2]] = sss[3];
	                    }
	                    if (attr[j].attributes.hasOwnProperty("GRP")) {
	                        obj.GRP = attr[j].attributes.GRP;
	                        if (attr[j].attributes.hasOwnProperty("TYP")) {
	                            obj.TYP = attr[j].attributes.TYP;
	                        }
	                    } else {
	                        if (attr[j].attributes.hasOwnProperty("NAM") && attr[j].attributes.NAM) {
	                            obj.NAM = attr[j].attributes.NAM;
	                        }
	                    }
	                    attr[j].attributes = obj;
	                    break;
	                }
	            }
	        }
	        console.log("attr:" + JSON.stringify(attr));
	        p.setState({ selectDev: attr });
	    },

	    // 获取红外转发列表-数据整合
	    getCheckIrbyt: function getCheckIrbyt(arry) {
	        var p = this;
	        var commondata = this.state.commonData;
	        for (var i = 0; i < arry.length; i++) {
	            var obj = arry[i];
	            if (obj.link == "irbyt" && obj.typ == "IR-BYT") {
	                p.getIrcodeList(obj.id, obj.ddcid, 24, function (state, dt) {
	                    if (state == 1 && dt.length > 0) {
	                        var key = dt[0].deviceid;
	                        if (commondata.hasOwnProperty(key)) {} else {
	                            commondata[key] = dt;
	                        }
	                        p.setState({ commonData: commondata });
	                    }
	                });
	            }
	        }
	    },
	    // 获取红外转发列表
	    getIrcodeList: function getIrcodeList(deviceid, ddcid, parentid, cb) {
	        if (parentid) {
	            Ajax("POST", "getIrcodeByUserid", { deviceid: deviceid, ddcid: ddcid, userid: parentid }, function (dt) {
	                if (dt && dt.success) {
	                    cb(1, dt.data);
	                } else {
	                    cb(0, []);
	                }
	            });
	        } else {
	            cb(0, []);
	        }
	    },

	    getIcon: function getIcon() {
	        this.refs.iconwin.doShow(this.state.IconList);
	    },
	    setSTP: function setSTP(e) {
	        var p = this;
	        var STP = e.currentTarget.getAttribute("data-type");
	        var id = e.currentTarget.getAttribute("data-id");
	        var attr = p.state.selectDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].id == id) {
	                attr[i].attributes["STP"] = STP;
	            }
	        }
	        p.setState({ selectDev: attr });
	    },
	    getSceneName: function getSceneName(name) {
	        console.log(name);
	        this.setState({
	            buttonname: name
	        });
	    },
	    getArea: function getArea() {
	        this.refs.groupwin.doShow(this.state.GroupList);
	    },
	    doSearch: function doSearch() {
	        var selectGroups = this.state.selectGroups;
	        var selectTypes = this.state.selectTypes;
	        var group = [];
	        var type = [];
	        for (var i = 0; i < selectGroups.length; i++) {
	            if (selectGroups[i] && selectGroups[i].id) {
	                group.push(selectGroups[i].id);
	            }
	        }
	        for (var i = 0; i < selectTypes.length; i++) {
	            if (selectTypes[i] && selectTypes[i].id) {
	                type.push(selectTypes[i].id);
	            }
	        }
	        this.getDeviceByGroupsTypes(this.state.user, group, type);
	    },
	    getType: function getType() {
	        this.refs.typewin.doShow(this.state.TypeList);
	    },
	    getIconSelect: function getIconSelect(attr) {
	        if (attr) {
	            this.setState({
	                selectedIcon: attr
	            });
	        }
	    },
	    getAreaSelect: function getAreaSelect(attr) {
	        console.log(JSON.stringify(attr));
	        if (attr) {
	            this.setState({
	                selectGroups: attr
	            });
	            var groupStr = [];
	            if (attr.length > 0) {
	                for (var i = 0; i < attr.length; i++) {
	                    groupStr.push(attr[i].name);
	                }
	            }
	            var selectTypes = this.state.selectTypes;
	            for (var j = 0; j < selectTypes.length; j++) {
	                groupStr.push(selectTypes[j].name);
	            }
	            this.refs.input.value = groupStr.join(",");
	        }
	    },
	    getTypeSelect: function getTypeSelect(attr) {
	        if (attr) {
	            this.setState({
	                selectTypes: attr
	            });
	            var groupStr = [];
	            if (attr.length > 0) {
	                for (var i = 0; i < attr.length; i++) {
	                    groupStr.push(attr[i].name);
	                }
	            }
	            var selectGroups = this.state.selectGroups;
	            for (var j = 0; j < selectGroups.length; j++) {
	                groupStr.push(selectGroups[j].name);
	            }
	            this.refs.input.value = groupStr.join(",");
	        }
	    },
	    doClear: function doClear() {
	        this.refs.input.value = "";
	        this.setState({
	            selectGroups: [],
	            selectTypes: []
	        });
	    },
	    render: function render() {
	        var p = this;
	        var attr = this.state.devicelist.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            var sd = p.state.selectDev;
	            var selectflag = null;
	            var attributes = {};
	            var common = p.state.commonData;
	            var commondata = "";
	            var flagNum = 0;
	            for (var i = 0; i < sd.length; i++) {
	                if (sd[i].id == obj.id) {
	                    selectflag = true;
	                    attributes = sd[i].attributes;
	                    /**
	                     * 红外转发
	                     * **/
	                    var keyV = obj.id;
	                    if (obj.link == "irbyt" && obj.typ == "IR-BYT") {
	                        if (common.hasOwnProperty(keyV) && common[keyV].length > 0) {
	                            var num = common[keyV].length;
	                            if (num % 3 == 0) {
	                                flagNum = parseInt(num / 3);
	                            } else {
	                                flagNum = parseInt(num / 3) + 1;
	                            }
	                            if (flagNum && common[keyV].length > 0) {
	                                commondata = common[keyV].map(function (o, cnum) {
	                                    return React.createElement(
	                                        'div',
	                                        { key: "com_" + cnum + "obj_" + obj.id, className: selectflag && attributes["SND"] == o.code ? " stateDevChecked_S " : " stateDev_S ",
	                                            onClick: p.getOpen, 'data-type': "SND," + o.code, 'data-id': obj.id },
	                                        o.name
	                                    );
	                                });
	                            }
	                        }
	                    }
	                    break;
	                }
	            }
	            return React.createElement(
	                'div',
	                { className: 'item_S  B2g', style: { width: "100%", marginTop: "2px" }, key: "senseD" + num + "obj" + obj.id },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: " itemS BJ_DW_FZ  " + bgc },
	                        React.createElement('i', { className: "itemIcon_S iconfont  " + (obj.hicon ? "icon-" + obj.hicon : " icon-zhanghao"), style: { fontSize: "3rem", marginLeft: "0.5rem" } })
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "70%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle_S', style: { paddingLeft: "0.8rem", height: "1.8rem", lineHeight: "2rem", width: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                            obj.name
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { color: "#b7b7b7" } },
	                            React.createElement(
	                                'div',
	                                { className: "FS12 BJ_BJ_ML10 BJ_DW_FZ", style: { marginTop: "2px", height: "1.8rem", lineHeight: "1.8rem" } },
	                                obj.ddcname ? obj.ddcname : ""
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: "BJ_DW_FZ  FS12 ", style: { marginTop: "0.1rem", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", width: "15rem", height: "1.8rem", lineHeight: "1.8rem" } },
	                                obj.alias ? React.createElement(
	                                    'span',
	                                    null,
	                                    ' | '
	                                ) : "",
	                                obj.alias ? obj.alias : ""
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', 'data-type': JSON.stringify(obj), style: { width: "10%", height: "5rem", lineHeight: "5rem" }, onClick: p.checkHandler },
	                        React.createElement('i', { className: "itemIcon_S iconfont " + (selectflag ? "icon-xuanzhong JQS" : " icon-weixuanzhong JQS"), style: { fontSize: "3rem" } })
	                    )
	                ),
	                obj.link == "ltctm" && obj.typ == "LT-CTM" ? React.createElement(
	                    'div',
	                    { className: selectflag && attributes ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "15.5rem" : "" } },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S ', style: { height: "3rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "ON" ? " stateDevChecked_S  BJ_DW_FZ " : " stateDev_S BJ_DW_FZ ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S  BJ_DW_FZ" : " stateDev_S  BJ_DW_FZ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "TOG" ? " stateDevChecked_S  BJ_DW_FZ" : " stateDev_S  BJ_DW_FZ",
	                                onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.id },
	                            "取反"
	                        )
	                    ),
	                    React.createElement('div', { className: 'BJ_DW_QC' }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "6rem", marginTop: "5px" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { marginTop: "5px" } },
	                            React.createElement(
	                                'div',
	                                { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                "调光:"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 1, 'data-id': obj.id, onClick: p.getLEV },
	                                "1"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 5, 'data-id': obj.id, onClick: p.getLEV },
	                                "5"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 15, 'data-id': obj.id, onClick: p.getLEV },
	                                "15"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.getLEV },
	                                "25"
	                            ),
	                            React.createElement('br', null),
	                            React.createElement(
	                                'div',
	                                { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 35, 'data-id': obj.id, onClick: p.getLEV },
	                                "35"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 50, 'data-id': obj.id, onClick: p.getLEV, onClick: p.getLEV },
	                                "50"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 75, 'data-id': obj.id, onClick: p.getLEV, onClick: p.getLEV },
	                                "75"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 100, 'data-id': obj.id, onClick: p.getLEV, onClick: p.getLEV },
	                                "100"
	                            )
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { marginTop: "5px" } },
	                            React.createElement(
	                                'div',
	                                { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                "调色:"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 0 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 0, 'data-id': obj.id, onClick: p.getCTM },
	                                "0"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 5, 'data-id': obj.id, onClick: p.getCTM },
	                                "5"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 15, 'data-id': obj.id, onClick: p.getCTM },
	                                "15"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.getCTM },
	                                "25"
	                            ),
	                            React.createElement('br', null),
	                            React.createElement(
	                                'div',
	                                { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 35, 'data-id': obj.id, onClick: p.getCTM },
	                                "35"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 50, 'data-id': obj.id, onClick: p.getCTM },
	                                "50"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 75, 'data-id': obj.id, onClick: p.getCTM },
	                                "75"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 100, 'data-id': obj.id, onClick: p.getCTM },
	                                "100"
	                            )
	                        )
	                    )
	                ) : "",
	                obj.link == "ltt8s" && obj.typ == "LT-T8S" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "8rem" : "" } },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "3rem" } },
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "TOG" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.id },
	                            "取反"
	                        )
	                    ),
	                    React.createElement('div', { className: 'BJ_DW_QC' }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "3rem", marginTop: "5px" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S' },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ FS14 BK ' },
	                                "调光:"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 1, 'data-id': obj.id, onClick: p.getLEV },
	                                "1"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.getLEV },
	                                "25"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 50, 'data-id': obj.id, onClick: p.getLEV },
	                                "50"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 75, 'data-id': obj.id, onClick: p.getLEV },
	                                "75"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 100, 'data-id': obj.id, onClick: p.getLEV },
	                                "100"
	                            )
	                        )
	                    )
	                ) : "",
	                obj.link == "ltlev" && obj.typ == "LT-LEV" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "8rem" : "" } },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "3rem" } },
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: selectflag && attributes["SWI"] == "TOG" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.id },
	                            "取反"
	                        )
	                    ),
	                    React.createElement('div', { className: 'BJ_DW_QC' }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "3rem", marginTop: "5px" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S' },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ FS14 BK ' },
	                                "调光:"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 1, 'data-id': obj.id, onClick: p.getLEV },
	                                "1"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.getLEV },
	                                "25"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 50, 'data-id': obj.id, onClick: p.getLEV },
	                                "50"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 75, 'data-id': obj.id, onClick: p.getLEV },
	                                "75"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 100, 'data-id': obj.id, onClick: p.getLEV },
	                                "100"
	                            )
	                        )
	                    )
	                ) : "",
	                obj.link == "dllck" || obj.typ == "DL-LCK" || obj.typ == "DL-HTL" || obj.typ == "DL-HTK" || obj.link == "hmlck" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["LCK"] == "OPEN" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "LCK,OPEN", 'data-id': obj.id },
	                            "开门"
	                        )
	                    )
	                ) : "",
	                obj.typ == "WD-RXJ" || obj.typ == "WD-DYK" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["WIN"] == "OPEN" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "WIN,OPEN", 'data-id': obj.id },
	                            "开启"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["WIN"] == "CLOSE" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "WIN,CLOSE", 'data-id': obj.id },
	                            "关闭"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["WIN"] == "STOP" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "WIN,STOP", 'data-id': obj.id },
	                            "停止"
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK1" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id },
	                            "关"
	                        )
	                    )
	                ) : "",
	                obj.link == "clrl" && obj.typ == "CL-RL1" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    obj.hasOwnProperty("attributes") && obj.attributes.hasOwnProperty("titleid") && obj.attributes.titleid == 2 ? React.createElement(
	                        'div',
	                        { style: { height: "7.5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                                "关"
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' })
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_BL_W100 ', style: { height: "2.5rem", marginTop: "0.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S' },
	                                React.createElement(
	                                    'div',
	                                    { className: ' BJ_DW_FZ FS14 BK ' },
	                                    "温度:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 23, 'data-id': obj.id, onClick: p.setSTP },
	                                    "23℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 24, 'data-id': obj.id, onClick: p.setSTP },
	                                    "24℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.setSTP },
	                                    "25℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 26, 'data-id': obj.id, onClick: p.setSTP },
	                                    "26℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 27, 'data-id': obj.id, onClick: p.setSTP },
	                                    "27℃"
	                                )
	                            )
	                        )
	                    ) : React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK2" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id },
	                            "1开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id },
	                            "1关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW2"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id },
	                            "2开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW2"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id },
	                            "2关"
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk0" && obj.typ == "SW-TK0" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["RL1"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "RL1,ON", 'data-id': obj.id },
	                            "1路开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["RL1"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "RL1,OFF", 'data-id': obj.id },
	                            "1路关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["RL2"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "RL2,ON", 'data-id': obj.id },
	                            "2路开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["RL2"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "RL2,OFF", 'data-id': obj.id },
	                            "2路关"
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK3" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id },
	                            "1开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW1"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id },
	                            "1关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW2"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id },
	                            "2开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW2"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id },
	                            "2关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW3"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id },
	                            "3开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SW3"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.id },
	                            "3关"
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK4" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "6.5rem" } },
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'ON' },
	                            '1键开'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW1"] == "ON" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'OFF' },
	                            '1键关'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW1"] == "OFF" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'ON' },
	                            '2键开'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW2"] == "ON" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'OFF' },
	                            '2键关'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW2"] == "OFF" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id }),
	                        React.createElement('br', null),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'ON' },
	                            '3键开'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW3"] == "ON" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'OFF' },
	                            '3键关'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW3"] == "OFF" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'ON' },
	                            '4键开'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW4"] == "ON" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.id }),
	                        React.createElement(
	                            'label',
	                            { htmlFor: 'OFF' },
	                            '4键关'
	                        ),
	                        React.createElement('div', { className: selectflag && attributes["SW4"] == "OFF" ? "radioChecked_S" : "radio_S",
	                            onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.id })
	                    )
	                ) : "",
	                obj.link == "clrl6" && obj.typ == "CL-RL6" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    obj.hasOwnProperty("attributes") && obj.attributes.hasOwnProperty("titleid") && obj.attributes.titleid == 2 ? React.createElement(
	                        'div',
	                        { style: { height: "11.5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "8rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '空调开'
	                                ),
	                                React.createElement('div', { className: attributes["TUN"] == "OPEN" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "TUN,OPEN", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '空调关'
	                                ),
	                                React.createElement('div', { className: attributes["TUN"] == "CLOSE" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "TUN,CLOSE", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '制冷'
	                                ),
	                                React.createElement('div', { className: attributes["SMD"] == "COOL" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SMD,COOL", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '制热'
	                                ),
	                                React.createElement('div', { className: attributes["SMD"] == "HOT" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SMD,HOT", 'data-id': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '大风'
	                                ),
	                                React.createElement('div', { className: attributes["SSP"] == "HIGH" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SSP,HIGH", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '中风'
	                                ),
	                                React.createElement('div', { className: attributes["SSP"] == "MID" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SSP,MID", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '小风'
	                                ),
	                                React.createElement('div', { className: attributes["SSP"] == "LOW" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SSP,LOW", 'data-id': obj.id }),
	                                React.createElement('div', { className: 'BJ_DW_QC' })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { height: "2.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S' },
	                                React.createElement(
	                                    'div',
	                                    { className: 'BJ_DW_FZ FS14 BK ' },
	                                    "温度:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 23, 'data-id': obj.id, onClick: p.setSTP },
	                                    "23℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 24, 'data-id': obj.id, onClick: p.setSTP },
	                                    "24℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.setSTP },
	                                    "25℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 26, 'data-id': obj.id, onClick: p.setSTP },
	                                    "26℃"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 27, 'data-id': obj.id, onClick: p.setSTP },
	                                    "27℃"
	                                )
	                            )
	                        )
	                    ) : React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "10rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '1路开'
	                            ),
	                            React.createElement('div', { className: attributes["SW1"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '1路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW1"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '2路开'
	                            ),
	                            React.createElement('div', { className: attributes["SW2"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '2路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW2"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '3路开'
	                            ),
	                            React.createElement('div', { className: selectflag && attributes["SW3"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '3路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW3"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '4路开'
	                            ),
	                            React.createElement('div', { className: attributes["SW4"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '4路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW4"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '5路开'
	                            ),
	                            React.createElement('div', { className: attributes["SW5"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '5路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW5"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '6路开'
	                            ),
	                            React.createElement('div', { className: attributes["SW6"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '6路关'
	                            ),
	                            React.createElement('div', { className: attributes["SW6"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW6,OFF", 'data-id': obj.id })
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK5" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "10rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '1键开'
	                            ),
	                            React.createElement('div', { className: attributes["SW1"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '1键关'
	                            ),
	                            React.createElement('div', { className: attributes["SW1"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '2键开'
	                            ),
	                            React.createElement('div', { className: attributes["SW2"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '2键关'
	                            ),
	                            React.createElement('div', { className: attributes["SW2"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '3键开'
	                            ),
	                            React.createElement('div', { className: attributes["SW3"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '3键关'
	                            ),
	                            React.createElement('div', { className: attributes["SW3"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '4键开'
	                            ),
	                            React.createElement('div', { className: attributes["SW4"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '4键关'
	                            ),
	                            React.createElement('div', { className: attributes["SW4"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '5键开'
	                            ),
	                            React.createElement('div', { className: attributes["SW5"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '5键关'
	                            ),
	                            React.createElement('div', { className: attributes["SW5"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.id })
	                        )
	                    )
	                ) : "",
	                obj.link == "swtk" && obj.typ == "SW-TK6" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "12rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "4rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '1键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW1"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '1键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW1"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '2键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW2"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '2键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW2"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "4rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '3键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW3"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '3键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW3"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '4键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW4"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '4键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW4"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "4rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '5键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW5"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '5键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW5"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '6键开'
	                                ),
	                                React.createElement('div', { className: attributes["SW6"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '6键关'
	                                ),
	                                React.createElement('div', { className: attributes["SW6"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW6,OFF", 'data-id': obj.id })
	                            )
	                        )
	                    )
	                ) : "",
	                obj.link == "clr1m" && obj.typ == "CL-R1M" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        )
	                    )
	                ) : "",
	                obj.link == "sslux" && obj.typ == "SS-LUX" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "4rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        )
	                    )
	                ) : "",
	                obj.link == "bgm" && obj.typ == "MS-BGM" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S ', style: { height: "15.5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id },
	                            "关"
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SPS"] == "PUS" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SPS,PUS", 'data-id': obj.id },
	                            "暂停"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SPS"] == "PLY" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SPS,PLY", 'data-id': obj.id },
	                            "播放"
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SMN"] == "1" ? " stateDevChecked_S  " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SMN,1", 'data-id': obj.id },
	                            "第一首"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SMN"] == "2" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SMN,2", 'data-id': obj.id },
	                            "第二首"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SMN"] == "3" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SMN,3", 'data-id': obj.id },
	                            "第三首"
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SVL"] == "1" ? " stateDevChecked_S  " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SVL,1", 'data-id': obj.id },
	                            "音量最低"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SVL"] == "4" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SVL,4", 'data-id': obj.id },
	                            "音量低"
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SVL"] == "7" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SVL,7", 'data-id': obj.id },
	                            "音量中"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SVL"] == "11" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SVL,11", 'data-id': obj.id },
	                            "音量高"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SVL"] == "15" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SVL,15", 'data-id': obj.id },
	                            "音量最高"
	                        )
	                    )
	                ) : "",
	                obj.typ == "AC-TPC" || obj.typ == "AD-TPC" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: "11.5rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "8rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '空调开'
	                            ),
	                            React.createElement('div', { className: attributes["SWI"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '空调关'
	                            ),
	                            React.createElement('div', { className: attributes["SWI"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '制冷'
	                            ),
	                            React.createElement('div', { className: attributes["SMD"] == "COOL" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SMD,COOL", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '制热'
	                            ),
	                            React.createElement('div', { className: attributes["SMD"] == "HOT" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SMD,HOT", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '大风'
	                            ),
	                            React.createElement('div', { className: attributes["SSP"] == "HIGH" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SSP,HIGH", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                '中风'
	                            ),
	                            React.createElement('div', { className: attributes["SSP"] == "MID" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SSP,MID", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                '小风'
	                            ),
	                            React.createElement('div', { className: attributes["SSP"] == "LOW" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SSP,LOW", 'data-id': obj.id })
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { height: "2.5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S' },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ FS14 BK ' },
	                                "温度:"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 23, 'data-id': obj.id, onClick: p.setSTP },
	                                "23℃"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 24, 'data-id': obj.id, onClick: p.setSTP },
	                                "24℃"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 25, 'data-id': obj.id, onClick: p.setSTP },
	                                "25℃"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 26, 'data-id': obj.id, onClick: p.setSTP },
	                                "26℃"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27 ? " boxDevChecked_S " : " boxDev_S "), 'data-type': 27, 'data-id': obj.id, onClick: p.setSTP },
	                                "27℃"
	                            )
	                        )
	                    )
	                ) : "",
	                obj.link == "clpu6" && obj.typ == "CL-PU6" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                "1键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW1"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                "2键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW2"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                "3键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW3"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                "4键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW4"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.id }),
	                            React.createElement('br', null)
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'ON' },
	                                "5键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW5"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.id }),
	                            React.createElement(
	                                'label',
	                                { htmlFor: 'OFF' },
	                                "6键开"
	                            ),
	                            React.createElement('div', { className: attributes["SW6"] == "ON" ? "radioChecked_S" : "radio_S",
	                                onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.id })
	                        )
	                    )
	                ) : "",
	                obj.link == "irbyt" && obj.typ == "IR-BYT" ? React.createElement(
	                    'div',
	                    { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                    React.createElement(
	                        'div',
	                        { className: 'redioAir_S', style: { height: flagNum * 3.5 + 4 + "rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SND"] == "68" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SND,68", 'data-id': obj.id },
	                            "空调开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SND"] == "67" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SND,67", 'data-id': obj.id },
	                            "空调关"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SND"] == "69" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SND,69", 'data-id': obj.id },
	                            "电视开关"
	                        ),
	                        flagNum > 0 ? React.createElement(
	                            'div',
	                            null,
	                            React.createElement('div', { className: 'fl', style: { borderBottom: "1px solid #efefef", width: "100%", height: "1px", marginTop: "0.8rem" } }),
	                            commondata
	                        ) : ""
	                    )
	                ) : ""
	            );
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g ', style: { position: "fixed" } },
	            React.createElement(Nav, { title: "情景管理", rightClick: this.saveScene, rightIcon: 'baocun', leftIcon: 'xiaojiantou2', leftClick: this.back }),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98  B2g', style: { position: "absolute", zIndex: "2", marginLeft: "1%", height: "16rem", marginTop: "4rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100  YS_BJ_LBS LB TC', style: { height: "4rem", lineHeight: "4rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'text',
	                        { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14 ' },
	                        ' 情景名称'
	                    ),
	                    ' ',
	                    React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "0.5rem" }, ref: 'buttoname', doChange: this.getSceneName })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100 YS_BJ_LBS LB TC', style: { height: "4rem", marginTop: "0.5rem", lineHeight: "4rem" } },
	                    React.createElement(
	                        'text',
	                        { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14 ' },
	                        ' 图标选择'
	                    ),
	                    ' ',
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FY', style: { marginRight: "2rem", width: "4rem", height: "4rem" }, onClick: this.getIcon },
	                        React.createElement('i', { className: "iconfont fontS iconfont  " + (this.state.selectedIcon["icon"] ? "icon-" + this.state.selectedIcon["icon"] : " icon-A-shangbanmoshi"), style: { fontSize: "3rem" } })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100 YS_BJ_LBS LB TC', style: { height: "4rem", marginTop: "0.5rem", lineHeight: "4rem" } },
	                    React.createElement(
	                        'text',
	                        { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14' },
	                        '  设备'
	                    ),
	                    ' ',
	                    React.createElement(
	                        'div',
	                        { className: ' Button3 BJ_DW_FZ FS14', style: { marginLeft: "1rem", marginTop: "1rem" }, onClick: this.getArea },
	                        '区域'
	                    ),
	                    ' ',
	                    React.createElement(
	                        'div',
	                        { className: ' Button3 BJ_DW_FZ FS14', style: { marginLeft: "1rem", marginTop: "1rem" }, onClick: this.getType },
	                        '类型'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100 YS_BJ_LBS LB TC', style: { height: "4rem", lineHeight: "4rem" } },
	                    React.createElement(
	                        'form',
	                        { className: ' BJ_DW_FZ suosoukuang ', style: { marginLeft: "15%", marginTop: "2px", width: "65%" }, id: 'search', action: '', onSubmit: p.search },
	                        React.createElement('input', { className: 'DNA_input1', ref: 'input', placeholder: '  搜索...', type: 'text', name: 'search' }),
	                        React.createElement(
	                            'div',
	                            { className: 'I_qc1' },
	                            React.createElement('i', { className: "iconfont icon-guanbi", onClick: p.doClear, style: { fontSize: "2.2rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'DNA_r21 BJ_DW_FZ ', onClick: p.doSearch },
	                        React.createElement('i', { className: "iconfont icon-sousuo", style: { fontSize: "1.7rem" } })
	                    )
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem", marginTop: "21rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: 4.5 * 6 + "rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            attr
	                        )
	                    )
	                )
	            ),
	            React.createElement(IconWin, { ref: 'iconwin', onSelect: this.getIconSelect }),
	            React.createElement(GroupWin, { ref: 'groupwin', title: "选择区域", onSelect: this.getAreaSelect }),
	            React.createElement(TypeWin, { ref: 'typewin', title: "选择类型", onSelect: this.getTypeSelect }),
	            React.createElement(Footer, { viewTab: '5' }),
	            React.createElement(Msg, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by Administrator on 2016/8/5.
	 */
	'';

	var React = __webpack_require__(24);
	var Select = __webpack_require__(281);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            IconList: [],
	            select: {},
	            selectId: null
	        };
	    },
	    myScroll: null,
	    componentDidMount: function componentDidMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (p.myScroll) {
	            p.myScroll.refresh();
	        } else {
	            p.myScroll = new IScroll('#wrapperIcon', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        }
	    },

	    doShow: function doShow(IconList) {
	        if (IconList) {
	            console.log(IconList);
	        }

	        this.refs.win.setState({
	            show: true
	        });
	        this.setState({
	            IconList: IconList
	        });
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapperIcon', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },
	    goBack: function goBack() {
	        this.refs.win.setState({ show: false });
	    },
	    onSave: function onSave() {
	        var p = this;
	        var attr = p.state.select;
	        this.props.onSelect(attr);
	        this.goBack();
	    },
	    doChoose: function doChoose(select) {
	        //console.log(JSON.stringify(select));
	        if (select && select.hasOwnProperty("id") && select.hasOwnProperty("icon")) {
	            this.setState({
	                select: select
	            });
	        }
	    },
	    checkIcon: function checkIcon(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        var IconList = this.state.IconList;
	        var select = this.state.select;
	        for (var i = 0; i < IconList.length; i++) {
	            if (IconList[i].id == id) {
	                select.id = id;
	                select.icon = IconList[i].icon;
	                break;
	            }
	        }
	        this.setState({ select: select });
	    },
	    render: function render() {
	        var p = this;
	        var index = 0;

	        var list = this.state.IconList;
	        var t = 4 - list.length % 4;
	        if (t < 4) {
	            for (var i = 0; i < t; i++) {
	                var obj = { id: "", icon: "", name: "" };
	                list.push(obj);
	            }
	        }
	        var iconData = list.map(function (obj) {
	            var flag = false;
	            if (p.state.select.id == obj.id) {
	                flag = true;
	            }
	            return React.createElement(
	                'div',
	                { key: "key" + index++, className: flag ? " YS_BJ_TBS" : "YS_BJ_LBS ",
	                    style: { width: "20%", textAlign: "center", height: "5rem", display: "inline-block", whiteSpace: "nowrap", color: flag ? "white" : "#4b4a4e", marginLeft: "2.5%" },
	                    onClick: p.checkIcon, 'data-id': obj.id },
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "3rem", paddingTop: "0.5rem" } },
	                    React.createElement('i', { className: "iconfont " + "icon-" + obj.icon, style: { fontSize: "3rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "1.2rem ", marginTop: "0.5rem" } },
	                    obj.name
	                )
	            );
	        });
	        return React.createElement(
	            Select,
	            { ref: 'win', goBack: this.goBack, onClick: this.onSave, title: this.state.title ? this.state.title : "选择图标", h1: '70%', h2: '50%' },
	            React.createElement(
	                'div',
	                { id: 'wrapperIcon', style: { height: "100%" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto", width: "100%" } },
	                    iconData
	                )
	            )
	        );
	    }
	});

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by Administrator on 2016/8/5.
	 */
	'';

	var React = __webpack_require__(24);
	var Select = __webpack_require__(281);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            IconList: [],
	            select: [],
	            selectId: null
	        };
	    },
	    myScroll: null,
	    componentDidMount: function componentDidMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (p.myScroll) {
	            p.myScroll.refresh();
	        } else {
	            p.myScroll = new IScroll('#wrapperGroup', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        }
	    },

	    doShow: function doShow(IconList) {

	        this.refs.win.setState({
	            show: true
	        });
	        this.setState({
	            IconList: IconList
	        });
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapperGroup', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },
	    goBack: function goBack() {
	        this.refs.win.setState({ show: false });
	    },
	    onSave: function onSave() {
	        var p = this;
	        var attr = p.state.select;
	        this.props.onSelect(attr);
	        this.goBack();
	    },
	    checkIcon: function checkIcon(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        var select = this.state.select;
	        var selectNew = [];
	        var flag = 1;
	        for (var i = 0; i < select.length; i++) {
	            if (select[i] && select[i].id == id) {
	                flag = 0;
	            } else {
	                selectNew.push(select[i]);
	            }
	        }
	        var IconList = this.state.IconList;
	        if (flag) {
	            for (var j = 0; j < IconList.length; j++) {
	                if (IconList[j].id == id) {
	                    selectNew.push({ id: id, icon: IconList[j].icon, name: IconList[j].name });
	                    break;
	                }
	            }
	        }
	        this.setState({
	            select: selectNew
	        });
	    },
	    getSelect: function getSelect(select) {
	        this.setState({
	            select: select
	        });
	    },

	    render: function render() {
	        var p = this;
	        var list = this.state.IconList;
	        var t = 0;
	        if (list.length == 0) {
	            t = 4;
	        } else {
	            t = 4 - list.length % 4;
	        }

	        if (t < 4) {
	            for (var i = 0; i < t; i++) {
	                var obj = { id: "", icon: "", name: "" };
	                list.push(obj);
	            }
	        }
	        var iconData = list.map(function (obj, num) {
	            var flag = false;
	            var select = p.state.select;
	            for (var k = 0; k < select.length; k++) {
	                if (p.state.select[k].id == obj.id) {
	                    flag = true;
	                }
	            }
	            return React.createElement(
	                'div',
	                { key: "key" + num, className: flag ? " YS_BJ_TBS" : "YS_BJ_LBS ",
	                    style: { width: "20%", textAlign: "center", height: "5rem", display: "inline-block", whiteSpace: "nowrap", color: flag ? "white" : "#4b4a4e", marginLeft: "2.5%" },
	                    onClick: obj.id ? p.checkIcon : function () {}, 'data-id': obj.id },
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "3rem", paddingTop: "0.5rem" } },
	                    React.createElement('i', { className: "iconfont " + "icon-" + obj.icon, style: { fontSize: "3rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "1.2rem ", marginTop: "0.5rem" } },
	                    obj.name
	                )
	            );
	        });
	        return React.createElement(
	            Select,
	            { ref: 'win', goBack: this.goBack, onClick: this.onSave, title: this.props.title ? this.props.title : "选择图标", h1: '70%', h2: '50%' },
	            React.createElement(
	                'div',
	                { id: 'wrapperGroup', style: { height: "100%" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto", width: "100%" } },
	                    iconData
	                )
	            )
	        );
	    }
	});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by Administrator on 2016/8/5.
	 */
	'';

	var React = __webpack_require__(24);
	var Select = __webpack_require__(281);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            IconList: [],
	            select: [],
	            selectId: null
	        };
	    },
	    myScroll: null,
	    componentDidMount: function componentDidMount() {},
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (p.myScroll) {
	            p.myScroll.refresh();
	        } else {
	            p.myScroll = new IScroll('#wrapperType', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        }
	    },

	    doShow: function doShow(IconList) {
	        if (IconList) {
	            //console.log(IconList);
	        }

	        this.refs.win.setState({
	            show: true
	        });
	        this.setState({
	            IconList: IconList
	        });
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapperType', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },
	    goBack: function goBack() {
	        this.refs.win.setState({ show: false });
	    },
	    onSave: function onSave() {
	        var p = this;
	        var attr = p.state.select;
	        this.props.onSelect(attr);
	        this.goBack();
	    },
	    checkIcon: function checkIcon(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        var select = this.state.select;
	        var selectNew = [];
	        var flag = 1;
	        for (var i = 0; i < select.length; i++) {
	            if (select[i] && select[i].id == id) {
	                flag = 0;
	            } else {
	                selectNew.push(select[i]);
	            }
	        }
	        var IconList = this.state.IconList;
	        if (flag) {
	            for (var j = 0; j < IconList.length; j++) {
	                if (IconList[j].id == id) {
	                    selectNew.push({ id: id, icon: IconList[j].icon, name: IconList[j].name });
	                    break;
	                }
	            }
	        }
	        this.setState({
	            select: selectNew
	        });
	    },
	    render: function render() {
	        var p = this;
	        var list = this.state.IconList;
	        var t = 0;
	        if (list.length == 0) {
	            t = 4;
	        } else {
	            t = 4 - list.length % 4;
	        }

	        if (t < 4) {
	            for (var i = 0; i < t; i++) {
	                var obj = { id: "", icon: "", name: "" };
	                list.push(obj);
	            }
	        }
	        var iconData = list.map(function (obj, num) {
	            var flag = false;
	            var select = p.state.select;
	            for (var k = 0; k < select.length; k++) {
	                if (p.state.select[k].id == obj.id) {
	                    flag = true;
	                }
	            }
	            return React.createElement(
	                'div',
	                { key: "key" + num, className: flag ? " YS_BJ_TBS" : "YS_BJ_LBS ",
	                    style: { width: "20%", textAlign: "center", height: "5rem", display: "inline-block", whiteSpace: "nowrap", color: flag ? "white" : "#4b4a4e", marginLeft: "2.5%" },
	                    onClick: obj.id ? p.checkIcon : function () {}, 'data-id': obj.id },
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "3rem", paddingTop: "0.5rem" } },
	                    React.createElement('i', { className: "iconfont " + "icon-" + obj.icon, style: { fontSize: "3rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", height: "1.2rem ", marginTop: "0.5rem" } },
	                    obj.name
	                )
	            );
	        });
	        return React.createElement(
	            Select,
	            { ref: 'win', goBack: this.goBack, onClick: this.onSave, title: this.props.title ? this.props.title : "选择图标", h1: '70%', h2: '50%' },
	            React.createElement(
	                'div',
	                { id: 'wrapperType', style: { height: "100%" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto", width: "100%" } },
	                    iconData
	                )
	            )
	        );
	    }
	});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Created by caolinlin on 17/12/29.
	 */
	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var DevItem = __webpack_require__(258);
	var Ajax = __webpack_require__(244);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Msg = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: parseInt(this.props.params.id),
	            titleid: 1,
	            title: this.props.params.name,
	            devList: [],
	            alldeviceList: [],
	            role: -1
	        };
	    },
	    timeOutH: null,
	    myScroll: "",
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getConfigdata();
	        this.getUser(function (user) {
	            if (user) {
	                p.getDeviceListById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#groupList";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({ role: user.role });
	            }
	        }
	        cb(user);
	    },
	    getDeviceListById: function getDeviceListById(user) {
	        var p = this;
	        if (this.state.id == 0) {
	            if (user) {
	                Ajax("POST", "getNoGroupDeciceListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                    if (dt && dt.success) {
	                        p.setState({ devList: [] });
	                        p.setState({ devList: dt.data });
	                        if (!p.myScroll) {
	                            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                            document.addEventListener('touchmove', function () {}, false);
	                        } else {
	                            p.myScroll.refresh();
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                    }
	                });
	            }
	        } else {
	            Ajax("POST", "getDeviceListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt1) {
	                if (dt1 && dt1.success) {
	                    p.setState({ alldeviceList: dt1.data });
	                    Ajax("POST", "getDeviceListByGroupId", { id: p.state.id, userid: user.parentid, uid: user.userid, role: user.role }, function (dt2) {
	                        if (dt2 && dt2.success) {
	                            p.setState({ devList: dt2.data });
	                            if (!p.myScroll) {
	                                p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                                document.addEventListener('touchmove', function () {}, false);
	                            } else {
	                                p.myScroll.refresh();
	                            }
	                        } else {
	                            p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                        }
	                    });
	                }
	            });
	            Ajax("POST", "getGroupByGroupId", { id: this.state.id }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ title: dt.data[0].name });
	                }
	            });
	        }
	    },

	    goConfig: function goConfig() {
	        this.refs.configList.setState({ hover: true });
	    },
	    getConfigdata: function getConfigdata() {
	        var list = [{ iconfont: "icon-zhongmingming", text: "修改", type: "findeq", id: 1 }, { iconfont: "icon-shanchushebei", text: "删除此区", type: "delete", id: 3 }];
	        this.refs.configList.setState({ hover: false, data: list });
	    },
	    changeTitleid: function changeTitleid(id) {
	        console.log(id);
	        if (id == 1) {
	            location.href = "#updateGroupDev/" + this.state.id;
	        }
	        if (id == 3) {
	            this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个区域吗？" });
	        }
	    },
	    delGroup: function delGroup() {
	        Ajax("POST", "delByGroupId", { id: this.state.id }, function (dt) {
	            if (dt && dt.success) {
	                location.href = "#groupList";
	            }
	        });
	    },

	    showDevice: function showDevice(selectedDev) {
	        var p = this;
	        Ajax("POST", "addDevicelistToGroup", { groupid: this.state.id, deviceList: selectedDev }, function (dt) {
	            // console.log("dt : " + JSON.stringify(dt));
	            if (dt.success) {
	                setTimeout(function () {
	                    p.getDeviceListById();
	                }, 500);
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 2000 });
	            }
	        });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol(id, ddcId) {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": id,
	            "ddcId": ddcId,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        console.log("cmdStr : " + cmdStr);
	        Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 2000});
	            }
	        });
	    },
	    itemClick: function itemClick(obj, str) {
	        var p = this;
	        var attr = JSON.parse(obj.attributes);
	        var devList = this.state.devList;
	        for (var i = 0; i < devList.length; i++) {
	            if (devList[i].id == obj.id) {
	                for (var o in str) {
	                    var att = JSON.parse(devList[i].attributes);
	                    att[o] = str[o];
	                    devList[i].attributes = JSON.stringify(att);
	                    this.setState({ devList: devList });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    }
	                }
	            }
	        }

	        if (this.isLive(attr, obj)) {
	            var cmdStr = this.cmd_protocol(obj.macid, obj.ddcmac);
	            cmdStr.attributes = str;
	            if (attr.hasOwnProperty("GRP") && attr.GRP != "00" && obj.macid == "0000000000000000") {
	                cmdStr.attributes["GRP"] = attr.GRP;
	                cmdStr.attributes["TYP"] = attr.TYP;
	            } else {
	                if (attr.hasOwnProperty("NAM") && attr.NAM && attr.NAM != obj.macid) {
	                    cmdStr.attributes["NAM"] = attr.NAM;
	                }
	            }
	            this.cmd(JSON.stringify(cmdStr));
	        } else {
	            this.refs.msg.setState({ show: true, type: "text", word: "设备不在线", timeout: 500 });
	        }
	    },
	    goBack: function goBack() {
	        location.href = "/#groupList";
	    },

	    isLive: function isLive(attr, obj) {
	        /*   return !attr.hasOwnProperty("LIVE") && attr.LIVE=="ON" ? 1:obj.online;*/
	        //  return 1;
	        if (attr && attr.hasOwnProperty("LIVE") && attr.LIVE == "ON") {
	            return 1;
	        } else {
	            return 0;
	        }
	    },
	    getNewName: function getNewName(name) {},
	    doTag: function doTag() {
	        global.groupDevTag = 2;
	        if (this.myScroll) {
	            global.groupDevScrollTop = this.myScroll.y;
	        }
	    },
	    rightClick: function rightClick() {
	        console.log("rightClick");
	        this.refs.configList.setState({ hover: true });
	    },

	    goDetail: function goDetail(link, id) {
	        //global.homeTag=2;
	        //global.scrollTop=this.myScroll.y;
	        location.href = "#" + link + "/" + id + "?f=2";
	    },

	    render: function render() {
	        var p = this;
	        var devData = "";
	        var d = 0;
	        if (this.state.devList.length > 0) {
	            devData = this.state.devList.map(function (obj) {
	                var attr = JSON.parse(obj.attributes);
	                var t = obj.type;
	                if (t == 15) {
	                    var obj15 = {};
	                    if (attr.titleid == 2) {
	                        if (attr.hasOwnProperty("TUN")) {
	                            if (attr.TUN == "OPEN") {
	                                obj15["TUN"] = "CLOSE";
	                            } else {
	                                obj15["TUN"] = "OPEN";
	                                obj15["STP"] = attr.STP;
	                                obj15["SMD"] = attr.SMD;
	                                obj15["SSP"] = attr.SSP;
	                            }
	                        }
	                    } else if (attr.titleid == 4) {
	                        if (attr.hasOwnProperty("SW1")) {
	                            if (attr.SW1 = "ON") {
	                                obj15["SW1"] = "OFF";
	                                obj15["SW2"] = "ON";
	                            } else {
	                                obj15["SW2"] = "OFF";
	                                obj15["SW1"] = "ON";
	                            }
	                        }
	                    }
	                }
	                // 判断是否有这类设备
	                if (t == 1 || t == 14 || t == 26 || t == 27) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0 })
	                    );
	                } else if (t == 13 && attr.hasOwnProperty("titleid") && attr.titleid != 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname,
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0, type: '1' })
	                    );
	                } else if (t == 13 && attr.hasOwnProperty("titleid") && attr.titleid == 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, info: attr.hasOwnProperty("TUN") && attr.TUN == "OPEN" ? "地暖已开启" : "地暖已关闭" })
	                    );
	                } else if (t == 5 || t == 6 || t == 17) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "WIN": attr.hasOwnProperty("WIN") && attr.WIN == "OPEN" ? "CLOSE" : "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: attr.hasOwnProperty("WIN") && attr.WIN == "OPEN" ? 1 : 0 })
	                    );
	                } else if (t == 11 || t == 28) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "LCK": "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: false })
	                    );
	                } else if (t == 7 || t == 20 || t == 21) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, info: attr.hasOwnProperty("PIR") && attr.PIR == "YES" ? "有人经过" : "无人经过" })
	                    );
	                } else if (t == 8 || t == 18) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "LCK": "OPEN" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: false
	                        })
	                    );
	                } else if (t == 9 || t == 25) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, info: attr.hasOwnProperty("TEM") && attr.hasOwnProperty("HUM") ? attr.TEM + "℃/" + attr.HUM + "%" : "℃/%"
	                        })
	                    );
	                } else if (t == 10) {
	                    var info = "门关闭";
	                    if (attr.hasOwnProperty("DOR")) {
	                        if (attr.DOR == "OPEN") {
	                            info = "门打开";
	                        } else {
	                            info = "门关闭";
	                        }
	                    } else {
	                        info = "未触发状态";
	                    }
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, info: info })
	                    );
	                } else if (t == 23 || t == 35) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, { "SWI": attr.hasOwnProperty("AIF") && attr.AIF.substr(0, 1) == 1 ? "OFF" : "ON" });
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: attr.hasOwnProperty("TIP") ? attr.hasOwnProperty("SWI") && attr.SWI == "ON" ? 1 : 0 : attr.hasOwnProperty("AIF") && attr.AIF.substr(0, 1) == 1 ? 1 : 0
	                        })
	                    );
	                } else if (t == 24) {
	                    // 溢水传感器
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '2',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, info: attr.hasOwnProperty("WAT") && attr.WAT == "YES" ? "已溢水" : "水位正常" })
	                    );
	                } else if (t == 15 && !attr.hasOwnProperty("titleid")) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 2) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, type: '1',
	                            doSwitch: function () {
	                                p.itemClick(obj, obj15);
	                            },
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            },
	                            commonuse: obj.commonuse, alias: obj.alias, isOpen: attr.hasOwnProperty("TUN") && attr.TUN == "OPEN" ? 1 : 0 })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 3) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else if (t == 15 && attr.hasOwnProperty("titleid") && attr.titleid == 4) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else if (t == 2 || t == 3 || t == 4 || t == 12 || t == 16 || t == 19 || t == 22 || t == 29 || t == 31) {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                } else {
	                    return React.createElement(
	                        'div',
	                        { key: 't_' + ++d },
	                        React.createElement(DevItem, { color: "TB" + ((d - 1) % 6 + 1), name: obj.name, icon: obj.dicon, isnew: obj.isnew, ddcname: obj.ddcname, commonuse: obj.commonuse, alias: obj.alias, type: '3',
	                            gotoDetail: function () {
	                                p.goDetail(obj.link, obj.id);
	                            }
	                        })
	                    );
	                }
	            });
	        }
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: this.state.title, leftIcon: 'xiaojiantou2', rightIcon: this.state.role == 1 || this.state.id == 0 ? "" : "zhanghaoshezhi", leftClick: this.goBack, rightClick: this.state.role == 1 || this.state.id == 0 ? function () {} : this.rightClick }),
	            React.createElement(
	                'div',
	                { style: { height: "100%", marginTop: "4rem", paddingBottom: "4rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        devData,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'rename', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delGroup }),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/25.
	 */

	'';

	var React = __webpack_require__(24);
	var ConfigLabel = __webpack_require__(288);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            hover: false,
	            data: [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }, { iconfont: "icon-peizhi", text: "类型选择", type: "type", id: 9 }]
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        this.getConfigData();
	    },
	    getConfigData: function getConfigData() {
	        if (this.props.data) {
	            this.setState({
	                data: this.props.data
	            });
	        }
	    },
	    configWay: function configWay(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute('data-id');
	        if (p.props.onchange) {
	            p.props.onchange(parseInt(id));
	        }
	    },
	    hide: function hide() {
	        var p = this;
	        p.setState({ hover: false });
	    },
	    render: function render() {
	        var p = this;

	        var configData = [];
	        if (this.state.data.length > 0) {
	            configData = this.state.data.map(function (obj, num) {
	                if (num == p.state.data.length - 1) {
	                    return React.createElement(ConfigLabel, { key: "t_" + num, icon: obj.iconfont, color: 'black', text: obj.text, onClick: p.configWay, 'data-id': obj.id, bt: 'last' });
	                } else {
	                    return React.createElement(ConfigLabel, { key: "t_" + num, icon: obj.iconfont, color: 'black', text: obj.text, onClick: p.configWay, 'data-id': obj.id });
	                }
	            });
	        }
	        return React.createElement(
	            'div',
	            { className: this.state.hover ? " W_b " : "W_b BJ_DW_YC", onClick: this.hide },
	            React.createElement(
	                'ul',
	                { className: this.state.hover ? " config-list-size " : " BJ_DW_YC " },
	                configData,
	                React.createElement('span', { className: 'trigle' })
	            )
	        );
	    }
	});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/25.
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            hover: false
	        };
	    },
	    hover: function hover(e) {
	        this.setState({
	            hover: true
	        });
	    },
	    unhover: function unhover(e) {
	        this.setState({
	            hover: false
	        });
	    },
	    render: function render() {
	        var p = this;

	        return React.createElement(
	            "li",
	            { key: this.props.key ? this.props.key : "", className: " configLab-size " + (this.props["bt"] ? " last-bt " : " "),
	                onClick: this.props.onClick ? this.props.onClick : "",
	                "data-type": this.props["data-type"] ? this.props["data-type"] : "",
	                "data-id": this.props["data-id"] ? this.props["data-id"] : "" },
	            React.createElement("i", { style: { fontSize: "1.8rem" }, className: (this.state.hover ? " activeWordBlue " : "") + " iconfont " + (this.props["color"] ? this.props["color"] : " deep_gray ") + " listIcon " + (this.props["icon"] ? this.props["icon"] : " "),
	                onTouchStart: this.hover,
	                onTouchMove: this.unhover,
	                onTouchEnd: this.unhover
	            }),
	            React.createElement(
	                "div",
	                { className: " config-font " + " listlab " + (this.props["color"] ? this.props["color"] : " deep_gray ") + (this.state.hover ? " activeWordBlue " : ""),
	                    onTouchStart: this.hover,
	                    onTouchMove: this.unhover,
	                    onTouchEnd: this.unhover
	                },
	                this.props["text"]
	            )
	        );
	    }
	});

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/4.
	 */
	'';

	var React = __webpack_require__(24);
	var SwitchBtn = __webpack_require__(259);
	var Nav = __webpack_require__(266);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Msg = __webpack_require__(250);
	var Label = __webpack_require__(290);
	var Slider = __webpack_require__(291);
	var Connect = __webpack_require__(292);
	var ConfigList = __webpack_require__(287);
	var Loading = __webpack_require__(271);
	var Ajax = __webpack_require__(244);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "调光灯",
	            attributes: null,
	            macid: null,
	            ddcmac: null,
	            startCTM: 0,
	            startLEV: 0,
	            type: null, // 1: 数据库中的类型id
	            typ: null, // LT-CTM : 设备上报类型
	            SAV: "",
	            SWI: "",
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ attributes: attributes });
	                p.setState({ title: data[0].name });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.configdata(data[0].macid);

	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	                if (attributes.hasOwnProperty("SAV")) {
	                    p.setState({ SAV: attributes.SAV });
	                }
	                if (attributes.hasOwnProperty("SWI")) {
	                    if (attributes.SWI == "ON") {
	                        p.setState({ SWI: "ON" });
	                    } else {
	                        p.setState({ SWI: "OFF" });
	                    }
	                }
	                if (attributes.hasOwnProperty("LEV")) {
	                    p.refs.lev.setValue(attributes.LEV);
	                    p.setState({ startLEV: attributes.LEV });
	                }
	                if (attributes.hasOwnProperty("CTM")) {
	                    p.refs.ctm.setValue(attributes.CTM);
	                    p.setState({ startCTM: attributes.CTM });
	                }
	            } catch (e) {
	                console.log(e);
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            // console.log(" dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    doSwitch: function doSwitch() {
	        var p = this;
	        var SWI = this.state.SWI;
	        var cmdObj = this.cmd_protocol();
	        if (SWI == "ON") {
	            p.setState({ SWI: "OFF" });
	            cmdObj.attributes["SWI"] = "OFF";
	        } else {
	            p.setState({ SWI: "ON" });
	            cmdObj.attributes["SWI"] = "ON";
	        }
	        this.cmd(cmdObj, function (flag) {});
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (v) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (v) {
	                var user = p.state.user;
	                p.getDataById(user); // 不管是否成功,都要刷新
	            });
	        } else {
	                this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	            }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {

	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    setLEV: function setLEV(v) {
	        var t = v;
	        var p = this;
	        if (t != this.state.startLEV && this.state.startLEV != null) {
	            if (this.state.SWI == "ON") {
	                var cmdObj = this.cmd_protocol();
	                cmdObj.attributes["LEV"] = t;
	                this.cmd(cmdObj, function (s) {
	                    if (s) {
	                        this.setState({ startLEV: t });
	                    } else {
	                        p.refs.lev.setValue(p.state.startLEV);
	                    }
	                });
	            } else {
	                if (this.state.SWI == "OFF") {
	                    p.refs.lev.setValue(p.state.startLEV);
	                    p.refs.msg.setState({ show: true, word: "请开启设备", timeout: 1500 });
	                }
	            }
	        }
	    },
	    setCTM: function setCTM(v) {
	        var p = this;
	        var t = v;
	        if (t != this.state.startCTM && this.state.startCTM != null) {
	            if (this.state.SWI == "ON") {
	                var cmdObj = this.cmd_protocol();
	                cmdObj.attributes["CTM"] = t;
	                this.cmd(cmdObj, function (s) {
	                    if (s) {
	                        this.setState({ startCTM: t });
	                    } else {
	                        p.refs.ctm.setValue(p.state.startCTM);
	                    }
	                });
	            } else {
	                if (this.state.SWI == "OFF") {
	                    p.refs.ctm.setValue(p.state.startCTM);
	                    p.refs.msg.setState({ show: true, word: "请开启设备", timeout: 1500 });
	                }
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/ltctm.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { title: '当前亮度', value: this.state.startLEV }),
	                React.createElement(Label, { title: '当前色温', value: this.state.startCTM }),
	                React.createElement(Label, { title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.SWI == "ON" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { marginTop: "8rem" } },
	                    React.createElement(Slider, { min: '1', start: this.state.startLEV, ref: 'lev', onchange: this.setLEV }),
	                    React.createElement(
	                        'div',
	                        { className: 'FS13', style: { width: "90%", marginLeft: "5%", color: "#b3abcc" } },
	                        React.createElement(
	                            'div',
	                            { style: { float: "left" } },
	                            "暗光"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right" } },
	                            "亮光"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { marginTop: "8rem" } },
	                    React.createElement(Slider, { start: this.state.startCTM, ref: 'ctm', onchange: this.setCTM }),
	                    React.createElement(
	                        'div',
	                        { className: 'FS13', style: { width: "90%", marginLeft: "5%", color: "#b3abcc" } },
	                        React.createElement(
	                            'div',
	                            { style: { float: "left" } },
	                            "冷光"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right" } },
	                            "暖光"
	                        )
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/9.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;

	        var count = this.props.count;
	        var w_ = "33.33%";
	        if (count == 1) {
	            w_ = "100%";
	        } else if (count == 2) {
	            w_ = "50%";
	        } else if (count == 3) {
	            w_ = "33.33%";
	        } else if (count == 4) {
	            w_ = "25%";
	        }

	        return React.createElement(
	            "div",
	            { className: "LA_item", style: { width: w_ } },
	            React.createElement(
	                "li",
	                { className: " li1 " },
	                this.props.title
	            ),
	            React.createElement(
	                "li",
	                { className: " li2 " },
	                this.props.value
	            )
	        );
	    }
	});

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/10.
	 *
	 *    Slider :
	 *
	 *
	 *
	 *    eg: <Slider   title="亮度调整" unit=" " min={0} max={100} start={50}  ref="ldtj"/>
	 *
	 *
	 **/
	'';

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            value: 0
	        };
	    },

	    noUiSlider: null,

	    componentDidMount: function componentDidMount() {
	        var _this = this;

	        var p = this;
	        var target = this.refs.rangeDom;

	        var min = this.props.min ? this.props.min : 0;
	        var max = this.props.max ? this.props.max : 100;
	        var start = this.props.start ? [this.props.start] : [min];

	        this.noUiSlider = noUiSlider.create(target, {
	            start: start,
	            tooltips: true,
	            range: {
	                'min': parseInt(min),
	                'max': parseInt(max)
	            },
	            format: {
	                to: function to(value) {
	                    return parseInt(value);
	                },
	                from: function from(value) {
	                    return value;
	                }
	            }
	        });

	        target.noUiSlider.on('change', function (v, handle) {
	            if (_this.props.onchange) {
	                _this.props.onchange(parseInt(v));
	            }
	        });
	    },

	    setValue: function setValue(value) {
	        this.noUiSlider.set(value);
	    },

	    componentDidUpdate: function componentDidUpdate() {
	        //this.noUiSlider.set(this.props.start);
	    },

	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'range-container ' },
	            React.createElement('div', { className: " range-el range-single scolor", style: { width: "80%", margin: "0 auto" }, ref: 'rangeDom' }),
	            React.createElement('div', { className: 'BJ_DW_QC range-bottom' })
	        );
	    }
	});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/16.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "conK" },
	            React.createElement(
	                "div",
	                { style: { width: "100%" } },
	                React.createElement("div", { className: "conCycleLeft" }),
	                React.createElement("div", { className: "conCycleRight" })
	            ),
	            React.createElement(
	                "div",
	                { style: { position: "absolute", zIndex: "2", width: "100%" } },
	                React.createElement("img", { src: "images/main/connect.png", style: { float: "left", marginLeft: "5rem", height: "4rem" } }),
	                React.createElement("img", { src: "images/main/connect.png", style: { float: "right", marginRight: "5rem", height: "4rem" } })
	            ),
	            React.createElement(
	                "div",
	                { style: { width: "100%", marginTop: "3rem" } },
	                React.createElement("div", { className: "conCycleLeft" }),
	                React.createElement("div", { className: "conCycleRight" })
	            )
	        );
	    }
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/10.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var CurtainBtn = __webpack_require__(294);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var ConfigList = __webpack_require__(287);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "窗帘",
	            WIN: "OPEN"
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        //  console.log("deviceid : " + this.state.deviceid);
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(deviceid, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: deviceid, userid: user.parentid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(attributes);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });
	            if (attributes.hasOwnProperty("WIN")) {
	                p.setState({
	                    WIN: attributes.WIN
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            }
	            if (attributes.hasOwnProperty("LEV")) {
	                p.setState({
	                    startValue: attributes.LEV
	                });
	            } else {
	                p.setState({ startValue: 0 });
	            }
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }
	        }

	        p.setState({ title: data[0].name });
	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ type: data[0].type });
	        if (data[0].macid == "0000000000000000") {
	            var configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            var configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ data: configdata1 });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            if (this.state.type == 5) {
	                cmdObj.attributes["TYP"] = "WD-RXJ";
	            }
	            if (this.state.type == 6) {
	                cmdObj.attributes["TYP"] = "WD-DYK";
	            }
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {

	        this.refs.configList.setState({ hover: true });
	    },

	    doClick: function doClick(e) {
	        var p = this;
	        var str = e.currentTarget.getAttribute("data-id");
	        console.log("str : " + str);
	        this.setState({ WIN: str });
	        var cmdobj = this.cmd_protocol();
	        cmdobj.attributes["WIN"] = str;
	        this.cmd(cmdobj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({ show: true, word: "控制失败", timeout: 1500 });
	            }
	        });
	    },
	    getLev: function getLev(t) {
	        var p = this;
	        console.log(t);
	        var cmdobj = this.cmd_protocol();
	        cmdobj.attributes["LEV"] = t;
	        this.cmd(cmdobj, function (s) {
	            if (s) {
	                p.setState({
	                    startValue: t
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "控制失败", timeout: 1500 });
	            }
	        });
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                if (!s) {
	                    p.refs.msg.setState({
	                        show: true,
	                        word: "网关不在线",
	                        timeout: 1500
	                    });
	                }
	            });
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({
	                    show: true,
	                    word: "网关不在线",
	                    timeout: 1500
	                });
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/wdrxj.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '开启程度', value: this.state.startValue }),
	                React.createElement(Label, { count: '2', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "19rem", width: "80%", marginLeft: "10%" } },
	                    React.createElement(CurtainBtn, { text: '打开', icon: 'dakai', flag: p.state.WIN == "OPEN" ? 1 : 0, 'data-id': 'OPEN', onClick: p.doClick }),
	                    React.createElement(CurtainBtn, { text: '暂停', icon: 'zanting', flag: p.state.WIN == "STOP" ? 1 : 0, 'data-id': 'STOP', onClick: p.doClick }),
	                    React.createElement(CurtainBtn, { text: '关闭', icon: 'bihe', flag: p.state.WIN == "CLOSE" ? 1 : 0, 'data-id': 'CLOSE', onClick: p.doClick })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { marginTop: "4rem" } },
	                    React.createElement(Slider, { min: '0', max: '100', onchange: this.getLev }),
	                    React.createElement(
	                        'div',
	                        { className: 'FS13', style: { width: "90%", marginLeft: "5%", color: "#b3abcc" } },
	                        React.createElement(
	                            'div',
	                            { style: { float: "left" } },
	                            "开启程度"
	                        )
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { data: this.state.data, onchange: this.changeTitleid, ref: 'configList' }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/11.
	 *
	 * footer
	 *
	 *         height : 高度
	 *          width : 宽度
	 *
	 *     eg:  <Footer viewTab = "1"/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "wdrxjBtn", style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                "div",
	                { className: " btn_w " + (p.props.flag ? " YS_BJ_TBS  " : " YS_BJ_WFS "),
	                    "data-id": this.props["data-id"] ? this.props["data-id"] : "", onClick: p.props.onClick ? p.props.onClick : "" },
	                React.createElement("i", { className: "iconfont icon-" + (p.props.icon ? p.props.icon : ""), style: { fontSize: "3.5rem" } })
	            ),
	            React.createElement(
	                "div",
	                { className: " text_w " + (p.props.flag ? "TBS" : "WFS") },
	                this.props.text
	            ),
	            this.props.children
	        );
	    }
	});

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/11.
	 */

	'';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var Ajax = __webpack_require__(244);
	var CurtainBtn = __webpack_require__(294);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "按键开关",
	            WIN: "OPEN",
	            count: 0,
	            attributes: {},
	            alias: "",
	            tip: [0, 0, 0, 0, 0, 0], // 每位上分别表示 1:开 0:关 (因为最多有6个键)

	            status: false,
	            macid: "",
	            ddcmac: "",
	            type: "",
	            typ: "", // 就是 devicetype 表中对应该 typ
	            SAV: "",
	            LIVE: "ON",

	            areagroupId: 0,
	            commonuse: -1,
	            theme: "",
	            typelist: [],
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ title: data[0].name });
	                p.setState({ attributes: attributes });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ SAV: attributes.SAV });
	                p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	                p.configdata(data[0].macid);
	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }

	                var count = 0;
	                switch (data[0].type) {
	                    case 19:
	                        count = 1;break;
	                    case 2:
	                        count = 2;break;
	                    case 3:
	                        count = 3;break;
	                    case 4:
	                        count = 4;break;
	                    case 22:
	                        count = 5;break;
	                    case 33:
	                        count = 6;break;
	                    default:
	                        count = 4;break;
	                }
	                p.setState({ count: count });

	                if (attributes.hasOwnProperty("SWI")) {
	                    var sixteen = attributes.SWI;
	                    var ten = parseInt(sixteen, 16);
	                    var str = "00000" + ten.toString(2);
	                    var string = str.substring(str.length - 6);
	                    var tip = p.state.tip;
	                    for (var i = 0; i < 6; i++) {
	                        var m = i + 1;
	                        var n = string.substr(string.length - m, 1);
	                        tip[i] = parseInt(n);
	                    }
	                    p.setState({ tip: tip });
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doSwitch: function doSwitch(t) {
	        var p = this;
	        var m = t - 1;
	        var tip = this.state.tip;
	        var SWI = "";
	        if (tip[m] == 1) {
	            tip[m] = 0;
	            SWI = "OFF";
	        } else {
	            tip[m] = 1;
	            SWI = "ON";
	        }
	        this.setState({ tip: tip });
	        this.sendCmd(t, SWI);
	    },
	    sendCmd: function sendCmd(t, SWI) {
	        var cmdStr = this.cmd_protocol();
	        var SW = "SW" + t;
	        cmdStr.attributes = _defineProperty({}, SW, SWI);
	        this.cmd(cmdStr);
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        var count = p.state.count;
	        var list = [];
	        for (var i = 0; i < count; i++) {
	            list.push(i);
	        }
	        var data = "";
	        var t = 0;
	        if (list.length > 0) {
	            data = list.map(function (i) {
	                var str = "";
	                var d = i + 1;
	                switch (d) {
	                    case 1:
	                        str = "一";break;
	                    case 2:
	                        str = "二";break;
	                    case 3:
	                        str = "三";break;
	                    case 4:
	                        str = "四";break;
	                    case 5:
	                        str = "五";break;
	                    case 6:
	                        str = "六";break;
	                }
	                return React.createElement(
	                    'div',
	                    { key: "t_" + ++t },
	                    React.createElement(
	                        'div',
	                        { style: { clear: "both", height: "4rem", lineHeight: "4rem", width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { float: "left", marginLeft: "2rem", color: "#b3abcc" } },
	                            str + "键"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right", marginTop: "1rem", marginRight: "2rem" } },
	                            React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: p.state.tip[i], doSwitch: p.doSwitch })
	                        )
	                    ),
	                    React.createElement('div', { className: 'itemLine', style: { clear: "both", width: "90%", marginLeft: "5%" } })
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/swtk.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '1', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { className: 'itemLine', style: { clear: "both", marginTop: "3rem", width: "90%", marginLeft: "5%" } }),
	                data
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/11.
	 */

	'';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Ajax = __webpack_require__(244);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "按键开关",
	            WIN: "OPEN",
	            count: 0,
	            attributes: {},
	            alias: "",
	            status: false,
	            macid: "",
	            ddcmac: "",
	            type: "",
	            typ: "", // 就是 devicetype 表中对应该 typ
	            SAV: "",
	            LIVE: "ON",
	            RL1: "",
	            RL2: "",
	            areagroupId: 0,
	            commonuse: -1,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ title: data[0].name });
	                p.setState({ attributes: attributes });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ SAV: attributes.SAV });
	                p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	                p.configdata(data[0].macid);
	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	                p.setState({ count: 2 });
	                if (attributes.hasOwnProperty("RL1")) {
	                    p.setState({
	                        RL1: attributes.RL1
	                    });
	                }
	                if (attributes.hasOwnProperty("RL2")) {
	                    p.setState({
	                        RL2: attributes.RL2
	                    });
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr, cb) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                // p.refs.msg.setState({show: true, word: dt.msg, timeout: 800});
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doSwitchRL1: function doSwitchRL1(s) {
	        var p = this;
	        var RL1 = this.state.RL1;
	        var RL1new = "";
	        if (RL1 && RL1 == "OFF") {
	            this.setState({
	                RL1: "ON"
	            });
	            RL1new = "ON";
	        } else {
	            this.setState({
	                RL1: "OFF"
	            });
	            RL1new = "OFF";
	        }
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["RL1"] = RL1new;
	        this.cmd(cmdObj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({
	                    show: true,
	                    word: "控制失败",
	                    timeout: 1500
	                });
	                p.setState({
	                    RL1: RL1
	                });
	            }
	        });
	    },
	    doSwitchRL2: function doSwitchRL2(s) {
	        var p = this;
	        var RL2 = this.state.RL2;
	        var RL2new = "";
	        if (RL2 && RL2 == "OFF") {
	            this.setState({
	                RL2: "ON"
	            });
	            RL2new = "ON";
	        } else {
	            this.setState({
	                RL2: "OFF"
	            });
	            RL2new = "OFF";
	        }
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["RL2"] = RL2new;
	        this.cmd(cmdObj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({
	                    show: true,
	                    word: "控制失败",
	                    timeout: 1500
	                });
	                p.setState({
	                    RL2: RL2
	                });
	            }
	        });
	    },
	    sendCmd: function sendCmd(t, operation) {
	        var cmdStr = this.cmd_protocol();
	        var RL = "RL" + t;
	        cmdStr.attributes = _defineProperty({}, RL, operation);
	        this.cmd(cmdStr);
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                if (!s) {
	                    p.refs.msg.setState({
	                        show: true,
	                        word: "网关不在线",
	                        timeout: 1500
	                    });
	                }
	            });
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({
	                    show: true,
	                    word: "网关不在线",
	                    timeout: 1500
	                });
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/swtk.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '1', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { className: 'itemLine', style: { clear: "both", marginTop: "3rem", width: "90%", marginLeft: "5%" } }),
	                React.createElement(
	                    'div',
	                    null,
	                    React.createElement(
	                        'div',
	                        { style: { clear: "both", height: "4rem", lineHeight: "4rem", width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { float: "left", marginLeft: "2rem", color: "#b3abcc" } },
	                            "一路"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right", marginTop: "1rem", marginRight: "2rem" } },
	                            React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: p.state.RL1 == "ON" ? 1 : 0, doSwitch: p.doSwitchRL1 })
	                        )
	                    ),
	                    React.createElement('div', { className: 'itemLine', style: { clear: "both", width: "90%", marginLeft: "5%" } })
	                ),
	                React.createElement(
	                    'div',
	                    null,
	                    React.createElement(
	                        'div',
	                        { style: { clear: "both", height: "4rem", lineHeight: "4rem", width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { float: "left", marginLeft: "2rem", color: "#b3abcc" } },
	                            "一路"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right", marginTop: "1rem", marginRight: "2rem" } },
	                            React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: p.state.RL2 == "ON" ? 1 : 0, doSwitch: p.doSwitchRL2 })
	                        )
	                    ),
	                    React.createElement('div', { className: 'itemLine', style: { clear: "both", width: "90%", marginLeft: "5%" } })
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/16.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var MsgWin = __webpack_require__(250);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "一路地暖",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: null,
	            typ: null,
	            SAV: "",
	            LIVE: "ON",
	            TUN: "OFF",
	            STP: "26",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    getDataById: function getDataById(deviceid, user) {
	        var p = this;
	        if (user && deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },

	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ title: data[0].name });
	                p.setState({
	                    attributes: attributes,
	                    macid: data[0].macid,
	                    ddcmac: data[0].ddcmac,
	                    type: data[0].type,
	                    typ: data[0].typ,
	                    SAV: attributes.SAV,
	                    SWI: attributes.SWI,
	                    LIVE: data[0].online ? "ON" : "OFF"
	                });
	                p.configdata(data[0].macid);

	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },
	    doClick: function doClick(e) {
	        var str = e.currentTarget.getAttribute("data-id");
	        console.log("str : " + str);
	        this.setState({ WIN: str });
	    },
	    doSwitch: function doSwitch() {
	        var p = this;
	        if (p.state.TUN == "OPEN") {
	            p.setState({ TUN: "CLOSE" });
	        } else {
	            p.setState({ TUN: "OPEN" });
	        }
	    },

	    /*升温*/
	    add: function add() {
	        if (this.state.TUN == "OPEN") {
	            //  console.log(this.state.STP);
	            var t = parseInt(this.state.STP);
	            if (!t) {
	                this.setState({ STP: 26 });
	                //this.sendTemp(26);
	            } else {
	                    if (t && t < 32) {
	                        // 温度不能超过 32 度
	                        t = t + 1;
	                        this.setState({ STP: t });
	                        //this.sendTemp(t);
	                    } else {
	                            this.refs.msg.setState({ show: true, word: "已达上限", timeout: 1500 });
	                        }
	                }
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },
	    /*降温*/
	    cut: function cut() {
	        if (this.state.TUN == "OPEN") {
	            var t = parseInt(this.state.STP);
	            if (!t) {
	                this.setState({ STP: 24 });
	                //this.sendTemp(24);
	            } else {
	                    if (t > 19) {
	                        // 温度不能低于 18 度
	                        t = t - 1;
	                        this.setState({ STP: t });
	                        //this.sendTemp(t);
	                    } else {
	                            this.refs.msg.setState({ show: true, word: "已达下限", timeout: 1500 });
	                        }
	                }
	            //console.log("temp : " + t);
	        } else {
	                this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	            }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var deviceId = p.state.device;
	                var user = p.state.user;
	                p.getDataById(deviceId, user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/warm.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '温度', value: p.state.STP }),
	                React.createElement(Label, { count: '2', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.TUN == "OPEN" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk' },
	                    React.createElement('img', { src: '../images/main/dial.png', className: 'clrl6Img' }),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Wd' },
	                        "温度"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Text' },
	                        React.createElement(
	                            'div',
	                            { className: 'FS24', style: { width: "62%", float: "left", textAlign: "right", fontSize: "3.5rem" } },
	                            p.state.STP
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { lineHeight: "5rem", textIndent: "0.1em", width: "38%", float: "left", textAlign: "left", fontSize: "1.5rem" } },
	                            "℃"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FY', style: { marginRight: "3.5rem" }, onClick: p.cut },
	                            "-"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FZ', style: { marginLeft: "3.5rem" }, onClick: p.add },
	                            "+"
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/15.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            select: 3,
	            name: "自动",
	            left: ["14rem", "7rem", "0"]
	        };
	    },

	    componentDidMount: function componentDidMount() {},
	    doSelect: function doSelect(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id) {
	            if (p.props.doChange) {
	                p.props.doChange(id);
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "SS_k", style: this.props.style ? this.props.style : {} },
	            React.createElement("div", { className: "SS_textS", style: { left: p.state.left[parseInt(p.state.select) - 1] } }),
	            React.createElement(
	                "div",
	                { className: "SS_textT" },
	                React.createElement(
	                    "div",
	                    { className: " SS_text ", "data-id": "3", "data-name": "小", onClick: p.doSelect },
	                    "小"
	                ),
	                React.createElement(
	                    "div",
	                    { className: "SS_text ", "data-id": "2", "data-name": "中", onClick: p.doSelect },
	                    "中"
	                ),
	                React.createElement(
	                    "div",
	                    { className: "SS_text ", "data-id": "1", "data-name": "大", onClick: p.doSelect },
	                    "大"
	                )
	            ),
	            this.props.children
	        );
	    }
	});
	/*
	<div className={" SS_text "} data-id="1" data-name="自动" onClick={p.doSelect}>
	{"自动"}
	</div>
	*/

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/13.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var MsgWin = __webpack_require__(250);
	var ConfigList = __webpack_require__(287);
	var OperatingListWin = __webpack_require__(263);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var InputSelect = __webpack_require__(280);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id ? this.props.params.id : 0,
	            f: Url.getParameterByName("f"),
	            title: "空调",
	            titleid: 1,
	            attributes: null,
	            type: null,
	            typ: null,
	            SMD: "HOT",
	            TUN: "OFF",
	            STP: "26",
	            SSP: "LOW",
	            speed: ["小风", "中风", "大风"],
	            sIndex: 1,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({ SAV: attributes.SAV });
	            }
	            p.setState({ attributes: attributes });
	            p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	            p.setState({ type: data[0].type });
	            p.setState({ typ: data[0].typ });
	            p.setState({ title: data[0].name });
	            p.setState({ macid: data[0].macid });
	            p.configdata(data[0].macid);
	        } catch (e) {
	            console.log(e);
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata = null;
	        if (macid == "0000000000000000") {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-peizhi", text: "类型选择", type: "type", id: 9 }];
	        } else {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }, { iconfont: "icon-peizhi", text: "类型选择", type: "type", id: 9 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            // console.log(" dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    doSwitch: function doSwitch() {
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        if (p.state.TUN == "OPEN") {
	            cmdStr.attributes["TUN"] = "CLOSE";
	            p.setState({ TUN: "CLOSE" });
	            p.cmd(cmdStr, function (s) {});
	        } else {
	            cmdStr.attributes["TUN"] = "OPEN";
	            p.setState({ TUN: "OPEN" });
	            p.cmd(cmdStr, function (s) {});
	        }
	    },
	    sendModel: function sendModel(e) {
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-id");
	        var arr = data.split(",");
	        var cmdStr = this.cmd_protocol();
	        if (this.state.TUN == "OPEN") {
	            cmdStr.attributes[arr[0]] = arr[1];
	            cmdStr.attributes["TUN"] = this.state.TUN;
	            cmdStr.attributes["SSP"] = this.state.SSP;
	            cmdStr.attributes["STP"] = this.state.STP;
	            p.cmd(cmdStr, function (s) {
	                if (s) {
	                    this.setState({ SMD: arr[1] });
	                }
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },
	    doSpeed: function doSpeed(num) {
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        var SSP = "LOW";
	        if (this.state.TUN == "OPEN") {
	            if (num == 1) {
	                SSP = "LOW";
	            } else if (num == 2) {
	                SSP = "MID";
	            } else {
	                SSP = "HIGH";
	            }
	            cmdStr.attributes["SSP"] = SSP;
	            cmdStr.attributes["TUN"] = this.state.TUN;
	            cmdStr.attributes["STP"] = this.state.STP;
	            cmdStr.attributes["SMD"] = this.state.SMD;
	            p.cmd(cmdStr, function (s) {
	                if (s) {
	                    p.setState({ SSP: SSP });
	                    p.setState({ sIndex: num });
	                    p.refs.speed.setState({ select: num });
	                }
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },
	    /*升温*/
	    add: function add() {
	        if (this.state.TUN == "OPEN") {
	            var t = parseInt(this.state.STP);
	            if (!t) {
	                this.sendTemp(26);
	            } else {
	                if (t && t < 32) {
	                    // 温度不能超过 32 度
	                    t = t + 1;
	                    this.sendTemp(t);
	                } else {
	                    this.refs.msg.setState({ show: true, word: "已达上限", timeout: 1500 });
	                }
	            }
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },
	    /*降温*/
	    cut: function cut() {
	        if (this.state.TUN == "OPEN") {
	            var t = parseInt(this.state.STP);
	            if (!t) {
	                this.sendTemp(24);
	            } else {
	                if (t > 19) {
	                    // 温度不能低于 18 度
	                    t = t - 1;
	                    this.sendTemp(t);
	                } else {
	                    this.refs.msg.setState({ show: true, word: "已达下限", timeout: 1500 });
	                }
	            }
	            //console.log("temp : " + t);
	        } else {
	                this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	            }
	    },

	    sendTemp: function sendTemp(t) {
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes["STP"] = t;
	        cmdStr.attributes["TUN"] = this.state.TUN;
	        cmdStr.attributes["SMD"] = this.state.SMD;
	        cmdStr.attributes["SSP"] = this.state.SSP;
	        p.cmd(cmdStr, function (s) {
	            if (s) {
	                this.setState({ STP: t });
	            }
	        });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                this.getGroupByUser();break; //获取用户的区域
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.getType();break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1000 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        if (this.state.deviceid) {
	            Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	                if (dt.data[0]) {
	                    if (dt.data[0].commonuse == 1) {
	                        p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                    }
	                    if (dt.data[0].commonuse == 0) {
	                        p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                    }
	                    p.setState({ commonuse: dt.data[0].commonuse });
	                }
	            });
	        }
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes["SAV"] = "DO";
	            this.cmd(cmdObj, function (s) {
	                var user = p.state.user;
	                p.getDataById(user); // 不管是否成功,都要刷新
	            });
	        } else {
	                this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	            }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);
	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, word: dt.msg, timeout: 800});
	                    }
	                });
	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    getType: function getType() {
	        var p = this;
	        this.refs.operatingListWin.setState({
	            data: [{ name: "空调", id: 2, fid: 1 }, { name: "窗帘", id: 4, fid: 1 }]
	        });
	        this.refs.operatingListWin.show();
	    },
	    selectItem: function selectItem(id, fid) {
	        var p = this;
	        var deviceid = this.state.deviceid;
	        if (id) {
	            Ajax("POST", "updateDeviceTitleid", { id: deviceid, titleid: id }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.operatingListWin.hide();
	                    if (id == 2) {
	                        var user = p.state.user;
	                        p.getDataById(user);
	                    } else {
	                        location.href = "#cl/" + deviceid;
	                    }
	                    p.setState({ titleid: id });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title + "(空调)", leftIcon: 'xiaojiantou2',
	                leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/air.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '4', title: '温度', value: p.state.STP }),
	                React.createElement(Label, { count: '4', title: '模式', value: p.state.SMD == "COOL" ? "制冷" : "制热" }),
	                React.createElement(Label, { count: '4', title: '风速', value: p.state.speed[parseInt(p.state.sIndex) - 1] }),
	                React.createElement(Label, { count: '4', title: '网络保存', value: '已保存' })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.TUN == "OPEN" ? 1 : 0,
	                            doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk' },
	                    React.createElement('img', { src: '../images/main/dial.png', className: 'clrl6Img' }),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Wd' },
	                        "温度"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Text' },
	                        React.createElement(
	                            'div',
	                            { className: 'FS24',
	                                style: { width: "62%", float: "left", textAlign: "right", fontSize: "3.5rem" } },
	                            p.state.STP
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Temp' },
	                            "℃"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FY', style: { marginRight: "3.5rem" }, onClick: p.cut },
	                            "-"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FZ', style: { marginLeft: "3.5rem" }, onClick: p.add },
	                            "+"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FY', style: { marginRight: "4rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhileng " + (p.state.SMD == "COOL" ? "TBS" : "GR"),
	                                'data-id': "SMD,COOL", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FZ', style: { marginLeft: "3.5rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhire " + (p.state.SMD == "HOT" ? "TBS" : "GR"),
	                                'data-id': "SMD,HOT", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "2.5rem" } },
	                    React.createElement(SpeedSlider, { ref: 'speed', doChange: p.doSpeed })
	                )
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' }),
	            React.createElement(OperatingListWin, { height: '7rem', title: '选择类型', ref: 'operatingListWin', doDone: this.selectItem }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/17.
	 */
	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Footer = __webpack_require__(301);
	var Msg = __webpack_require__(250);
	var DsCenter = __webpack_require__(302);
	var ConfigList = __webpack_require__(287);
	var Loading = __webpack_require__(271);
	var Ajax = __webpack_require__(244);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            attributes: null,
	            macid: null,
	            ddcmac: null,
	            type: null, // 1: 数据库中的类型id
	            typ: null,
	            SAV: "",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        //  console.log("deviceid : " + this.state.deviceid);
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },

	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = JSON.parse(data[0].attributes);
	        p.setState({ title: data[0].name });
	        p.setState({ attributes: attributes });
	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ type: data[0].type });
	        p.setState({ typ: data[0].typ });
	        p.configdata(data[0].macid);
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.configdata(data[0].macid);

	        //p.getIrcodeList();

	        if (attributes.hasOwnProperty("SAV")) {
	            p.setState({ SAV: attributes.SAV });
	        }
	        if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	            p.setState({ alias: data[0].alias });
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata = null;
	        if (macid == "0000000000000000") {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "IR-BYT";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },

	    // 发送 cmd
	    cmdControl: function cmdControl(t) {
	        //console.log("t : " + t);
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes = { SND: t };
	        this.cmd(cmdStr, function (s) {});
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeClick: function changeClick(type) {
	        var p = this;
	        if (type == "up") {
	            p.cmdControl(77);
	        }
	        if (type == "down") {
	            p.cmdControl(78);
	        }
	        if (type == "left") {
	            p.cmdControl(79);
	        }
	        if (type == "right") {
	            p.cmdControl(80);
	        }
	        if (type == "OK") {
	            p.cmdControl(81);
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                var user = p.state.user;
	                p.getDataById(user);
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title + "(电视)", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/tv.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '1', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(69);
	                                    } },
	                                "打开"
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", float: "float" } },
	                    React.createElement(DsCenter, { onChange: this.changeClick })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "-1.5rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(82);
	                                    } },
	                                React.createElement('i', { className: "iconfont icon-jingyin ", style: { fontSize: "3rem" } })
	                            )
	                        ),
	                        React.createElement('div', { className: 'irbytBtnk' }),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(71);
	                                    } },
	                                "返回"
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(73);
	                                    } },
	                                "音量+"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(75);
	                                    } },
	                                "P +"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(83);
	                                    } },
	                                "频道 1"
	                            )
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(74);
	                                    } },
	                                "音量-"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(76);
	                                    } },
	                                "P -"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.cmdControl(84);
	                                    } },
	                                "频道 2"
	                            )
	                        )
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '1', deviceid: p.state.deviceid }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/12/16.
	 *
	 * footer
	 *
	 *         height : 高度
	 *          width : 宽度
	 *
	 *     eg:  <Footer viewTab = "1"/>
	 */

	'';

	var React = __webpack_require__(24);
	var FooterBtn = __webpack_require__(243);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.deviceid,
	            viewTab: "1",
	            isIp: "",
	            showDev: "0",
	            showAlert: "0",
	            user: {}
	        };
	    },

	    componentDidMount: function componentDidMount() {},

	    reloadData: function reloadData() {
	        try {
	            var user = JSON.parse(localStorage.getItem("ibms-login"));
	            this.setState({ user: user });
	        } catch (e) {
	            console.log("footer:" + e);
	        }
	    },

	    changeTable: function changeTable(e) {
	        var id = e.currentTarget.getAttribute("data-id");

	        switch (parseInt(id)) {
	            case 1:
	                location.href = "#irbyt/" + this.state.deviceid;break;
	            case 2:
	                location.href = "#kt/" + this.state.deviceid;break;
	            case 3:
	                location.href = "#ty/" + this.state.deviceid;break;
	            default:
	                location.href = "#irbyt/" + this.state.deviceid;break;
	        }
	    },

	    render: function render() {
	        var p = this;
	        var viewTab = this.props.viewTab;
	        return React.createElement(
	            'div',
	            { className: " FT_k ", style: { height: p.props.height ? p.props.height : "", width: p.props.width ? p.props.width : "" } },
	            React.createElement(FooterBtn, { color: viewTab == "1" ? "TBS" : "WZS", width: '33%', height: '5rem', icon: 'dianshi', text: '电视', 'data-id': '1', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "2" ? "TBS" : "WZS", width: '33%', height: '5rem', icon: 'kongtiaowenkong', text: '空调', 'data-id': '2', onClick: p.changeTable }),
	            React.createElement(FooterBtn, { color: viewTab == "3" ? "TBS" : "WZS", width: '33%', height: '5rem', icon: 'equipment', text: '通用', 'data-id': '3', onClick: p.changeTable })
	        );
	    }
	});

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by Administrator on 2016/7/20.
	 */

	'';

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            hoverOK: false,
	            hoverup: false,
	            hoverdown: false,
	            hoverleft: false,
	            hoverright: false
	        };
	    },
	    hover: function hover(e) {
	        var type = e.currentTarget.getAttribute('data-type');
	        if (type == "OK") {
	            this.setState({
	                hoverOK: true
	            });
	        }
	        if (type == "down") {
	            this.setState({
	                hoverdown: true
	            });
	        }
	        if (type == "up") {
	            this.setState({
	                hoverup: true
	            });
	        }
	        if (type == "left") {
	            this.setState({
	                hoverleft: true
	            });
	        }
	        if (type == "right") {
	            this.setState({
	                hoverright: true
	            });
	        }
	    },
	    unhover: function unhover(e) {
	        this.setState({
	            hoverOK: false,
	            hoverup: false,
	            hoverdown: false,
	            hoverleft: false,
	            hoverright: false
	        });
	    },
	    componentDidMount: function componentDidMount() {},
	    cmd: function cmd(e) {
	        var type = e.currentTarget.getAttribute("data-type");
	        this.props.onChange(type);
	        //console.log("type : " + type);
	    },
	    cmdOK: function cmdOK(e) {
	        var type = e.currentTarget.getAttribute("data-type");
	        this.props.onChange(type);
	        //console.log("type ok : " + type);
	    },
	    render: function render() {
	        var type = this.props.type;
	        return React.createElement(
	            'div',
	            { className: 'ds-wrap ' },
	            React.createElement(
	                'div',
	                { className: " mid-circle BJ_DW_JZ BJ_DQ_ZX " },
	                React.createElement(
	                    'div',
	                    { className: "in-circle BJ_DW_JZ BJ_DQ_ZX " },
	                    React.createElement(
	                        'div',
	                        { className: "in-min-circle BJ_DW_JZ BJ_DQ_ZX " },
	                        React.createElement(
	                            'div',
	                            { className: this.state.hoverOK ? " ds-fontsize-tg " : " ds-fontsize ", onClick: this.cmdOK, 'data-type': 'OK',
	                                onTouchStart: this.hover,
	                                onTouchMove: this.unhover,
	                                onTouchEnd: this.unhover },
	                            'OK'
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'circular-arc-bottom' },
	                    React.createElement('div', { className: this.state.hoverdown ? " ds-button-bottom-tg " : "ds-button-bottom", onClick: this.cmd, 'data-type': 'down',
	                        onTouchStart: this.hover,
	                        onTouchMove: this.unhover,
	                        onTouchEnd: this.unhover })
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' circular-arc-top ' },
	                    React.createElement('div', { className: this.state.hoverup ? "ds-button-top-tg" : "ds-button-top", onClick: this.cmd, 'data-type': 'up',
	                        onTouchStart: this.hover,
	                        onTouchMove: this.unhover,
	                        onTouchEnd: this.unhover })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'circular-arc-left', style: { borderLeftColor: type == 2 ? "transparent" : "" } },
	                    React.createElement('div', { className: this.state.hoverleft ? "ds-button-left-tg" : "ds-button-left", onClick: this.cmd, 'data-type': 'left',
	                        onTouchStart: this.hover,
	                        onTouchMove: this.unhover,
	                        onTouchEnd: this.unhover })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'circular-arc-right', style: { borderRightColor: type == 2 ? "transparent" : "" } },
	                    React.createElement('div', { className: this.state.hoverright ? "ds-button-right-tg" : "ds-button-right", onClick: this.cmd, 'data-type': 'right',
	                        onTouchStart: this.hover,
	                        onTouchMove: this.unhover,
	                        onTouchEnd: this.unhover })
	                )
	            )
	        );
	    }
	});

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/18.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var Ajax = __webpack_require__(244);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "",
	            attributes: null,
	            flag: false, // 标志: false:无人,门关闭   true:有人,门打开
	            status: "无人经过",
	            macid: "",
	            ddcmac: "",
	            type: null,
	            typ: null,
	            SAV: "",
	            LIVE: "ON",
	            light: "",
	            alias: "",
	            BAT: "--",
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },

	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attr = JSON.parse(data[0].attributes);
	                p.setState({ attributes: attr });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ title: data[0].name });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ SAV: attr.SAV });
	                p.setState({ LIVE: attr.LIVE });
	                p.configdata(data[0].macid);

	                if (attr.hasOwnProperty("NAM") && attr.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }

	                var status = p.state.status;
	                var type = data[0].type;
	                if (type == 7) {
	                    // 微波人感   "YES","NO"
	                    if (attr.hasOwnProperty("PIR")) {
	                        if (attr.PIR == "YES") {
	                            p.setState({ status: "有人经过" });
	                            p.setState({ flag: true });
	                        }
	                    }
	                }
	                if (type == 8) {
	                    // 红外人感   "YES","NO"
	                    if (attr.hasOwnProperty("STA")) {
	                        if (attr.STA == "YES") {
	                            p.setState({ status: "有人经过" });
	                            p.setState({ flag: true });
	                        }
	                    }
	                }

	                if (type == 10) {
	                    // 门磁  SS-DOR
	                    if (attr.hasOwnProperty("DOR")) {
	                        if (attr.DOR == "OPEN") {
	                            status = "门打开";
	                            p.setState({ flag: true });
	                        } else {
	                            status = "门关闭";
	                        }
	                    } else {
	                        status = "未触发";
	                    }
	                    p.setState({ status: status });
	                    if (attr.hasOwnProperty("BAT")) {
	                        if (attr.BAT < 2.5) {
	                            p.setState({ BAT: "电量过低" });
	                        } else {
	                            p.setState({ BAT: attr.BAT + "V" });
	                        }
	                    }
	                }

	                if (type == 18) {
	                    // 门磁       "YES","NO"
	                    if (attr.hasOwnProperty("STA")) {
	                        if (attr.STA == "YES") {
	                            status = "门打开";
	                            p.setState({ flag: true });
	                        } else {
	                            status = "门关闭";
	                        }
	                    } else {
	                        status = "未触发";
	                    }
	                    p.setState({ status: status });
	                }
	                if (type == 20) {
	                    // 微波人感    "YES","NO"
	                    if (attr.hasOwnProperty("PIR")) {
	                        if (attr.PIR == "YES") {
	                            p.setState({ status: "有人经过" });
	                            p.setState({ flag: true });
	                        }
	                    }
	                }
	                if (type == 21) {
	                    // 红外人感   "YES","NO"
	                    if (attr.hasOwnProperty("PIR")) {
	                        if (attr.PIR == "YES") {
	                            p.setState({ status: "有人经过" });
	                            p.setState({ flag: true });
	                        }
	                    }
	                    if (attr.hasOwnProperty("LIG")) {
	                        var light = "";
	                        switch (attr.LIG) {
	                            case "1":
	                                light = "很暗";
	                                break;
	                            case "2":
	                                light = "较暗";
	                                break;
	                            case "3":
	                                light = "正常";
	                                break;
	                            case "4":
	                                light = "明亮";
	                                break;
	                            case "5":
	                                light = "很亮";
	                                break;
	                            default:
	                                light = "明亮";
	                                break;
	                        }
	                        p.setState({ light: light });
	                    } else {
	                        p.setState({ light: "明亮" });
	                    }
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },
	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;

	        var url = "";
	        if (p.state.type == 18 || p.state.type == 10) {
	            // 门磁
	            url = "doorlock.png";
	        } else if (p.state.type == 21 || p.state.type == 8) {
	            // 红外
	            url = "infrared.png";
	        } else if (p.state.type == 20 || p.state.type == 7) {
	            // 微波
	            url = "infrared.png";
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: url ? "images/main/detail/" + url : "" })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                p.state.type == 7 || p.state.type == 8 || p.state.type == 18 || p.state.type == 20 ? React.createElement(
	                    'div',
	                    null,
	                    React.createElement(Label, { count: '2', title: '当前状态', value: p.state.status }),
	                    React.createElement(Label, { count: '2', title: '网络保存', value: '已保存' })
	                ) : "",
	                p.state.type == 21 ? // 红外
	                React.createElement(
	                    'div',
	                    null,
	                    React.createElement(Label, { count: '3', title: '当前状态', value: p.state.status }),
	                    React.createElement(Label, { count: '3', title: '光照强度', value: p.state.light }),
	                    React.createElement(Label, { count: '3', title: '网络保存', value: '已保存' })
	                ) : "",
	                p.state.type == 10 ? // 门磁
	                React.createElement(
	                    'div',
	                    null,
	                    React.createElement(Label, { count: '3', title: '电量显示', value: p.state.BAT }),
	                    React.createElement(Label, { count: '3', title: '当前状态', value: p.state.status }),
	                    React.createElement(Label, { count: '3', title: '网络保存', value: '已保存' })
	                ) : ""
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                p.state.type == 21 || p.state.type == 8 || p.state.type == 20 || p.state.type == 7 ? React.createElement(
	                    'div',
	                    null,
	                    React.createElement('div', { style: { height: "4rem" } }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "14rem", marginTop: "3rem" } },
	                        React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: "images/main/detail/" + (p.state.flag ? "Uinfrared" : "Uinfrared") + ".png" })
	                    )
	                ) : "",
	                p.state.type == 10 || p.state.type == 18 ? React.createElement(
	                    'div',
	                    null,
	                    React.createElement('div', { style: { height: "4rem" } }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "14rem", marginTop: "3rem" } },
	                        React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: "images/main/detail/" + (p.state.flag ? "UdoorlockA" : "UdoorlockB") + ".png" })
	                    )
	                ) : ""
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/18.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var Ajax = __webpack_require__(244);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "温控板",
	            SWI: "",
	            SSP: "",
	            SMD: "",
	            LIVE: "ON",
	            STP: 25, // [18,23]
	            RTP: 25,
	            speed: ["小风", "中风", "大风", "自动"],
	            currtSSP: null,
	            sIndex: 1,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员

	        };
	    },
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            if (attributes.hasOwnProperty("LIVE")) {
	                p.setState({
	                    LIVE: attributes.LIVE
	                });
	            }
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("AIF")) {
	                var arf = attributes.AIF;
	                var SWI = parseInt(arf.substr(0, 1));
	                var SSP = parseInt(arf.substr(1, 1));
	                var SMD = parseInt(arf.substr(2, 1));
	                var STP = parseInt(arf.substr(3, 2));
	                var RTP = parseInt(arf.substr(5, 2));
	                if (SWI == 1) {
	                    SWI = "ON";
	                } else {
	                    SWI = "OFF";
	                }
	                switch (SSP) {
	                    case 1:
	                        SSP = "LOW";break;
	                    case 2:
	                        SSP = "MID";break;
	                    case 3:
	                        SSP = "HIGH";break;
	                    case 4:
	                        SSP = "AUTO";break;
	                    default:
	                        SSP = "LOW";break;
	                }
	                switch (SMD) {
	                    case 0:
	                        SMD = "COOL";break;
	                    case 1:
	                        SMD = "HOT";break;
	                    case 2:
	                        SMD = "AIR";break;
	                    default:
	                        SMD = "COOL";break;
	                }
	                p.setState({
	                    SWI: SWI,
	                    SSP: SSP,
	                    SMD: SMD,
	                    STP: STP,
	                    RTP: RTP
	                });
	            }
	        }

	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.setState({ type: data[0].type });
	        p.setState({ title: data[0].name });
	        p.setState({ macid: data[0].macid });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;

	        }
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (v) {});
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (v) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.refs.groupwin.doShow(GroupList);
	                Ajax("POST", "getGroupByDeviceId", { deviceid: p.state.deviceid }, function (dt) {
	                    if (dt && dt.success) {
	                        //  console.log(dt.data);
	                        var groupdevice = dt.data;
	                        var groupNew = [];
	                        for (var i = 0; i < groupdevice.length; i++) {
	                            groupNew.push({
	                                id: groupdevice[i].groupid
	                            });
	                        }
	                        p.refs.groupwin.getSelect(groupNew);
	                    }
	                });
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    doClick: function doClick(e) {
	        var str = e.currentTarget.getAttribute("data-id");
	        console.log("str : " + str);
	        this.setState({ WIN: str });
	    },
	    doSwitch: function doSwitch(dataStr) {
	        //console.log("dataStr:"+dataStr);
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        if (this.state.SWI == "ON") {
	            cmdObj.attributes["SWI"] = "OFF";
	            this.setState({ SWI: "OFF" });
	        } else {
	            cmdObj.attributes["SWI"] = "ON";
	            this.setState({ SWI: "ON" });
	        }

	        cmdObj.attributes["STP"] = this.state.STP;
	        cmdObj.attributes["SMD"] = this.state.SMD;
	        cmdObj.attributes["SSP"] = this.state.SSP;

	        this.cmd(cmdObj, function (sucess) {
	            if (!sucess) {
	                if (p.state.SWI == "ON") {
	                    p.setState({ SWI: "OFF" });
	                } else {
	                    p.setState({ SWI: "ON" });
	                }
	            }
	        });
	    },
	    sendModel: function sendModel(e) {
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-id");
	        var arr = data.split(",");
	        var cmdStr = this.cmd_protocol();
	        if (this.state.SWI == "ON") {
	            cmdStr.attributes[arr[0]] = arr[1];
	            cmdStr.attributes["SWI"] = this.state.SWI;
	            cmdStr.attributes["SSP"] = this.state.SSP;
	            cmdStr.attributes["STP"] = this.state.STP;
	            this.cmd(cmdStr, function (success) {
	                if (success) {
	                    p.setState({ SMD: arr[1] });
	                }
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 800 });
	        }
	    },
	    doSpeed: function doSpeed(v) {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            var cmdStr = this.cmd_protocol();
	            if (v == 0) {
	                cmdStr.attributes["SSP"] = "LOW";
	                this.setState({ speedIndex: 0 });
	                this.setState({ SSP: "LOW" });
	            }
	            if (v == 50) {
	                cmdStr.attributes["SSP"] = "MID";
	                this.setState({ speedIndex: 1 });
	                this.setState({ SSP: "MID" });
	            }
	            if (v == 100) {
	                cmdStr.attributes["SSP"] = "HIGH";
	                this.setState({ speedIndex: 2 });
	                this.setState({ SSP: "HIGH" });
	            }
	            cmdStr.attributes["SWI"] = this.state.SWI;
	            cmdStr.attributes["SMD"] = this.state.SMD;
	            cmdStr.attributes["STP"] = this.state.STP;
	            this.cmd(cmdStr, function (success) {});
	        } else {
	            this.refs.msg.setState({ show: true, word: "请打开设备", timeout: 800 });
	        }
	    },
	    /*升温*/
	    add: function add() {
	        if (this.state.SWI == "ON") {
	            var t = parseInt(this.state.STP);
	            if (t < 32) {
	                // 温度不能超过 32 度
	                t = t + 1;
	                this.setState({ STP: t });
	                this.sendTemp(t);
	            } else {
	                this.refs.msg.setState({ show: true, type: "text", word: "已达上限", timeout: 800 });
	            }
	            console.log("temp : " + t);
	        } else {
	            this.refs.msg.setState({ show: true, type: "text", word: "请先打开设备", timeout: 800 });
	        }
	    },
	    /*降温*/
	    cut: function cut() {
	        if (this.state.SWI == "ON") {
	            var t = parseInt(this.state.STP);
	            if (t > 18) {
	                // 温度不能低于 32 度
	                t = t - 1;
	                this.setState({ STP: t });
	                this.sendTemp(t);
	            } else {
	                this.refs.msg.setState({ show: true, type: "text", word: "已达下限", timeout: 800 });
	            }
	            console.log("temp : " + t);
	        } else {
	            this.refs.msg.setState({ show: true, type: "text", word: "请先打开设备", timeout: 800 });
	        }
	    },
	    sendTemp: function sendTemp(t) {
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes["STP"] = t;
	        cmdStr.attributes["SWI"] = this.state.SWI;
	        cmdStr.attributes["SMD"] = this.state.SMD;
	        cmdStr.attributes["SSP"] = this.state.SSP;
	        this.cmd(cmdStr, function (success) {
	            if (success) {
	                p.setState({
	                    STP: t
	                });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        history.go(-1);
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/air.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '4', title: '温度', value: p.state.STP }),
	                React.createElement(Label, { count: '4', title: '模式', value: p.state.SMD == "COOL" ? "制冷" : "制热" }),
	                React.createElement(Label, { count: '4', title: '风速', value: p.state.speed[parseInt(p.state.sIndex) - 1] }),
	                React.createElement(Label, { count: '4', title: '网络保存', value: '已保存' })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, 'data-id': this.state.SWI == "ON" ? 1 : 0, choose: this.state.SWI == "ON" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk' },
	                    React.createElement('img', { src: '../images/main/dial.png', className: 'clrl6Img' }),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Wd' },
	                        "温度"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Text' },
	                        React.createElement(
	                            'div',
	                            { className: 'FS24', style: { width: "62%", float: "left", textAlign: "right", fontSize: "3.5rem" } },
	                            p.state.STP
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { lineHeight: "5rem", textIndent: "0.1em", width: "38%", float: "left", textAlign: "left", fontSize: "1.5rem" } },
	                            "℃"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FY', style: { marginRight: "3.5rem" }, onClick: p.cut },
	                            "-"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FZ', style: { marginLeft: "3.5rem" }, onClick: p.add },
	                            "+"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FY', style: { marginRight: "4rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhileng " + (p.state.SMD == "COOL" ? "TBS" : "GR"), 'data-id': "SMD,COOL", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FZ', style: { marginLeft: "3.5rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhire " + (p.state.SMD == "HOT" ? "TBS" : "GR"), 'data-id': "SMD,HOT", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "2.5rem" } },
	                    React.createElement(SpeedSlider, { ref: 'speed', doChange: p.doSpeed })
	                )
	            ),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName })
	        );
	    }
	});

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/18.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Ajax = __webpack_require__(244);
	var Connect = __webpack_require__(292);
	var EchartWin = __webpack_require__(306);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "",
	            attributes: {},
	            status: "无人经过",
	            macid: "",
	            ddcmac: "",
	            type: null,
	            typ: null,
	            SAV: "",
	            LIVE: "ON",
	            areagroupId: 0,
	            commonuse: -1,
	            light: "",
	            alias: "",
	            BAT: "--",
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ title: data[0].name });
	                p.setState({
	                    attributes: attributes,
	                    defaultState: attributes.POS,
	                    macid: data[0].macid,
	                    ddcmac: data[0].ddcmac,
	                    type: data[0].type,
	                    typ: data[0].typ,
	                    SAV: attributes.SAV,
	                    SWI: attributes.SWI,
	                    LIVE: data[0].online ? "ON" : "OFF",

	                    DAY: attributes.hasOwnProperty("DAY") ? attributes.DAY : "",
	                    TEC: attributes.hasOwnProperty("TEC") ? attributes.TEC : "",
	                    CEC: attributes.hasOwnProperty("KEY") ? parseInt(attributes.KEY / 100000) : "", // 舍弃小数,前面几位
	                    CEP: attributes.hasOwnProperty("KEY") ? attributes.KEY % 100000 / 10 : "" // 后5位,其中最后一位是小数
	                });
	                p.configdata(data[0].macid);

	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    showEchart: function showEchart() {
	        var p = this;
	        if (p.state.macid != "0000000000000000") {
	            p.refs.echart.show(p.state.macid);
	        } else {
	            p.refs.msg.setState({ show: true, word: "没有组的数据", timeout: 1000 });
	        }
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doSwitch: function doSwitch() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        if (p.state.TUN == "OPEN") {
	            p.setState({ TUN: "CLOSE" });
	            cmdObj.attributes["TUN"] = "CLOSE";
	        } else {
	            p.setState({ TUN: "OPEN" });
	            cmdObj.attributes["TUN"] = "OPEN";
	        }
	        this.cmd(cmdObj);
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var deviceId = p.state.device;
	                var user = p.state.user;
	                p.getDataById(deviceId, user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    var GroupList = [];
	                    var icondata = dt.data;
	                    for (var i in icondata) {
	                        GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                    }
	                    //    p.setState({GroupList:GroupList});
	                    p.refs.groupwin.doShow(GroupList);
	                }
	            });
	        }
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            //p.refs.msg.setState({show: true, type: "loading"});
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                //p.refs.msg.setState({show: true, type: "loading"});
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt && dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: "images/main/detail/metering.png" })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: "实时电流" + (p.state.CEC > 1000 ? "(A)" : "(mA)"), value: p.state.CEC > 1000 ? (p.state.CEC / 1000).toFixed(2) : p.state.CEC }),
	                React.createElement(Label, { count: '3', title: "实时功率" + (p.state.CEP > 1000 ? "(KW)" : "(W)"), value: p.state.CEP > 1000 ? (p.state.CEP / 1000).toFixed(2) : p.state.CEP }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.TUN == "OPEN" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clr1mImg ' },
	                    React.createElement('div', { style: { height: "1px" } }),
	                    React.createElement(
	                        'div',
	                        { className: 'clr1mImgText1' },
	                        p.state.TEC ? p.state.TEC : "无"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clr1mImgText2' },
	                        "总电量(KWH)"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clr1mImgText3' },
	                        p.state.DAY ? p.state.DAY : "无"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clr1mImgText4' },
	                        "今日电量(KWH)"
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: p.state.macid == "0000000000000000" ? "BJ_DW_YC" : "BJ_DW_XS BJ_DW_FY", style: { height: "3rem", marginRight: "3rem", marginTop: "4rem" }, onClick: p.showEchart },
	                    React.createElement('i', { className: "clr1mEchart iconfont icon-tubiao", style: { fontSize: "3rem" } })
	                )
	            ),
	            React.createElement(EchartWin, { ref: 'echart' }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/19.
	 */

	'';

	var React = __webpack_require__(24);
	var ajax = __webpack_require__(244);
	var MsgWin = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            macid: ""
	        };
	    },
	    echart: "",
	    componentDidMount: function componentDidMount() {},
	    hide: function hide() {
	        var p = this;
	        p.setState({ show: false });
	    },
	    show: function show(macid) {
	        var p = this;
	        p.setState({ show: true, macid: macid });

	        var mydiv = document.getElementById('Echart');
	        mydiv.style.width = window.innerWidth + 'px';
	        mydiv.style.height = '300px';
	        this.echart = echarts.init(mydiv);

	        if (macid) {
	            p.getDayPowerbyMac(macid);
	        }
	    },

	    stopPop: function stopPop(event) {
	        event.preventDefault();
	        event.stopPropagation();
	    },

	    doDone: function doDone() {
	        console.log("doDone");
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },
	    changePowerView: function changePowerView(e) {
	        var dtype = e.currentTarget.getAttribute("data");
	        switch (parseInt(dtype)) {
	            case 1:
	                this.getDayPowerbyMac(this.state.macid);break;
	            case 2:
	                this.getMonthPowerbyMac(this.state.macid);break;
	            case 3:
	                this.getYearPowerbyMac(this.state.macid);break;
	            default:
	                this.getDayPowerbyMac(this.state.macid);break;
	        }
	    },
	    getDayPowerbyMac: function getDayPowerbyMac(macid) {
	        var p = this;
	        ajax("POST", "getDayPowerbyMac", { macid: macid, num: 5 }, function (dt) {
	            //console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                var data = dt.data;
	                if (dt.data.length > 0) {
	                    var xAxi = [];
	                    var yAxiMax = 0;
	                    var yAxi = [];
	                    var valueDay = [];
	                    var valuePower = [];
	                    var j = 0;
	                    for (var i = data.length - 1; i >= 0; i--) {
	                        if (yAxiMax < data[i]) {
	                            yAxiMax = data[i];
	                        }
	                        var date = data[i].month + "-" + data[i].day;
	                        xAxi.push(date);
	                        valueDay.push(data[i].daypower);
	                        valuePower.push(data[i].allpower);
	                        j++;
	                    }

	                    p.setState({
	                        listView: dt.data
	                    });
	                    var option = {
	                        title: {
	                            text: '电量显示(KWH)',
	                            left: '3%',
	                            top: "3%",
	                            textStyle: {
	                                fontSize: 14,
	                                color: '#858190'
	                            }

	                        },
	                        tooltip: {
	                            trigger: 'axis',
	                            axisPointer: {
	                                type: 'cross',
	                                label: {
	                                    backgroundColor: '#6a7985'
	                                }
	                            }
	                        },
	                        grid: {
	                            left: '3%',
	                            right: '4%',
	                            bottom: '3%',
	                            containLabel: true
	                        },
	                        legend: {
	                            data: ["日使用电量", "使用总电量"],
	                            right: '10%',
	                            top: "5%"
	                        },

	                        toolbox: {
	                            feature: {
	                                saveAsImage: {}
	                            },
	                            right: '2%',
	                            top: "3%"
	                        },
	                        xAxis: [{
	                            type: 'category',
	                            boundaryGap: false,
	                            data: xAxi
	                        }],
	                        yAxis: [{
	                            type: 'value'
	                        }],
	                        series: [{
	                            name: '日使用电量',
	                            type: 'line',
	                            stack: '总量',
	                            lineStyle: {
	                                color: '#ff88a4'
	                            },
	                            areaStyle: { color: "#ff88a4" },
	                            data: valueDay
	                        }, {
	                            name: '使用总电量',
	                            type: 'line',
	                            stack: '总量',
	                            label: {
	                                normal: {
	                                    show: true,
	                                    position: 'top'
	                                }
	                            },
	                            lineStyle: {
	                                color: '#8877ff'
	                            },
	                            areaStyle: { color: "#8877ff" },
	                            data: valuePower
	                        }]
	                    };
	                    p.echart.resize({
	                        height: 300
	                    });
	                    p.echart.setOption(option);
	                    //console.log(p.echart.getOption());
	                } else {
	                        //p.refs.msg.setState({show: true, type: "text", word: "暂无统计数据", timeout: 1500});
	                    }
	            } else {
	                    //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 1500});
	                }
	        });
	    },
	    getMonthPowerbyMac: function getMonthPowerbyMac(macid) {
	        var p = this;
	        ajax("POST", "getMonthPowerbyMac", { macid: macid, num: 6 }, function (dt) {
	            //console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                var data = dt.data;
	                if (dt.data.length > 0) {
	                    var xAxi = [];
	                    var yAxiMax = 0;
	                    var yAxi = [];
	                    var valueDay = [];
	                    var valuePower = [];
	                    var j = 0;
	                    for (var i = data.length - 1; i >= 0; i--) {
	                        if (yAxiMax < data[i]) {
	                            yAxiMax = data[i];
	                        }
	                        var date = data[i].year + "-" + data[i].month;
	                        xAxi.push(date);
	                        valueDay.push(data[i].monthpower);
	                        valuePower.push(data[i].allpower);
	                        j++;
	                    }
	                    p.setState({
	                        listView: dt.data
	                    });
	                    var option = {
	                        title: {
	                            text: '电量显示(KWH)',
	                            left: '3%',
	                            top: "3%",
	                            textStyle: {
	                                fontSize: 14
	                            }
	                        },
	                        tooltip: {
	                            trigger: 'axis',
	                            axisPointer: {
	                                type: 'cross',
	                                label: {
	                                    backgroundColor: '#6a7985'
	                                }
	                            }
	                        },
	                        grid: {
	                            left: '3%',
	                            right: '4%',
	                            bottom: '3%',
	                            containLabel: true
	                        },
	                        legend: {
	                            data: ["月使用电量", "使用总电量"],
	                            right: '10%',
	                            top: "5%"
	                        },

	                        toolbox: {
	                            feature: {
	                                saveAsImage: {}
	                            },
	                            right: '2%',
	                            top: "3%"
	                        },
	                        xAxis: [{
	                            type: 'category',
	                            boundaryGap: false,
	                            data: xAxi
	                        }],
	                        yAxis: [{
	                            type: 'value'
	                        }],
	                        series: [{
	                            name: '月使用电量',
	                            type: 'line',
	                            stack: '总量',
	                            areaStyle: { normal: {} },
	                            data: valueDay
	                        }, {
	                            name: '使用总电量',
	                            type: 'line',
	                            stack: '总量',
	                            label: {
	                                normal: {
	                                    show: true,
	                                    position: 'top'
	                                }
	                            },
	                            areaStyle: { normal: {} },
	                            data: valuePower
	                        }]
	                    };
	                    p.echart.resize({
	                        height: 300
	                    });
	                    p.echart.setOption(option);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: "暂无统计数据", timeout: 1500 });
	                }
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    getYearPowerbyMac: function getYearPowerbyMac(macid) {
	        var p = this;
	        ajax("POST", "getYearPowerbyMac", { macid: macid, num: 5 }, function (dt) {
	            //console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                var data = dt.data;
	                if (dt.data.length > 0) {
	                    var xAxi = [];
	                    var yAxiMax = 0;
	                    var yAxi = [];
	                    var valueDay = [];
	                    var valuePower = [];
	                    var j = 0;
	                    for (var i = data.length - 1; i >= 0; i--) {
	                        if (yAxiMax < data[i]) {
	                            yAxiMax = data[i];
	                        }
	                        var date = data[i].year;
	                        xAxi.push(date);
	                        valueDay.push(data[i].yearpower);
	                        valuePower.push(data[i].allpower);
	                        j++;
	                    }

	                    p.setState({
	                        listView: dt.data
	                    });

	                    var option = {
	                        title: {
	                            text: '电量显示(KWH)',
	                            left: '3%',
	                            top: "3%",
	                            textStyle: {
	                                fontSize: 14
	                            }

	                        },
	                        tooltip: {
	                            trigger: 'axis',
	                            axisPointer: {
	                                type: 'cross',
	                                label: {
	                                    backgroundColor: '#6a7985'
	                                }
	                            }
	                        },
	                        grid: {
	                            left: '3%',
	                            right: '4%',
	                            bottom: '3%',
	                            containLabel: true
	                        },
	                        legend: {
	                            data: ["年使用电量", "使用总电量"],
	                            right: '10%',
	                            top: "5%"
	                        },

	                        toolbox: {
	                            feature: {
	                                saveAsImage: {}
	                            },
	                            right: '2%',
	                            top: "3%"
	                        },
	                        xAxis: [{
	                            type: 'category',
	                            boundaryGap: false,
	                            data: xAxi
	                        }],
	                        yAxis: [{
	                            type: 'value'
	                        }],
	                        series: [{
	                            name: '年使用电量',
	                            type: 'line',
	                            stack: '总量',
	                            areaStyle: { normal: {} },
	                            data: valueDay
	                        }, {
	                            name: '使用总电量',
	                            type: 'line',
	                            stack: '总量',
	                            label: {
	                                normal: {
	                                    show: true,
	                                    position: 'top'
	                                }
	                            },
	                            areaStyle: { normal: {} },
	                            data: valuePower
	                        }]
	                    };
	                    p.echart.resize({
	                        height: 300
	                    });
	                    p.echart.setOption(option);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: "暂无统计数据", timeout: 1500 });
	                }
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: this.state.show ? " W_b BJ_DW_XS" : "W_b BJ_DW_YC", onClick: p.hide },
	            React.createElement(
	                'div',
	                { className: this.state.show ? " EW_k " : "EW_k  BJ_DW_YC", onClick: p.stopPop },
	                React.createElement(
	                    'div',
	                    { className: 'EW_title' },
	                    React.createElement(
	                        'div',
	                        { className: 'EW_cancle', onClick: p.hide },
	                        "取消"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'EW_text', onClick: p.hide },
	                        "表格显示"
	                    )
	                ),
	                React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "3rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "90%", marginLeft: "5%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'EW_segK' },
	                            React.createElement(
	                                'div',
	                                { className: 'EW_segBtn', data: 1, onClick: p.changePowerView },
	                                "近日电量"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'EW_segK' },
	                            React.createElement(
	                                'div',
	                                { className: 'EW_segBtn', data: 2, onClick: p.changePowerView },
	                                "近月电量"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'EW_segK' },
	                            React.createElement(
	                                'div',
	                                { className: 'EW_segBtn', data: 3, onClick: p.changePowerView },
	                                "近年电量"
	                            )
	                        )
	                    )
	                ),
	                React.createElement('div', { id: 'Echart', style: { width: "100%", height: "400px" } })
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/20.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var CurtainBtn = __webpack_require__(294);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "温湿度",
	            attributes: {},
	            TEM: "",
	            HUM: "",
	            SAV: "",
	            macid: "",
	            ddcmac: "",
	            type: "",
	            typ: null,
	            LIVE: "",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员

	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ attributes: attributes });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ title: data[0].name });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	                p.configdata(data[0].macid);

	                if (attributes.hasOwnProperty("TEM")) {
	                    // 温度
	                    p.setState({ TEM: attributes.TEM });
	                }
	                if (attributes.hasOwnProperty("HUM")) {
	                    // 湿度
	                    p.setState({ HUM: attributes.HUM });
	                }
	                if (attributes.hasOwnProperty("SAV")) {
	                    // 保存
	                    p.setState({ SAV: attributes.SAV });
	                }

	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },
	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1000
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/temp.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '当前温度(℃)', value: p.state.TEM }),
	                React.createElement(Label, { count: '3', title: '当前湿度(%)', value: p.state.HUM }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1px" } }),
	                React.createElement('div', { className: 'ssithImg ' }),
	                React.createElement(
	                    'div',
	                    { style: { width: "50%", marginLeft: "25%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'LA_item', style: { width: "50%" } },
	                        React.createElement(
	                            'li',
	                            { className: ' li1 ', style: { height: "2rem", lineHeight: "2rem" } },
	                            "温度(℃)"
	                        ),
	                        React.createElement(
	                            'li',
	                            { className: ' li2 ', style: { height: "2rem", lineHeight: "2rem" } },
	                            p.state.TEM
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'LA_item', style: { width: "50%" } },
	                        React.createElement(
	                            'li',
	                            { className: ' li1 ', style: { height: "2rem", lineHeight: "2rem" } },
	                            "湿度(%)"
	                        ),
	                        React.createElement(
	                            'li',
	                            { className: ' li2 ', style: { height: "2rem", lineHeight: "2rem" } },
	                            p.state.HUM
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/22.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var CurtainBtn = __webpack_require__(294);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "溢水传感器",
	            attributes: {},
	            macid: null,
	            ddcmac: null,
	            LIVE: null,
	            alias: null,
	            type: null, // 1: 数据库中的类型id
	            typ: null, // LT-CTM : 设备上报类型
	            BAT: "",
	            WAT: "",
	            SAV: "",
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = JSON.parse(data[0].attributes);
	        p.setState({ attributes: attributes });
	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	        p.setState({ typ: data[0].typ });
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.configdata(data[0].macid);

	        if (attributes.hasOwnProperty("WAT")) {
	            p.setState({ WAT: attributes.WAT });
	        }
	        if (attributes.hasOwnProperty("SAV")) {
	            p.setState({ SAV: attributes.SAV });
	        }
	        if (attributes.hasOwnProperty("BAT")) {
	            if (attributes.BAT < 2.5) {
	                p.setState({ BAT: "电量过低" });
	            } else {
	                p.setState({ BAT: attributes.BAT });
	            }
	        } else {
	            p.setState({ BAT: "--" });
	        }
	        if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	            p.setState({ alias: data[0].alias });
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = JSON.parse(cmdStr);
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (v) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (v) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },

	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },

	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/water.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '电量显示(V)', value: this.state.BAT }),
	                React.createElement(Label, { count: '3', title: '溢水情况', value: this.state.WAT == "YES" ? "已溢水" : "水位正常" }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk', style: { marginTop: "5rem" } },
	                    React.createElement('img', { src: "../images/main/detail/" + (this.state.WAT == "YES" ? "UwaterB" : "UwaterA") + ".png", style: { heigt: "auto", width: "100%" } })
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/24.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var RControl = __webpack_require__(310);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            attributes: {},
	            title: "ZigBee遥控器",
	            SAV: "",
	            BAT: ""

	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },

	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },

	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0] && data[0].hasOwnProperty("attributes")) {
	            var attributes = null;
	            try {
	                attributes = JSON.parse(data[0].attributes);
	            } catch (e) {
	                console.log(e);
	            }
	            if (attributes) {
	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	                p.setState({ attributes: attributes });

	                if (attributes.hasOwnProperty("SAV")) {
	                    p.setState({ SAV: attributes.SAV });
	                }
	                if (attributes.hasOwnProperty("BAT")) {
	                    if (attributes.BAT < 2.5) {
	                        p.setState({ BAT: "电量低" });
	                    } else {
	                        p.setState({ BAT: attributes.BAT + "V" });
	                    }
	                } else {
	                    p.setState({ BAT: "--" });
	                }
	            }

	            p.setState({ macid: data[0].macid });
	            p.setState({ ddcmac: data[0].ddcmac });
	            p.setState({ type: data[0].type });
	            p.setState({ title: data[0].name });
	            p.configdata(data[0].macid);
	        }
	    },
	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "SW-RMT";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {

	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },
	    command: function command(id) {
	        var p = this;
	        var obj = this.cmd_protocol();
	        var SW = "SW" + id;
	        if (p.state.attributes.hasOwnProperty(SW)) {
	            if (p.state.attributes[SW] == "ON") {
	                obj.attributes[SW] = "OFF";
	            } else {
	                obj.attributes[SW] = "ON";
	            }
	        } else {
	            obj.attributes[SW] = "ON";
	        }
	        this.cmd(obj, function (success) {
	            if (!success) {
	                p.refs.msg.setState({
	                    word: "控制失败",
	                    timeout: 1500,
	                    show: true
	                });
	            }
	        });
	    },

	    changeClick: function changeClick(type) {
	        var p = this;
	        if (type == "up") {
	            p.command(3);
	        }
	        if (type == "down") {
	            p.command(5);
	        }
	        if (type == "left") {
	            p.command(2);
	        }
	        if (type == "right") {
	            p.command(4);
	        }
	        if (type == "LUX") {
	            p.command(1);
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    findDevice: function findDevice() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {
	            if (!s) {
	                p.refs.msg.setState({
	                    word: "网关不在线",
	                    timeout: 1500,
	                    show: true
	                });
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                if (!s) {
	                    p.refs.msg.setState({
	                        word: "网关不在线",
	                        timeout: 1500,
	                        show: true
	                    });
	                }
	            });
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1700);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    var GroupList = [];
	                    var icondata = dt.data;
	                    for (var i in icondata) {
	                        GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                    }
	                    //    p.setState({GroupList:GroupList});
	                    p.refs.groupwin.doShow(GroupList);
	                }
	            });
	        }
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            //p.refs.msg.setState({show: true, type: "loading"});
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                //p.refs.msg.setState({show: true, type: "loading"});
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt && dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/tv.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '电量', value: this.state.BAT }),
	                React.createElement(Label, { count: '2', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "4rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%", float: "float", marginTop: "3rem" } },
	                    React.createElement(RControl, { onChange: this.changeClick })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "80%", marginLeft: "10%", marginTop: "2rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.command(6);
	                                    } },
	                                "A"
	                            )
	                        ),
	                        React.createElement('div', { className: 'irbytBtnk' }),
	                        React.createElement(
	                            'div',
	                            { className: 'irbytBtnk' },
	                            React.createElement(
	                                'div',
	                                { className: 'irbytBtn', onClick: function () {
	                                        p.command(7);
	                                    } },
	                                "B"
	                            )
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/24.
	 */
	'';

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            hoverOK: false,
	            hoverup: false,
	            hoverdown: false,
	            hoverleft: false,
	            hoverright: false
	        };
	    },
	    hover: function hover(e) {
	        var type = e.currentTarget.getAttribute('data-type');
	        if (type == "LUX") {
	            this.setState({
	                hoverOK: true
	            });
	        }
	        if (type == "down") {
	            this.setState({
	                hoverdown: true
	            });
	        }
	        if (type == "up") {
	            this.setState({
	                hoverup: true
	            });
	        }
	        if (type == "left") {
	            this.setState({
	                hoverleft: true
	            });
	        }
	        if (type == "right") {
	            this.setState({
	                hoverright: true
	            });
	        }
	    },
	    unhover: function unhover(e) {
	        this.setState({
	            hoverOK: false,
	            hoverup: false,
	            hoverdown: false,
	            hoverleft: false,
	            hoverright: false
	        });
	    },
	    componentDidMount: function componentDidMount() {},
	    cmd: function cmd(e) {
	        var type = e.currentTarget.getAttribute("data-type");
	        this.props.onChange(type);
	        //console.log("type : " + type);
	    },
	    cmdOK: function cmdOK(e) {
	        var type = e.currentTarget.getAttribute("data-type");
	        this.props.onChange(type);
	        //console.log("type ok : " + type);
	    },
	    render: function render() {
	        var type = this.props.type;
	        return React.createElement(
	            'div',
	            { className: 'ds-wrap ' },
	            React.createElement(
	                'div',
	                { className: " mid-circle BJ_DW_JZ BJ_DQ_ZX " },
	                React.createElement(
	                    'div',
	                    { className: "in-circle BJ_DW_JZ BJ_DQ_ZX " },
	                    React.createElement(
	                        'div',
	                        { className: "in-min-circle BJ_DW_JZ BJ_DQ_ZX " },
	                        React.createElement(
	                            'div',
	                            { className: this.state.hoverOK ? " ds-fontsize-tg " : " ds-fontsize ", style: { fontSize: "1.6rem" }, onClick: this.cmdOK, 'data-type': 'LUX',
	                                onTouchStart: this.hover,
	                                onTouchMove: this.unhover,
	                                onTouchEnd: this.unhover },
	                            'LUX'
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'RControl-arc-bottom' },
	                    React.createElement(
	                        'div',
	                        { className: this.state.hoverdown ? " RControl-bottom-tg " : " RControl-bottom ",
	                            onClick: this.cmd, 'data-type': 'down',
	                            onTouchStart: this.hover,
	                            onTouchMove: this.unhover,
	                            onTouchEnd: this.unhover },
	                        React.createElement('i', { className: 'iconfont icon-cha ', style: { fontSize: "3rem" } })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' RControl-arc-top ' },
	                    React.createElement(
	                        'div',
	                        { className: this.state.hoverup ? " RControl-top-tg " : " RControl-top ",
	                            onClick: this.cmd, 'data-type': 'up',
	                            onTouchStart: this.hover,
	                            onTouchMove: this.unhover,
	                            onTouchEnd: this.unhover },
	                        React.createElement('i', { className: 'iconfont icon-sanjiao ', style: { fontSize: "3rem" } })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'RControl-arc-left', style: { borderLeftColor: type == 2 ? "transparent" : "" } },
	                    React.createElement(
	                        'div',
	                        { className: this.state.hoverleft ? "RControl-left-tg" : "RControl-left",
	                            onClick: this.cmd, 'data-type': 'left',
	                            onTouchStart: this.hover,
	                            onTouchMove: this.unhover,
	                            onTouchEnd: this.unhover },
	                        React.createElement('i', { className: 'iconfont icon-yuan ', style: { fontSize: "3rem" } })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'RControl-arc-right', style: { borderRightColor: type == 2 ? "transparent" : "" } },
	                    React.createElement(
	                        'div',
	                        { className: this.state.hoverright ? "RControl-right-tg" : "RControl-right",
	                            onClick: this.cmd, 'data-type': 'right',
	                            onTouchStart: this.hover,
	                            onTouchMove: this.unhover,
	                            onTouchEnd: this.unhover },
	                        React.createElement('i', { className: 'iconfont icon-fang ', style: { fontSize: "3rem" } })
	                    )
	                )
	            )
	        );
	    }
	});

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by zhaochong on 2018/2/10.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var GroupWin = __webpack_require__(284);
	var InputSelect = __webpack_require__(280);
	var ConfigList = __webpack_require__(287);
	var Msg = __webpack_require__(250);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "光照度传感器",
	            LIVE: "",
	            lux: "",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: null, // 1: 数据库中的类型id
	            typ: null, // LT-CTM : 设备上报类型
	            online: "",
	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById() {
	        var p = this;
	        var user = 1;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: 24 }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = JSON.parse(data[0].attributes);
	        p.setState({ attributes: attributes });
	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	        p.setState({ typ: data[0].typ });
	        if (attributes.hasOwnProperty("LIVE")) {
	            if (attributes.LIVE == "OFF") {
	                p.setState({ online: "未保存" });
	            } else {
	                p.setState({ online: "已保存" });
	            }
	        } else {
	            p.setState({ online: "--" });
	        }
	        if (attributes.hasOwnProperty("ILL")) {
	            p.setState({ lux: attributes.ILL + "" });
	        } else {
	            p.setState({ lux: "--" });
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.setState({ type: data[0].type });
	        p.setState({ title: data[0].name });
	        p.setState({ starttime: data[0].starttime });
	        p.setState({ endtime: data[0].endtime });
	        p.setState({ macid: data[0].macid });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    cmd: function cmd(cmdObj) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            // console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var deviceId = p.state.device;
	                var user = p.state.user;
	                p.getDataById(deviceId, user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	            if (dt.success) {
	                if (commonNew == 1) {
	                    p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                }
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {

	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/Illum.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '光照强度(lx)', value: p.state.lux }),
	                React.createElement(Label, { count: '2', title: '网络状态', value: p.state.online })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "14rem", marginTop: "3rem" } },
	                        React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: "images/main/detail/UIllum.png" })
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/18.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var VoiceSlider = __webpack_require__(313);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var BgmBtn = __webpack_require__(314);
	var Connect = __webpack_require__(292);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Msg = __webpack_require__(250);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            attributes: {},
	            status: false,
	            macid: "",
	            ddcmac: "",
	            title: "背景音乐测试",
	            type: "",
	            SAV: "", // 网络保存
	            SWI: "",
	            role: 0,
	            areagroupId: 0,
	            commonuse: -1,
	            count: 0,
	            SMD: ["PLS", "RPA", "SGC", "RDP"], // 循环 :  PLS:列表播放,RPA:全部循环,SGC:单曲循环,RDP:随机播放
	            SMDM: ["列表", "循环", "单曲", "随机"],
	            iconSMD: ["liebiao", "liebiaoxunhuan", "danquxunhuan", "suijibofang"],
	            SMDN: 0,
	            UDV: "", // 音量 : UP , DOWN
	            SMC: "", // 上一曲和下一曲:  UP , DOWN
	            SPS: ["PLY", "PUS"], // PLY 播放,PUS 暂停,TOG 反
	            iconSPS: ["zanting", "bofang"],
	            SPSN: 1,
	            SVL: 50, // 音量
	            LIVE: "ON",
	            height: 0,
	            width: 0,
	            alias: "",
	            starttime: "",
	            endtime: "",
	            SBN: "", // 读取蓝牙名称
	            SBC: "", // 读取蓝牙密码
	            HSW: "", // 0:没打开 1:打开
	            theme: "",
	            user: ""
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	        console.log("");
	    },
	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },
	    goBack: function goBack() {
	        history.go(-1);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(deviceid, user) {
	        var p = this;
	        if (user && deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getDataById: function getDataById(deviceid, user) {
	        var p = this;
	        if (user && deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	            console.log(attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            }
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.setState({ type: data[0].type });
	        p.setState({ title: data[0].name });
	        p.setState({ starttime: data[0].starttime });
	        p.setState({ endtime: data[0].endtime });
	        p.setState({ macid: data[0].macid });
	    },
	    doSwitch: function doSwitch() {
	        //  console.log("doSwitch");
	        var p = this;
	        var SWI = this.state.SWI;
	        var cmdObj = this.cmd_protocol();
	        if (SWI == "ON") {
	            p.setState({ SWI: "OFF" });
	            cmdObj.attributes["SWI"] = "OFF";
	        } else {
	            p.setState({ SWI: "ON" });
	            cmdObj.attributes["SWI"] = "ON";
	        }
	        this.cmd(cmdObj);
	    },

	    doLoop: function doLoop() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            if (this.state.HSW != "BIT") {
	                var t = parseInt(this.state.SMDN);
	                if (t < 3) {
	                    t = t + 1;
	                } else {
	                    t = 0;
	                }
	                this.setState({ SMDN: t });
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["SMD"] = this.state.SMD[t];
	                this.cmd(JSON.stringify(cmdStr));
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: "蓝牙模式下此操作不支持", timeout: 1000 });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },
	    doLastSong: function doLastSong() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            if (this.state.HSW != "BIT") {
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["SMC"] = "UP";
	                this.cmd(JSON.stringify(cmdStr));
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: "蓝牙模式下此操作不支持", timeout: 1000 });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },
	    doNextSong: function doNextSong() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            if (this.state.HSW != "BIT") {
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["SMC"] = "DOWN";
	                this.cmd(JSON.stringify(cmdStr));
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: "蓝牙模式下此操作不支持", timeout: 1000 });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },
	    doStop: function doStop() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            if (this.state.HSW != "BIT") {
	                var s = this.state.SPSN;
	                if (s < 1) {
	                    s = s + 1;
	                } else {
	                    s = 0;
	                }
	                this.setState({ SPSN: s });
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["SPS"] = this.state.SPS[s];
	                this.cmd(JSON.stringify(cmdStr));
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: "蓝牙模式下此操作不支持", timeout: 1000 });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },
	    doMute: function doMute() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes["SVL"] = 0;
	            this.cmd(JSON.stringify(cmdStr));
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },
	    doBlueTooth: function doBlueTooth() {
	        var p = this;
	        if (this.state.SWI == "ON") {
	            if (this.state.HSW == "BIT") {
	                this.setState({ HSW: "MIT" }); // 主界面
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["HSW"] = "MIT";
	                this.cmd(JSON.stringify(cmdStr));
	                var cmdStr1 = this.cmd_protocol();
	                cmdStr1.attributes["SWI"] = "ON";
	                this.cmd(JSON.stringify(cmdStr1));
	            } else {
	                this.setState({ HSW: "BIT" }); // 蓝牙界面
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["HSW"] = "BIT";
	                this.cmd(JSON.stringify(cmdStr));
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	        }
	    },

	    changeSliderValue: function changeSliderValue(v) {
	        var p = this;
	        if (v != this.state.SVL && this.state.SVL != null) {
	            if (this.state.SWI == "ON") {
	                p.setState({ SVL: v });
	                var cmdStr = this.cmd_protocol();
	                cmdStr.attributes["SVL"] = v;
	                this.cmd(JSON.stringify(cmdStr));
	                console.log(v);
	            } else {
	                p.refs.msg.setState({ show: true, type: "text", word: "请开启设备", timeout: 1000 });
	            }
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "LT-CTM";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            // console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var deviceId = p.state.device;
	                var user = p.state.user;
	                p.getDataById(deviceId, user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	            if (dt.success) {
	                if (commonNew == 1) {
	                    p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                }
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {

	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {},
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/bgm.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '音量', value: p.state.SVL }),
	                React.createElement(Label, { count: '2', title: '网络保存', value: p.state.online })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { className: 'itemLine', style: { clear: "both", marginTop: "1rem", width: "90%", marginLeft: "5%" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "8rem", width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "left", marginTop: "3rem", marginLeft: "4rem" } },
	                        React.createElement('i', { className: "iconfont icon-lanya " + (this.state.HSW == "BIT" ? "TBS" : "WZS"), style: { fontSize: "3rem" }, onClick: this.doBlueTooth })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "4rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.SWI == "ON" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "6rem", width: "100%", marginTop: "1rem", marginLeft: "1rem" } },
	                    React.createElement(BgmBtn, { text: this.state.SMDM[this.state.SMDN], icon: "iconfont icon-" + this.state.iconSMD[this.state.SMDN] + " TBS", flag: p.state.circleState == "OPEN" ? 1 : 0, 'data-id': 'circle', onClick: p.doLoop }),
	                    React.createElement(BgmBtn, { text: '上一首', icon: 'iconfont icon-shangyishou TBS', 'data-id': 'last', onClick: p.doLastSong }),
	                    React.createElement(BgmBtn, { text: this.state.SPSN == 0 ? "播放" : "暂停", icon: "iconfont icon-" + (this.state.SPSN == 0 ? "bofang" : "zanting") + " TBS", flag: p.state.playState == "CLOSE" ? 1 : 0, 'data-id': 'play', onClick: p.doStop }),
	                    React.createElement(BgmBtn, { text: '下一首', icon: 'iconfont icon-xiayishou TBS', 'data-id': 'next', onClick: p.doNextSong }),
	                    React.createElement(BgmBtn, { text: '静音', icon: 'iconfont icon-jingyin TBS', flag: p.state.WIN == "CLOSE" ? 1 : 0, 'data-id': 'mute', onClick: p.doMute })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'FS13', style: { width: "90%", marginLeft: "10%", marginTop: "5rem", color: "#b3abcc" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "left" } },
	                        "音量"
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { marginTop: "8rem", height: "6rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "2rem", marginTop: "4rem" } },
	                        React.createElement(VoiceSlider, { min: '0', max: '100', onchange: this.changeSliderValue })
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/10.
	 *
	 *    Slider :
	 *
	 *
	 *
	 *    eg: <Slider   title="音量控制" unit=" " min={0} max={100} start={50}  ref="ldtj"/>
	 *
	 *
	 **/
	'';

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            value: 0
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var _this = this;

	        var p = this;
	        var target = this.refs.rangeDom;
	        var min = this.props.min ? this.props.min : 0;
	        var max = this.props.max ? this.props.max : 100;
	        var start = this.props.start ? [this.props.start] : [min];

	        noUiSlider.create(target, {
	            start: 50,
	            tooltips: true,
	            range: {
	                'min': 0,
	                'max': 100
	            },
	            format: {
	                to: function to(value) {
	                    return parseInt(value);
	                },
	                from: function from(value) {
	                    return value;
	                }
	            }
	        });

	        target.noUiSlider.on('change', function (v, handle) {
	            if (_this.props.onchange) {
	                _this.props.onchange(parseInt(v));
	            }

	            p.setState({
	                value: parseInt(v)
	            });
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'range-container ' },
	            React.createElement('div', { className: " range-el range-single scolor", style: { width: "80%", margin: "0 auto", marginTop: "3rem" }, ref: 'rangeDom' }),
	            React.createElement('div', { className: 'BJ_DW_QC range-bottom' })
	        );
	    }
	});

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/11.
	 *
	 * footer
	 *
	 *         height : 高度
	 *          width : 宽度
	 *
	 *     eg:  <Footer viewTab = "1"/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {};
	    },

	    componentDidMount: function componentDidMount() {},

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: "bgmBtn", style: this.props.style ? this.props.style : {} },
	            React.createElement(
	                "div",
	                { className: " btn_w ", "data-id": this.props["data-id"] ? this.props["data-id"] : "", onClick: p.props.onClick ? p.props.onClick : "" },
	                React.createElement("i", { className: "iconfont icon-" + (p.props.icon ? p.props.icon : ""), style: { fontSize: "3.5rem" } })
	            ),
	            React.createElement(
	                "div",
	                { className: " text_w WZS" },
	                this.props.text
	            )
	        );
	    }
	});

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/17.
	 */
	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Footer = __webpack_require__(301);
	var Ajax = __webpack_require__(244);
	var DsCenter = __webpack_require__(302);
	var ConfigList = __webpack_require__(287);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);
	var OpWin = __webpack_require__(263);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Msg = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "通用",
	            attributes: null,
	            macid: null,
	            ddcmac: null,
	            type: null, // 1: 数据库中的类型id
	            typ: null,
	            SAV: null,
	            list: [],
	            currId: null,
	            currCid: null, // 当前操作的codeid

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },
	    myScroll: null,

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = JSON.parse(data[0].attributes);
	        p.setState({ title: data[0].name });
	        p.setState({ attributes: attributes });
	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ type: data[0].type });
	        p.setState({ typ: data[0].typ });
	        p.setState({ ddcid: data[0].ddcid });

	        if (attributes.hasOwnProperty("SAV")) {
	            p.setState({ SAV: attributes.SAV });
	        }
	        if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	            p.setState({ alias: data[0].alias });
	        }
	        p.configdata(data[0].macid);
	        p.getIrcodeList();
	    },
	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-tianjia1", text: "添加学习", type: "query", id: 9 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },

	    // 获取红外转发列表
	    getIrcodeList: function getIrcodeList() {
	        var p = this;
	        var user = p.state.user;
	        if (user) {
	            Ajax("POST", "getIrcodeByUserid", { deviceid: this.state.deviceid, ddcid: this.state.ddcid, userid: user.parentid }, function (dt) {
	                //console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.setState({ list: dt.data });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                } else {
	                    //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 2000});
	                }
	            });
	        }
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "IR-BYT";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    doOperate: function doOperate(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        var code = e.currentTarget.getAttribute("data-code");
	        if (id) {
	            this.refs.opWin.setState({
	                data: [{ name: "改名", id: 1, fid: id }, { name: "删除", id: 2, fid: id }, { name: "立即学习", id: 3, fid: id }]
	            });
	            this.setState({
	                currCid: code,
	                currId: id
	            });
	            this.refs.opWin.show();
	        }
	    },

	    doDone: function doDone(id, fid) {
	        console.log("id: " + id + " - fid: " + fid);
	        switch (parseInt(id)) {
	            case 1:
	                this.updateCode();break;
	            case 2:
	                this.delcode(fid);break;
	            case 3:
	                this.doLearn(fid);break;
	        }
	        this.refs.opWin.hide();
	    },
	    updateCode: function updateCode() {
	        if (this.refs.itemname) {
	            this.refs.itemname.setState({ show: true });
	        }
	    },

	    doneClick: function doneClick(name) {
	        var p = this;
	        var user = this.state.user;
	        var flag = true;
	        var list = this.state.list;
	        for (var i = 0; i < list.length; i++) {
	            var obj = list[i];
	            if (name == obj.name) {
	                flag = false;
	            }
	        }

	        if (flag) {
	            if (this.state.currId && name) {
	                Ajax("POST", "udateIrcode", { id: this.state.currId, name: name }, function (dt) {
	                    if (dt.success) {
	                        p.refs.msg.setState({ show: true, type: "text", word: "名字修改成功", timeout: 1000 });
	                        setTimeout(function () {
	                            p.getDataById(user);
	                        }, 1000);
	                    }
	                });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "名字已存在", timeout: 1000 });
	        }
	    },

	    delcode: function delcode(id) {
	        var p = this;
	        var user = this.state.user;
	        if (id && user) {
	            Ajax("POST", "deleteIrcodeById", { id: id }, function (dt) {
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 1000 });
	                    p.getDataById(user);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },

	    doLearn: function doLearn() {
	        var p = this;
	        var user = this.state.user;
	        if (this.state.currId && this.state.currCid && user != null) {
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes["LEA"] = this.state.currCid;
	            this.cmd(cmdStr, function (f) {
	                if (f) {
	                    Ajax("POST", "udateIrcode", { id: this.state.currId, status: 1 }, function (dt) {
	                        //console.log("state dt:"+JSON.stringify(dt));
	                        if (dt.success) {
	                            p.getDataById(user);
	                        }
	                    });
	                }
	            });
	        }
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.addStudy();break; // 添加学习

	            default:
	                break;
	        }
	    },

	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                var user = p.state.user;
	                p.getDataById(user);
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    addStudy: function addStudy() {
	        if (this.refs.newname) {
	            this.refs.newname.setState({ show: true });
	        }
	    },
	    // 添加一个学习
	    addOneIrcode: function addOneIrcode(name) {
	        var p = this;
	        var user = this.state.user;
	        var flag = true;
	        var commonList = this.state.list;
	        for (var i = 0; i < commonList.length; i++) {
	            var obj = commonList[i];
	            if (name == obj.name) {
	                flag = false;
	            }
	        }
	        if (flag && user) {
	            if (user) {
	                Ajax("POST", "addOneIrcode", { deviceid: p.state.deviceid, ddcid: p.state.ddcid, userid: user.parentid, name: name }, function (dt) {
	                    if (dt.success) {
	                        p.getDataById(user);
	                    }
	                });
	            }
	        } else {
	            p.refs.msg.setState({ show: true, type: "text", word: "名字已存在", timeout: 1000 });
	        }
	    },

	    render: function render() {
	        var p = this;

	        var data = "";
	        var list = this.state.list;
	        var t = 0;
	        if (list.length > 0) {
	            data = list.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "t_" + t++, style: { height: "5rem", borderBottom: "1px solid #efefef" } },
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "20%", height: "4.5rem", lineHeight: "4.5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_JZ TB4', style: { marginTop: "0.75rem", width: "3.5rem", height: "3.5rem", borderRadius: "50%", textAlign: "center", lineHeight: "3.5rem" } },
	                            React.createElement('i', { className: "iconfont icon-A-hongwaiyaokongqi ", style: { fontSize: "2.3rem", color: "white" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ TBS FS14 itemE', style: { height: "3rem", lineHeight: "4rem", width: "60%" } },
	                        obj.name ? obj.name : ""
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: ' BJ_DW_FY ', style: { width: "20%", lineHeight: "5rem", textAlign: "center" }, 'data-id': obj.id, 'data-code': obj.code, onClick: p.doOperate },
	                        React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem", color: "#cdccd2" } })
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ B1 FS11 ', style: { height: "2rem", width: "10%" } },
	                        obj.code
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ B1 FS11 ', style: { height: "2rem" } },
	                        obj.state ? "已学习" : "未学习"
	                    ),
	                    React.createElement('div', { className: 'BJ_DW_QC' })
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/tv.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '1', title: '网络保存', value: '已保存' })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk', style: { paddingTop: "2rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "88%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        data
	                    )
	                )
	            ),
	            React.createElement(Footer, { viewTab: '3', deviceid: p.state.deviceid }),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(OpWin, { title: '操作选择', height: '10rem', ref: 'opWin', doDone: p.doDone }),
	            React.createElement(InputSelect, { ref: 'itemname', title: '码重命名', doDone: this.doneClick }),
	            React.createElement(InputSelect, { ref: 'newname', title: '添加学习', doDone: this.addOneIrcode }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice })
	        );
	    }
	});

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/3/26.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var Footer = __webpack_require__(301);
	var Msg = __webpack_require__(250);
	var ConfigList = __webpack_require__(287);
	var OperatingListWin = __webpack_require__(263);
	var Ajax = __webpack_require__(244);
	var Loading = __webpack_require__(271);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id ? this.props.params.id : 0,
	            f: Url.getParameterByName("f"),
	            title: "空调",
	            attributes: null,
	            macid: null,
	            ddcmac: null,
	            type: null, // 1: 数据库中的类型id
	            typ: null,
	            SAV: "",
	            SMD: "COOL",
	            SMDE: "1", // 1:制冷 0:制热
	            TUN: "CLOSE",
	            STP: "26",
	            speed: ["大风", "中风", "小风"],
	            SSP: 3, // 3是小风,2是中风,1是大风

	            attr: [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]], [[23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]], [[45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]]],

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员

	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user && this.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: this.state.deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });
	            p.setState({ type: data[0].type });
	            p.setState({ title: data[0].name });
	            p.setState({ macid: data[0].macid });

	            //p.refs.speed.setState({select: 1});
	            p.configdata(data[0].macid);

	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({ SAV: attributes.SAV });
	            }

	            if (attributes.hasOwnProperty("STP")) {
	                p.setState({ STP: attributes.STP });
	            }
	            if (attributes.hasOwnProperty("SMD")) {
	                p.setState({ SMD: attributes.SMD });
	                if (attributes.SMD == "HOT") {
	                    p.setState({ SMDE: 0 });
	                }
	            }
	            if (attributes.hasOwnProperty("SSP")) {
	                var num = 3;
	                if (attributes.SSP == "LOW") {
	                    num = 3;
	                } else if (attributes.SSP == "MID") {
	                    num = 2;
	                } else {
	                    num = 1;
	                }
	                p.setState({ SSP: num });
	                p.refs.speed.setState({ select: num });
	            }
	        }
	    },

	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata = null;
	        if (macid == "0000000000000000") {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata });
	    },

	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doClick: function doClick(e) {
	        var str = e.currentTarget.getAttribute("data-id");
	        console.log("str : " + str);
	        this.setState({ WIN: str });
	    },

	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes != null) {
	            if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	                cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	                cmdObj.attributes["TYP"] = "IR-BYT";
	            } else {
	                if (this.state.alias && this.state.alias != this.state.macid) {
	                    cmdObj.attributes["NAM"] = this.state.alias;
	                }
	            }
	            console.log("cmdStr : " + JSON.stringify(cmdObj));
	            Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	                console.log(" dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    cb(true);
	                } else {
	                    cb(false);
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	                }
	            });
	        } else {
	            console.log("attributes没有值");
	        }
	    },
	    doSwitch: function doSwitch() {
	        var p = this;
	        var t = null;
	        if (p.state.TUN == "OPEN") {
	            t = 67;
	            p.setState({ TUN: "CLOSE" });
	        } else {
	            t = 68;
	            p.setState({ TUN: "OPEN" });
	        }
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes = { SND: t };
	        this.cmd(cmdObj, function (s) {});
	    },

	    // 发送 cmd
	    cmdControl: function cmdControl(t) {
	        //console.log("t : " + t);
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes = { SND: t };
	        this.cmd(cmdObj, function (s) {});
	    },

	    sendModel: function sendModel(e) {
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-id");
	        if (this.state.TUN == "OPEN") {
	            var s = this.state.SSP;
	            var t = parseInt(this.state.STP);

	            var value = "COOL";
	            if (data == "1") {
	                value = "COOL";
	            } else {
	                value = "HOT";
	            }
	            p.setState({ SMDE: data });
	            p.setState({ SMD: value });
	            console.log("+++++: " + t, data, s, "SMD", value);
	            this.aircondition(t, data, s, "SMD", value);
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },
	    doSpeed: function doSpeed(num) {
	        var p = this;
	        console.log("num : " + num);
	        if (this.state.TUN == "OPEN") {
	            var m = this.state.SMDE;
	            var t = parseInt(this.state.STP);
	            var value = "LOW";
	            if (num == 3) {
	                value = "LOW";
	            } else if (num == 2) {
	                value = "MID";
	            } else {
	                value = "HIGH";
	            }
	            this.setState({ SSP: num });
	            p.refs.speed.setState({ select: num });
	            this.aircondition(t, m, num, "SSP", value);
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 1500 });
	        }
	    },

	    // 加温
	    add: function add() {
	        var state = this.state.TUN;
	        var m = this.state.SMDE;
	        var s = this.state.SSP;
	        var t = parseInt(this.state.STP);
	        if (state == "OPEN") {
	            if (t < 29) {
	                // 温度上限,包括 29度
	                t = t + 1;
	                console.log("--:" + t, m, s, "STP", t);
	                this.setState({ STP: t });
	                this.aircondition(t, m, s, "STP", t);
	            } else {
	                this.refs.msg.setState({ show: true, word: "已达上限", timeout: 500 });
	            }
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 800 });
	        }
	    },
	    // 减温
	    cut: function cut() {
	        var state = this.state.TUN;
	        var m = this.state.SMDE;
	        var s = this.state.SSP;
	        var t = parseInt(this.state.STP);
	        if (state == "OPEN") {
	            if (t > 19) {
	                // 温度下限,包括  19度
	                t = t - 1;
	                console.log("--:" + t, m, s, "STP", t);
	                this.setState({ STP: t });
	                this.aircondition(t, m, s, "STP", t);
	            } else {
	                this.refs.msg.setState({ show: true, word: "已达下限", timeout: 500 });
	            }
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 800 });
	        }
	    },

	    /**温度控制*/
	    aircondition: function aircondition(t, m, s, key, value) {
	        var cmd = this.cmd_protocol();
	        var attr = this.state.attr[s - 1];
	        if (attr) {
	            var attr2 = attr[m];
	            if (attr2) {
	                var val = attr2[t - 19];
	                cmd.attributes = { SND: val };
	                this.cmd(cmd, function (f) {
	                    if (f) {
	                        this.sendDeviceAttr(key, value);
	                    }
	                });
	            }
	        }
	    },

	    // 更新属性
	    sendDeviceAttr: function sendDeviceAttr(key, value) {
	        var p = this;
	        if (key && value) {
	            Ajax("POST", "updateDeviceAttr", { id: this.state.deviceid, key: key, value: value }, function (dt) {
	                console.log(" updateDeviceAttr dt : " + JSON.stringify(dt));
	                if (dt && dt.success) {
	                    var user = p.state.user;
	                    p.getDataById(user);
	                }
	            });
	        }
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                this.getGroupByUser();break; //获取用户的区域
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },

	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },

	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },

	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {
	                var user = p.state.user;
	                p.getDataById(user);
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },

	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },

	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },

	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },

	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },

	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    getType: function getType() {
	        this.refs.operatingListWin.setState({
	            data: [{ name: "空调", id: 2, fid: 1 }, { name: "窗帘", id: 4, fid: 1 }]
	        });
	        this.refs.operatingListWin.show();
	    },

	    selectItem: function selectItem(id, fid) {
	        var p = this;
	        var deviceid = this.state.deviceid;
	        if (id) {
	            Ajax("POST", "updateDeviceTitleid", { id: deviceid, titleid: id }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.operatingListWin.hide();
	                    var user = p.state.user;
	                    p.getDataById(user);
	                    p.setState({ titleid: id });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	        }
	    },

	    render: function render() {
	        var p = this;

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title + "(空调)", leftIcon: 'xiaojiantou2',
	                leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/air.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '4', title: '温度', value: p.state.STP }),
	                React.createElement(Label, { count: '4', title: '模式', value: p.state.SMDE ? "制冷" : "制热" }),
	                React.createElement(Label, { count: '4', title: '风速', value: p.state.speed[parseInt(p.state.SSP) - 1] }),
	                React.createElement(Label, { count: '4', title: '网络保存', value: '已保存' })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.TUN == "OPEN" ? 1 : 0,
	                            doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk' },
	                    React.createElement('img', { src: '../images/main/dial.png', className: 'clrl6Img' }),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Wd' },
	                        "温度"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Text' },
	                        React.createElement(
	                            'div',
	                            { className: 'FS24',
	                                style: { width: "62%", float: "left", textAlign: "right", fontSize: "3.5rem" } },
	                            p.state.STP
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Temp' },
	                            "℃"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FY', style: { marginRight: "3.5rem" }, onClick: p.cut },
	                            "-"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FZ', style: { marginLeft: "3.5rem" }, onClick: p.add },
	                            "+"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FY', style: { marginRight: "4rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhileng " + (p.state.SMD == "COOL" ? "TBS" : "GR"),
	                                'data-id': 1, onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FZ', style: { marginLeft: "3.5rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhire " + (p.state.SMD == "HOT" ? "TBS" : "GR"),
	                                'data-id': 0, onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "1rem" } },
	                    React.createElement(SpeedSlider, { ref: 'speed', doChange: p.doSpeed })
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Footer, { viewTab: '2', deviceid: p.state.deviceid }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(OperatingListWin, { height: '6rem', title: '选择类型', ref: 'operatingListWin', doDone: this.selectItem }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/3/26.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var CurtainBtn = __webpack_require__(294);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var ConfigList = __webpack_require__(287);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var InputSelect = __webpack_require__(280);
	var Loading = __webpack_require__(271);
	var OperatingListWin = __webpack_require__(263);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id ? this.props.params.id : 0,
	            f: Url.getParameterByName("f"),
	            title: "空调",
	            titleid: 1,
	            attributes: null,
	            ddcmac: null,
	            macid: null,
	            type: null,
	            typ: null,
	            WIN: "STOP",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员

	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(attributes);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });
	            p.setState({ title: data[0].name });
	            p.setState({ macid: data[0].macid });
	            p.setState({ ddcmac: data[0].ddcmac });
	            p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	            p.setState({ type: data[0].type });
	            p.setState({ typ: data[0].typ });
	            p.configdata(data[0].macid);

	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({ SAV: attributes.SAV });
	            }
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }
	            if (attributes.hasOwnProperty("SW1") && attributes.hasOwnProperty("SW2")) {
	                if (attributes.SW1 == "ON" && attributes.SW2 == "OFF") {
	                    p.setState({ WIN: "OPEN" });
	                }
	                if (attributes.SW1 == "OFF" && attributes.SW2 == "ON") {
	                    p.setState({ WIN: "CLOSE" });
	                }
	                if (attributes.SW1 == "OFF" && attributes.SW2 == "OFF") {
	                    p.setState({ WIN: "STOP" });
	                }
	            }
	        }
	    },
	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata = null;
	        if (macid == "0000000000000000") {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-peizhi", text: "类型选择", type: "type", id: 9 }];
	        } else {
	            configdata = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }, { iconfont: "icon-peizhi", text: "类型选择", type: "type", id: 9 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* Ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doClick: function doClick(e) {
	        var p = this;
	        var str = e.currentTarget.getAttribute("data-id");
	        console.log("str : " + str);
	        var cmdStr1 = this.cmd_protocol();
	        var cmdStr2 = this.cmd_protocol();
	        if (str == "OPEN") {
	            cmdStr1.attributes = { "SW2": "OFF" };
	            this.cmd(cmdStr1, function (s) {
	                if (s) {
	                    cmdStr2.attributes = { "SW1": "ON" };
	                    setTimeout(function () {
	                        p.cmd(cmdStr2, function (s1) {
	                            p.setState({ WIN: str });
	                        });
	                    }, 800);
	                }
	            });
	        } else if (str == "CLOSE") {
	            cmdStr1.attributes = { "SW1": "OFF" };
	            this.cmd(cmdStr1, function (s) {
	                if (s) {
	                    cmdStr2.attributes = { "SW2": "ON" };
	                    setTimeout(function () {
	                        p.cmd(cmdStr2, function (s1) {
	                            p.setState({ WIN: str });
	                        });
	                    }, 800);
	                }
	            });
	        } else {
	            cmdStr1.attributes = { "SW2": "OFF" };
	            this.cmd(cmdStr1, function (s) {
	                if (s) {
	                    cmdStr2.attributes = { "SW1": "OFF" };
	                    setTimeout(function () {
	                        p.cmd(cmdStr2, function (s1) {
	                            p.setState({ WIN: str });
	                        });
	                    }, 800);
	                }
	            });
	        }
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                this.getGroupByUser();break; //获取用户的区域
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.getType();break;
	            default:
	                break;
	        }
	    },

	    getType: function getType() {
	        var p = this;
	        this.refs.operatingListWin.setState({
	            data: [{ name: "空调", id: 2, fid: 1 }, { name: "窗帘", id: 4, fid: 1 }]
	        });
	        this.refs.operatingListWin.show();
	    },

	    selectItem: function selectItem(id, fid) {
	        var p = this;
	        var deviceid = this.state.deviceid;
	        if (id) {
	            Ajax("POST", "updateDeviceTitleid", { id: deviceid, titleid: id }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.operatingListWin.hide();
	                    if (id == 4) {
	                        var user = p.state.user;
	                        p.getDataById(user);
	                    } else {
	                        location.href = "#clrl6/" + p.state.deviceid;
	                    }
	                    p.setState({ titleid: id });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "设备类型选择失败", timeout: 1500 });
	        }
	    },

	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title + "(窗帘)", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/wdrxj.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "19rem", width: "80%", marginLeft: "10%" } },
	                    React.createElement(CurtainBtn, { text: '打开', icon: 'dakai', flag: p.state.WIN == "OPEN" ? 1 : 0, 'data-id': 'OPEN', onClick: p.doClick }),
	                    React.createElement(CurtainBtn, { text: '暂停', icon: 'zanting', flag: p.state.WIN == "STOP" ? 1 : 0, 'data-id': 'STOP', onClick: p.doClick }),
	                    React.createElement(CurtainBtn, { text: '关闭', icon: 'bihe', flag: p.state.WIN == "CLOSE" ? 1 : 0, 'data-id': 'CLOSE', onClick: p.doClick })
	                )
	            ),
	            React.createElement(OperatingListWin, { height: '6rem', title: '选择类型', ref: 'operatingListWin', doDone: this.selectItem }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/18.
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var SpeedSlider = __webpack_require__(298);
	var Label = __webpack_require__(290);
	var SwitchBtn = __webpack_require__(259);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var Ajax = __webpack_require__(244);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "温控板",
	            SWI: "",
	            SSP: "",
	            SMD: "",
	            LIVE: "ON",
	            STP: 25, // [18,23]
	            RTP: 25,
	            speed: ["小风", "中风", "大风"],
	            sIndex: 1,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            if (attributes.hasOwnProperty("LIVE")) {
	                p.setState({
	                    LIVE: attributes.LIVE
	                });
	            }
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("AIF")) {
	                var arf = attributes.AIF;
	                var SWI = parseInt(arf.substr(0, 1));
	                var SSP = parseInt(arf.substr(1, 1));
	                var SMD = parseInt(arf.substr(2, 1));
	                var STP = parseInt(arf.substr(3, 2));
	                var RTP = parseInt(arf.substr(5, 2));
	                if (SWI == 1) {
	                    SWI = "ON";
	                } else {
	                    SWI = "OFF";
	                }
	                switch (SSP) {
	                    case 1:
	                        SSP = "LOW";break;
	                    case 2:
	                        SSP = "MID";break;
	                    case 3:
	                        SSP = "HIGH";break;
	                    case 4:
	                        SSP = "AUTO";break;
	                    default:
	                        SSP = "LOW";break;
	                }
	                switch (SMD) {
	                    case 0:
	                        SMD = "COOL";break;
	                    case 1:
	                        SMD = "HOT";break;
	                    case 2:
	                        SMD = "AIR";break;
	                    default:
	                        SMD = "COOL";break;
	                }
	                p.setState({
	                    SWI: SWI,
	                    SSP: SSP,
	                    SMD: SMD,
	                    STP: STP,
	                    RTP: RTP
	                });
	            }
	        }

	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.setState({ type: data[0].type });
	        p.setState({ title: data[0].name });
	        p.setState({ macid: data[0].macid });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;

	        }
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (v) {});
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(true);
	            } else {
	                cb(false);
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (v) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.refs.groupwin.doShow(GroupList);
	                Ajax("POST", "getGroupByDeviceId", { deviceid: p.state.deviceid }, function (dt) {
	                    if (dt && dt.success) {
	                        var groupdevice = dt.data;
	                        var groupNew = [];
	                        for (var i = 0; i < groupdevice.length; i++) {
	                            groupNew.push({
	                                id: groupdevice[i].groupid
	                            });
	                        }
	                        p.refs.groupwin.getSelect(groupNew);
	                    }
	                });
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        //  console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    doSwitch: function doSwitch(dataStr) {
	        //console.log("dataStr:"+dataStr);
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        if (this.state.SWI == "ON") {
	            cmdObj.attributes["SWI"] = "OFF";
	            this.setState({ SWI: "OFF" });
	        } else {
	            cmdObj.attributes["SWI"] = "ON";
	            this.setState({ SWI: "ON" });
	        }

	        cmdObj.attributes["STP"] = this.state.STP;
	        cmdObj.attributes["SMD"] = this.state.SMD;
	        cmdObj.attributes["SSP"] = this.state.SSP;

	        this.cmd(cmdObj, function (sucess) {
	            if (!sucess) {
	                if (p.state.SWI == "ON") {
	                    p.setState({ SWI: "OFF" });
	                } else {
	                    p.setState({ SWI: "ON" });
	                }
	            }
	        });
	    },
	    sendModel: function sendModel(e) {
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-id");
	        var arr = data.split(",");
	        var cmdStr = this.cmd_protocol();
	        if (this.state.SWI == "ON") {
	            cmdStr.attributes[arr[0]] = arr[1];
	            cmdStr.attributes["SWI"] = this.state.SWI;
	            cmdStr.attributes["SSP"] = this.state.SSP;
	            cmdStr.attributes["STP"] = this.state.STP;
	            this.cmd(cmdStr, function (success) {
	                if (success) {
	                    p.setState({ SMD: arr[1] });
	                }
	            });
	        } else {
	            this.refs.msg.setState({ show: true, word: "请先打开设备", timeout: 800 });
	        }
	    },
	    doSpeed: function doSpeed(v) {
	        // var p = this;
	        if (this.state.SWI == "ON") {
	            var cmdStr = this.cmd_protocol();
	            if (v == 0) {
	                cmdStr.attributes["SSP"] = "LOW";
	                this.setState({ speedIndex: 0 });
	                this.setState({ SSP: "LOW" });
	            }
	            if (v == 50) {
	                cmdStr.attributes["SSP"] = "MID";
	                this.setState({ speedIndex: 1 });
	                this.setState({ SSP: "MID" });
	            }
	            if (v == 100) {
	                cmdStr.attributes["SSP"] = "HIGH";
	                this.setState({ speedIndex: 2 });
	                this.setState({ SSP: "HIGH" });
	            }
	            cmdStr.attributes["SWI"] = this.state.SWI;
	            cmdStr.attributes["SMD"] = this.state.SMD;
	            cmdStr.attributes["STP"] = this.state.STP;
	            this.cmd(cmdStr, function (success) {});
	        } else {
	            this.refs.msg.setState({ show: true, word: "请打开设备", timeout: 800 });
	        }
	    },
	    /*升温*/
	    add: function add() {
	        if (this.state.SWI == "ON") {
	            var t = parseInt(this.state.STP);
	            if (t < 32) {
	                // 温度不能超过 32 度
	                t = t + 1;
	                this.setState({ STP: t });
	                this.sendTemp(t);
	            } else {
	                this.refs.msg.setState({ show: true, type: "text", word: "已达上限", timeout: 800 });
	            }
	            console.log("temp : " + t);
	        } else {
	            this.refs.msg.setState({ show: true, type: "text", word: "请先打开设备", timeout: 800 });
	        }
	    },
	    /*降温*/
	    cut: function cut() {
	        if (this.state.SWI == "ON") {
	            var t = parseInt(this.state.STP);
	            if (t > 18) {
	                // 温度不能低于 32 度
	                t = t - 1;
	                this.setState({ STP: t });
	                this.sendTemp(t);
	            } else {
	                this.refs.msg.setState({ show: true, type: "text", word: "已达下限", timeout: 800 });
	            }
	            console.log("temp : " + t);
	        } else {
	            this.refs.msg.setState({ show: true, type: "text", word: "请先打开设备", timeout: 800 });
	        }
	    },
	    sendTemp: function sendTemp(t) {
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes["STP"] = t;
	        cmdStr.attributes["SWI"] = this.state.SWI;
	        cmdStr.attributes["SMD"] = this.state.SMD;
	        cmdStr.attributes["SSP"] = this.state.SSP;
	        this.cmd(cmdStr, function (success) {
	            if (success) {
	                p.setState({
	                    STP: t
	                });
	            }
	        });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/air.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '4', title: '温度', value: p.state.STP }),
	                React.createElement(Label, { count: '4', title: '模式', value: p.state.SMD == "COOL" ? "制冷" : "制热" }),
	                React.createElement(Label, { count: '4', title: '风速', value: p.state.speed[parseInt(p.state.sIndex) - 1] }),
	                React.createElement(Label, { count: '4', title: '网络保存', value: '已保存' })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, 'data-id': this.state.SWI == "ON" ? 1 : 0, choose: this.state.SWI == "ON" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'clrl6Imgk' },
	                    React.createElement('img', { src: '../images/main/dial.png', className: 'clrl6Img' }),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Wd' },
	                        "温度"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Text' },
	                        React.createElement(
	                            'div',
	                            { className: 'FS24', style: { width: "62%", float: "left", textAlign: "right", fontSize: "3.5rem" } },
	                            p.state.STP
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'FS13', style: { lineHeight: "5rem", textIndent: "0.1em", width: "38%", float: "left", textAlign: "left", fontSize: "1.5rem" } },
	                            "℃"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FY', style: { marginRight: "3.5rem" }, onClick: p.cut },
	                            "-"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Btn BJ_DW_FZ', style: { marginLeft: "3.5rem" }, onClick: p.add },
	                            "+"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FY', style: { marginRight: "4rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhileng " + (p.state.SMD == "COOL" ? "TBS" : "GR"), 'data-id': "SMD,COOL", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'clrl6Btnk' },
	                        React.createElement(
	                            'div',
	                            { className: 'clrl6Mod BJ_DW_FZ', style: { marginLeft: "3.5rem" } },
	                            React.createElement('i', { className: "iconfont icon-zhire " + (p.state.SMD == "HOT" ? "TBS" : "GR"), 'data-id': "SMD,HOT", onClick: p.sendModel, style: { fontSize: "4rem" } })
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", marginTop: "2.5rem" } },
	                    React.createElement(SpeedSlider, { ref: 'speed', doChange: p.doSpeed })
	                )
	            ),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName })
	        );
	    }
	});

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/3/21.
	 */

	'';

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Slider = __webpack_require__(291);
	var Label = __webpack_require__(290);
	var Ajax = __webpack_require__(244);
	var CurtainBtn = __webpack_require__(294);
	var Connect = __webpack_require__(292);
	var Msg = __webpack_require__(250);
	var GroupWin = __webpack_require__(284);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "6路脉冲",
	            count: 0,
	            attributes: null,
	            alias: "",
	            status: false,
	            macid: 0,
	            ddcmac: 0,
	            type: "",
	            typ: "", // 就是 devicetype 表中对应该 typ
	            SAV: "",
	            LIVE: "ON",
	            user: null,
	            role: -1, // 0为管理员,其他为非管理员

	            currCH: ""
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;

	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            this.setState({ role: user.role });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ title: data[0].name });
	                p.setState({ attributes: attributes });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });
	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ SAV: attributes.SAV });
	                p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	                p.configdata(data[0].macid);
	            } catch (e) {
	                console.log("e : " + e);
	                console.log("e : " + JSON.stringify(e));
	            }
	        }
	    },
	    configdata: function configdata(macid) {
	        var p = this;
	        var configdata1 = null;
	        if (macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdStr) {
	        var p = this;
	        var cmdObj = cmdStr;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = this.state.typ;
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    doSwitch: function doSwitch(e) {
	        var t = e.currentTarget.getAttribute("data-id");
	        document.getElementById("ID_" + t).style.backgroundColor = "#efefef";
	        setTimeout(function () {
	            document.getElementById("ID_" + t).style.backgroundColor = "";
	        }, 200);

	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes["SW" + t] = "ON";
	        this.cmd(cmdStr);
	    },

	    sendCmd: function sendCmd(t, SWI) {
	        var cmdStr = this.cmd_protocol();
	        var SW = "SW" + t;
	        cmdStr.attributes = _defineProperty({}, SW, SWI);
	        this.cmd(cmdStr);
	    },

	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    var GroupList = [];
	                    var icondata = dt.data;
	                    for (var i in icondata) {
	                        GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                    }
	                    //    p.setState({GroupList:GroupList});
	                    p.refs.groupwin.doShow(GroupList);
	                }
	            });
	        }
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1000 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1000 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1000 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1000 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    setNameRoad: function setNameRoad(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        var t = e.currentTarget.getAttribute("data-id");
	        console.log("setNameRoad : " + t);
	        this.setState({ currCH: t });
	        this.refs.itemname.setState({ show: true });
	    },

	    doneClick: function doneClick(name) {
	        var p = this;
	        var id = p.state.currCH;
	        var attributes = this.state.attributes;
	        attributes["CH" + id] = name;
	        if (id && attributes) {
	            console.log("attributes: " + JSON.stringify(attributes));
	            Ajax("POST", "updateAttri", { devid: this.state.deviceid, attr: JSON.stringify(attributes), macid: this.state.ddcmac }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "设置成功", timeout: 1000 });
	                    //p.refs.renameRoad.setState({show:false});
	                    var user = p.state.user;
	                    p.getDataById(user);
	                } else {
	                    console.log("msg : " + dt.msg);
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1000 });
	                }
	            });
	        }
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;
	        var count = 6;
	        var list = [];
	        for (var i = 0; i < count; i++) {
	            list.push(i);
	        }
	        var data = "";
	        var t = 0;
	        if (list.length > 0 && p.state.attributes != null) {
	            data = list.map(function (i) {
	                var str = "";
	                var d = i + 1;
	                switch (d) {
	                    case 1:
	                        str = "一";break;
	                    case 2:
	                        str = "二";break;
	                    case 3:
	                        str = "三";break;
	                    case 4:
	                        str = "四";break;
	                    case 5:
	                        str = "五";break;
	                    case 6:
	                        str = "六";break;
	                }
	                return React.createElement(
	                    'div',
	                    { key: "t_" + ++t },
	                    React.createElement(
	                        'div',
	                        { style: { clear: "both", height: "4rem", lineHeight: "4rem", width: "90%", marginLeft: "5%" }, id: "ID_" + t, 'data-id': d, onClick: p.doSwitch },
	                        React.createElement(
	                            'div',
	                            { className: 'FS13 BJ_DW_FZ', style: { marginLeft: "2rem", color: "#b3abcc" } },
	                            p.state.attributes["CH" + t] ? p.state.attributes["CH" + t] : "按键" + str
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'clpu6Item', 'data-id': d, onClick: p.setNameRoad },
	                            React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                        )
	                    ),
	                    React.createElement('div', { className: 'itemLine', style: { clear: "both", width: "90%", marginLeft: "5%" } })
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: p.state.role == 0 ? "gengduo" : "", rightClick: p.state.role == 0 ? this.doRight : "" }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/swtk.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '1', title: '网络保存', value: this.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { className: 'itemLine', style: { clear: "both", marginTop: "3rem", width: "90%", marginLeft: "5%" } }),
	                data
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(InputSelect, { ref: 'itemname', title: '按键重命名', doDone: this.doneClick }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon })
	        );
	    }
	});

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	
	//酒店锁

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var ListWin = __webpack_require__(321);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "锁",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: "",
	            BAT: "",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;

	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });

	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("BAT")) {
	                if (attributes.BAT < 2.5) {
	                    p.setState({ BAT: "电量过低" });
	                } else {
	                    p.setState({ BAT: attributes.BAT });
	                }
	            } else {
	                p.setState({ BAT: "--" });
	            }
	            if (attributes.hasOwnProperty("CIN")) {
	                p.setState({
	                    CIN: attributes.CIN
	                });
	            } else {
	                p.setState({
	                    CIN: ""
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            } else {
	                p.setState({
	                    SAV: ""
	                });
	            }
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }, { iconfont: "icon-mima", text: "修改密码", type: "info", id: 9 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });

	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "DL-HTL";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(dt.success);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    openDoor: function openDoor() {
	        console.log("openDoor");
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes.LCK = "OPEN";
	        this.cmd(cmdStr, function (success) {
	            if (!success) {
	                this.refs.msg.setState({
	                    word: "控制失败",
	                    timeout: 1500
	                });
	            }
	        });
	    },

	    showList: function showList() {
	        var p = this;
	        if (p.state.macid != "0000000000000000") {
	            p.refs.list.show(p.state.macid);
	        } else {
	            p.refs.msg.setState({ show: true, type: "组没有统计数据", word: dt.msg, timeout: 800 });
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.updatePWD();break;
	            default:
	                break;

	        }
	    },
	    updatePWD: function updatePWD() {
	        this.refs.doorpsw.setState({ show: true });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                //console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    getDoorNewPSW: function getDoorNewPSW(text) {
	        var p = this;
	        var str = /^\d{6}$/;
	        if (str.test(text)) {
	            this.setState({ CIN: text });
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes.CIN = text;
	            this.cmd(cmdStr, function (s) {});
	            this.refs.loading.setState({
	                show: true,
	                timeout: 6000
	            });
	            setTimeout(function () {
	                p.getpwd();
	            }, 6000);
	        } else {
	            p.refs.msg.setState({ show: true, word: "请输入6位数字", timeout: 1500 });
	        }
	    },
	    getpwd: function getpwd() {
	        var p = this;
	        var macid = this.state.macid;
	        if (macid && macid != "0000000000000000") {
	            Ajax("POST", "getLKpasswordbyMac", { macid: macid }, function (dt) {
	                if (dt.success) {
	                    if (dt.data.hasOwnProperty("CIN")) {
	                        if (dt.data.CIN == p.state.CIN) {
	                            p.refs.msg.setState({ show: true, word: "修改成功", timeout: 1500 });
	                        } else {
	                            p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: "" + p.state.title + "暂无反应", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "不可修改密码", timeout: 1500 });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/lock.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '电量显示(V)', value: p.state.BAT }),
	                React.createElement(Label, { count: '3', title: '密码显示', value: p.state.CIN ? p.state.CIN : "--" }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: "lockBtnB" },
	                        React.createElement(
	                            'div',
	                            { className: 'lockBtn', onClick: p.openDoor },
	                            "开门"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "3rem", float: "right", marginRight: "3rem", marginTop: "10rem" }, onClick: p.showList },
	                    React.createElement('i', { className: "clr1mEchart iconfont icon-liebiao", style: { fontSize: "3rem" } })
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(ListWin, { ref: 'list' }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName }),
	            React.createElement(InputSelect, { ref: 'doorpsw', doDone: this.getDoorNewPSW })
	        );
	    }
	});

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by zhaochong on 2018/2/6.
	 */

	'';

	var React = __webpack_require__(24);
	var ajax = __webpack_require__(244);
	var MsgWin = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            macid: "",
	            lockControlList: []
	        };
	    },
	    list: "",
	    myScroll: "",
	    scrollTop: "",
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        console.log("listWin");
	        this.getData();
	    },
	    getData: function getData() {
	        var p = this;
	    },
	    show: function show(macid) {
	        var p = this;
	        p.setState({ show: true, macid: macid });
	        if (macid) {
	            //获取锁的操作记录
	            p.getlklogbyMac(macid);
	        }
	    },
	    hide: function hide() {
	        var p = this;
	        p.setState({ show: false });
	    },
	    stopPop: function stopPop(event) {
	        event.preventDefault();
	        event.stopPropagation();
	    },

	    doDone: function doDone() {
	        console.log("doDone");
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },

	    getlklogbyMac: function getlklogbyMac(macid) {
	        var p = this;
	        if (macid) {
	            ajax("POST", "getlklogbyMac", { macid: macid, num: 5 }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ lockControlList: dt.data });
	                    if (!p.myScroll) {
	                        //   console.log("havn't myScroll");
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    } else {
	                        // console.log("havn't myScroll");
	                        p.myScroll.refresh();
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 800 });
	                }
	            });
	        }
	    },
	    render: function render() {
	        var p = this;
	        var lockControlData = "";
	        if (this.state.lockControlList.length > 0) {
	            lockControlData = this.state.lockControlList.map(function (obj, d) {
	                return React.createElement(
	                    'div',
	                    { key: "d" + d, className: 'itemdev' },
	                    React.createElement(
	                        'div',
	                        { className: 'itemicon' },
	                        React.createElement(
	                            'div',
	                            { className: "itemCircle TB" + ((d - 1) % 6 + 1) },
	                            React.createElement('i', { className: "iconfont icon-rizhi", style: { fontSize: "3rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemTitlek' },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle' },
	                            obj.operator ? "执行的操作：" + obj.operator : "无定义内容"
	                        )
	                    ),
	                    React.createElement('div', { className: 'itemLine' }),
	                    React.createElement(
	                        'div',
	                        { className: 'itemInfom', style: { width: "73%" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemDDC', style: { fontSize: "1.2rem", float: "right" } },
	                            obj.datetime ? "操作时间：" + obj.datetime : ""
	                        )
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: this.state.show ? " W_b BJ_DW_XS" : "W_b BJ_DW_YC", onClick: p.hide },
	            React.createElement(
	                'div',
	                { className: this.state.show ? " EW_k " : "EW_k  BJ_DW_YC", onClick: p.stopPop },
	                React.createElement(
	                    'div',
	                    { className: 'EW_title' },
	                    React.createElement(
	                        'div',
	                        { className: 'EW_cancle', onClick: p.hide },
	                        "取消"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'EW_text', onClick: p.hide },
	                        "操作列表"
	                    )
	                ),
	                React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "28.5rem", paddingBottom: "0rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            lockControlData,
	                            React.createElement('div', { style: { height: "1rem" } })
	                        )
	                    )
	                ),
	                React.createElement('div', { id: 'List', style: { width: "100%", height: "400px" } })
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	
	//酒店锁

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var ListWin = __webpack_require__(321);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            title: "锁",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: "",
	            BAT: "--",
	            CIN: "--",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;

	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });

	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            } else {
	                p.setState({
	                    SAV: ""
	                });
	            }
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });

	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "DL-LCK";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(dt.success);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    openDoor: function openDoor() {
	        console.log("openDoor");
	        var p = this;
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes.LCK = "OPEN";

	        this.cmd(cmdStr, function (success) {
	            if (!success) {
	                p.refs.msg.setState({
	                    word: "控制失败",
	                    timeout: 1500
	                });
	            }
	        });
	    },

	    showList: function showList() {
	        var p = this;
	        if (p.state.macid != "0000000000000000") {
	            p.refs.list.show(p.state.macid);
	        } else {
	            p.refs.msg.setState({ show: true, type: "组没有统计数据", word: dt.msg, timeout: 800 });
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.updatePWD();break;
	            default:
	                break;

	        }
	    },
	    updatePWD: function updatePWD() {
	        this.refs.doorpsw.setState({ show: true });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                //console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    getDoorNewPSW: function getDoorNewPSW(text) {
	        var p = this;
	        var str = /^\d{6}$/;
	        if (str.test(text)) {
	            this.setState({ CIN: text });
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes.CIN = text;
	            this.cmd(cmdStr, function (s) {});
	            this.refs.loading.setState({
	                show: true,
	                timeout: 6000
	            });
	            setTimeout(function () {
	                p.getpwd();
	            }, 6000);
	        } else {
	            p.refs.msg.setState({ show: true, word: "请输入6位数字", timeout: 1500 });
	        }
	    },
	    getpwd: function getpwd() {
	        var p = this;
	        var macid = this.state.macid;
	        if (macid && macid != "0000000000000000") {
	            Ajax("POST", "getLKpasswordbyMac", { macid: macid }, function (dt) {
	                if (dt.success) {
	                    if (dt.data.hasOwnProperty("CIN")) {
	                        if (dt.data.CIN == p.state.CIN) {
	                            p.refs.msg.setState({ show: true, word: "修改成功", timeout: 1500 });
	                        } else {
	                            p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: "" + p.state.title + "暂无反应", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "不可修改密码", timeout: 1500 });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/lock.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '电量显示(V)', value: p.state.BAT }),
	                React.createElement(Label, { count: '3', title: '密码显示', value: "--" }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: "lockBtnB" },
	                        React.createElement(
	                            'div',
	                            { className: 'lockBtn', onClick: p.openDoor },
	                            "开门"
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName })
	        );
	    }
	});

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	
	//酒店锁

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "锁",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: "",
	            BAT: "--",
	            CIN: "--",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;

	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        //  console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });

	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            } else {
	                p.setState({
	                    SAV: ""
	                });
	            }
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });

	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "DL-LCK";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(dt.success);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    openDoor: function openDoor() {
	        console.log("openDoor");
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes.LCK = "OPEN";
	        this.cmd(cmdStr, function (success) {
	            if (!success) {
	                this.refs.msg.setState({
	                    word: "控制失败",
	                    timeout: 1500
	                });
	            }
	        });
	    },

	    showList: function showList() {
	        var p = this;
	        if (p.state.macid != "0000000000000000") {
	            p.refs.list.show(p.state.macid);
	        } else {
	            p.refs.msg.setState({ show: true, type: "组没有统计数据", word: dt.msg, timeout: 800 });
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.updatePWD();break;
	            default:
	                break;

	        }
	    },
	    updatePWD: function updatePWD() {
	        this.refs.doorpsw.setState({ show: true });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                //console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    getDoorNewPSW: function getDoorNewPSW(text) {
	        var p = this;
	        var str = /^\d{6}$/;
	        if (str.test(text)) {
	            this.setState({ CIN: text });
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes.CIN = text;
	            this.cmd(cmdStr, function (s) {});
	            this.refs.loading.setState({
	                show: true,
	                timeout: 6000
	            });
	            setTimeout(function () {
	                p.getpwd();
	            }, 6000);
	        } else {
	            p.refs.msg.setState({ show: true, word: "请输入6位数字", timeout: 1500 });
	        }
	    },
	    getpwd: function getpwd() {
	        var p = this;
	        var macid = this.state.macid;
	        if (macid && macid != "0000000000000000") {
	            Ajax("POST", "getLKpasswordbyMac", { macid: macid }, function (dt) {
	                if (dt.success) {
	                    if (dt.data.hasOwnProperty("CIN")) {
	                        if (dt.data.CIN == p.state.CIN) {
	                            p.refs.msg.setState({ show: true, word: "修改成功", timeout: 1500 });
	                        } else {
	                            p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: "" + p.state.title + "暂无反应", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "不可修改密码", timeout: 1500 });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/lock.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '电量显示(V)', value: p.state.BAT }),
	                React.createElement(Label, { count: '3', title: '密码显示', value: "--" }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: "lockBtnB" },
	                        React.createElement(
	                            'div',
	                            { className: 'lockBtn', onClick: p.openDoor },
	                            "开门"
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName })
	        );
	    }
	});

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	
	//酒店锁

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var ListWin = __webpack_require__(321);
	var ConfigList = __webpack_require__(287);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Loading = __webpack_require__(271);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "锁",
	            attributes: {},
	            macid: "",
	            ddcmac: "",
	            type: "",
	            BAT: "",

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;

	        this.getUser(function (user) {
	            if (user && p.state.deviceid) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    /*根据设备id来获取数据*/
	    getDataById: function getDataById(id, user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    /*给需要的state赋值*/
	    getData: function getData(p, data) {
	        console.log(JSON.stringify(data));
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            p.setState({ attributes: attributes });

	            if (attributes.hasOwnProperty("NAM") && attributes.NAM != data[0].macid) {
	                p.setState({
	                    alias: attributes.NAM
	                });
	            }
	            if (attributes.hasOwnProperty("BAT")) {
	                if (attributes.BAT < 2.5) {
	                    p.setState({ BAT: "电量过低" });
	                } else {
	                    p.setState({ BAT: attributes.BAT });
	                }
	            } else {
	                p.setState({ BAT: "--" });
	            }
	            if (attributes.hasOwnProperty("CIN")) {
	                p.setState({
	                    CIN: attributes.CIN
	                });
	            } else {
	                p.setState({
	                    CIN: ""
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            } else {
	                p.setState({
	                    SAV: ""
	                });
	            }
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }, { iconfont: "icon-mima", text: "修改密码", type: "info", id: 9 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });

	        p.setState({ macid: data[0].macid });
	        p.setState({ ddcmac: data[0].ddcmac });
	        p.setState({ title: data[0].name });
	        p.setState({ type: data[0].type });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },

	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj, cb) {
	        var p = this;
	        if (this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "HM-LCK";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            if (dt && dt.success) {
	                cb(dt.success);
	            } else {
	                cb(false);
	            }
	        });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },

	    openDoor: function openDoor() {
	        console.log("openDoor");
	        var cmdStr = this.cmd_protocol();
	        cmdStr.attributes.LCK = "OPEN";
	        this.cmd(cmdStr, function (success) {
	            if (!success) {
	                this.refs.msg.setState({
	                    word: "控制失败",
	                    timeout: 1500
	                });
	            }
	        });
	    },

	    showList: function showList() {
	        var p = this;
	        if (p.state.macid != "0000000000000000") {
	            p.refs.list.show(p.state.macid);
	        } else {
	            p.refs.msg.setState({ show: true, type: "组没有统计数据", word: dt.msg, timeout: 800 });
	        }
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            case 9:
	                this.updatePWD();break;
	            default:
	                break;

	        }
	    },
	    updatePWD: function updatePWD() {
	        this.refs.doorpsw.setState({ show: true });
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj, function (s) {});
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true });
	    },
	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj, function (s) {});
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var user = p.state.user;
	                p.getDataById(user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        var p = this;
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        if (user != null) {
	            Ajax("POST", "setCommonuseEq", {
	                deviceid: p.state.deviceid,
	                commonuse: commonNew,
	                uid: user.userid,
	                parentid: user.parentid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    if (commonNew == 1) {
	                        p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    getNewGroup: function getNewGroup(attr) {
	        var p = this;
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "选择区域成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "选择区域失败", timeout: 1500 });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {
	        var p = this;
	        var cmd = null;
	        if (this.state.alias) {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "NAM": this.state.alias,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        } else {
	            cmd = {
	                "sourceId": "123456",
	                "requestType": "del_device",
	                "serialNum": 0,
	                "id": this.state.macid,
	                "ddcId": this.state.ddcmac
	            };
	        }
	        var cmdStr = JSON.stringify(cmd);

	        if (p.state.macid == "0000000000000000") {
	            p.refs.msg.setState({ show: true, type: "loading" });
	            Ajax("POST", "deleteGrpDevice", { id: p.state.deviceid }, function (dt) {
	                //console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    p.refs.msg.setState({ show: true, type: "text", word: "删除成功", timeout: 800 });
	                    setTimeout(function () {
	                        location.href = "#device";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        } else {
	            if (p.state.LIVE == "ON") {
	                p.refs.msg.setState({ show: true, type: "loading" });
	                Ajax("POST", "cmd", { cmdStr: cmdStr }, function (dt) {
	                    console.log("dt1 : " + JSON.stringify(dt));
	                    if (dt.success) {} else {
	                        //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 800});
	                    }
	                });

	                Ajax("POST", "deteleDevById", { id: this.state.deviceid, macid: this.state.macid }, function (dt) {
	                    if (dt.success) {
	                        setTimeout(function () {
	                            Ajax("POST", "confirmDeleteById", {
	                                id: p.state.deviceid,
	                                macid: p.state.macid
	                            }, function (dt) {
	                                if (dt.success) {
	                                    p.refs.msg.setState({ show: true, word: "删除成功", timeout: 800 });
	                                    setTimeout(function () {
	                                        location.href = "#device";
	                                    }, 1000);
	                                } else {
	                                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                                }
	                            });
	                        }, 2000);
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 800 });
	                    }
	                });
	            } else {
	                p.refs.msg.setState({ show: true, word: "设备不在线", timeout: 800 });
	            }
	        }
	    },

	    getDoorNewPSW: function getDoorNewPSW(text) {
	        var p = this;
	        var str = /^\d{6}$/;
	        if (str.test(text)) {
	            this.setState({ CIN: text });
	            var cmdStr = this.cmd_protocol();
	            cmdStr.attributes.CIN = text;
	            this.cmd(cmdStr, function (s) {});
	            this.refs.loading.setState({
	                show: true,
	                timeout: 6000
	            });
	            setTimeout(function () {
	                p.getpwd();
	            }, 6000);
	        } else {
	            p.refs.msg.setState({ show: true, word: "请输入6位数字", timeout: 1500 });
	        }
	    },
	    getpwd: function getpwd() {
	        var p = this;
	        var macid = this.state.macid;
	        if (macid && macid != "0000000000000000") {
	            Ajax("POST", "getLKpasswordbyMac", { macid: macid }, function (dt) {
	                if (dt.success) {
	                    if (dt.data.hasOwnProperty("CIN")) {
	                        if (dt.data.CIN == p.state.CIN) {
	                            p.refs.msg.setState({ show: true, word: "修改成功,临时密码为" + dt.data.CIN, timeout: 1500 });
	                        } else {
	                            p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: "请重新修改", timeout: 1500 });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: "" + p.state.title + "暂无反应", timeout: 1500 });
	                }
	            });
	        } else {
	            p.refs.msg.setState({ show: true, word: "不可修改密码", timeout: 1500 });
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/lock.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '3', title: '电量显示(V)', value: p.state.BAT }),
	                React.createElement(Label, { count: '3', title: '密码显示', value: "--" }),
	                React.createElement(Label, { count: '3', title: '网络保存', value: p.state.SAV == "DO" ? "已保存" : "未保存" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement('div', { style: { height: "1rem" } }),
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { className: "lockBtnB" },
	                        React.createElement(
	                            'div',
	                            { className: 'lockBtn', onClick: p.openDoor },
	                            "开门"
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { height: "3rem", float: "right", marginRight: "3rem", marginTop: "10rem" }, onClick: p.showList },
	                    React.createElement('i', { className: "clr1mEchart iconfont icon-liebiao", style: { fontSize: "3rem" } })
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(ListWin, { ref: 'list' }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Loading, { ref: 'loading' }),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName }),
	            React.createElement(InputSelect, { ref: 'doorpsw', doDone: this.getDoorNewPSW })
	        );
	    }
	});

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/4/3.
	 */
	'';

	var React = __webpack_require__(24);
	var SwitchBtn = __webpack_require__(259);
	var Nav = __webpack_require__(266);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Msg = __webpack_require__(250);
	var Label = __webpack_require__(290);
	var Slider = __webpack_require__(291);
	var Connect = __webpack_require__(292);
	var ConfigList = __webpack_require__(287);
	var Loading = __webpack_require__(271);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            title: "调光灯",
	            attributes: null,
	            macid: null,
	            ddcmac: null,
	            LIVE: null,
	            typename: null,
	            starttime: null,
	            endtime: null,
	            type: null, // 1: 数据库中的类型id
	            typ: null, // LT-CTM : 设备上报类型
	            SAV: null,
	            icon: null,
	            alias: null,
	            purpose: null,

	            grp: null //1:是组, 其他不是组

	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        history.go(-1);
	    },

	    getDataById: function getDataById(user) {
	        var p = this;
	        if (user != null && p.state.deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: p.state.deviceid, userid: user.parentid }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },

	    getData: function getData(p, data) {
	        if (data[0]) {
	            try {
	                var attributes = JSON.parse(data[0].attributes);
	                p.setState({ attributes: attributes });
	                p.setState({ title: data[0].name });
	                p.setState({ typename: data[0].typename });
	                p.setState({ macid: data[0].macid });
	                p.setState({ ddcmac: data[0].ddcmac });

	                p.setState({ type: data[0].type });
	                p.setState({ typ: data[0].typ });
	                p.setState({ icon: data[0].dicon });
	                p.setState({ purpose: data[0].purpose });
	                p.setState({ starttime: data[0].starttime });
	                p.setState({ endtime: data[0].endtime });

	                if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                    p.setState({ alias: data[0].alias });
	                }
	                if (attributes.hasOwnProperty("SAV")) {
	                    p.setState({ SAV: attributes.SAV });
	                }
	                if (attributes.hasOwnProperty("LIVE")) {
	                    p.setState({ LIVE: attributes.LIVE });
	                } else {
	                    p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	                }

	                if (data[0].macid == "0000000000000000") {
	                    p.setState({ grp: 1 });
	                }
	            } catch (e) {
	                console.log(e);
	            }
	        }
	    },

	    goBack: function goBack() {
	        history.go(-1);
	        //location.href="#device";
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: "产品详情", leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement(
	                        'div',
	                        { className: 'proBgY ', style: { marginTop: "1.5rem" } },
	                        React.createElement('i', { className: "iconfont icon-" + p.state.icon, style: { fontSize: "3rem", color: "white" } })
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: ' BJ_DQ_ZX BJ_BL_W100 FS12 itemE', style: { marginTop: "0.5rem", color: "rgba(255,255,255,0.9)" } },
	                        p.state.title
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: ' BJ_DQ_ZX BJ_BL_W100 FS11 itemE', style: { marginTop: "0.2rem", color: "rgba(255,255,255,0.8)" } },
	                        p.state.alias ? "(" + p.state.alias + ")" : ""
	                    )
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk', style: { height: "calc(70% + 2rem)", paddingTop: "2rem" } },
	                React.createElement(
	                    'div',
	                    { className: "BJ_BL_W100 " + (p.state.grp ? "BJ_DW_YC" : "BJ_DW_XS") },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "是否在线:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText' },
	                        p.state.LIVE == "ON" ? "是" : "否"
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "产品类型:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText' },
	                        p.state.typename
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "网关地址:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText' },
	                        p.state.ddcmac
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "设备地址:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText' },
	                        p.state.macid
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: "BJ_BL_W100 " + (p.state.grp ? "BJ_DW_YC" : "BJ_DW_XS") },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "质保时间:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText' },
	                        p.state.starttime != null && p.state.endtime != null ? p.state.starttime + " 至 " + p.state.endtime : ""
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { clear: "both", height: "3rem", lineHeight: "3rem", paddingTop: "1.5rem" } },
	                    React.createElement('div', { className: 'line BJ_DW_JZ ', style: { height: "1px", width: "95%" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: 'proTitle' },
	                        "产品详情:"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'proText', style: { width: "70%", height: "auto", maxHeight: "25rem", overflow: "scroll" } },
	                        p.state.purpose != null ? p.state.purpose : ""
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', title: '重命名', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }
	});

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/4.
	 */
	'';

	var React = __webpack_require__(24);
	var SwitchBtn = __webpack_require__(259);
	var Nav = __webpack_require__(266);
	var InputSelect = __webpack_require__(280);
	var GroupWin = __webpack_require__(284);
	var Msg = __webpack_require__(250);
	var Label = __webpack_require__(290);
	var Slider = __webpack_require__(291);
	var Connect = __webpack_require__(292);
	var ConfigList = __webpack_require__(287);
	var Ajax = __webpack_require__(244);
	var Url = __webpack_require__(249);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            deviceid: this.props.params.id,
	            f: Url.getParameterByName("f"),
	            title: "调光灯",
	            SWI: "",
	            startCTM: 0,
	            startLEV: 0,

	            user: null,
	            role: -1 // 0为管理员,其他为非管理员
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDataById(p.state.deviceid, user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ role: user.role });
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    bk: function bk() {
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },
	    goBack: function goBack() {
	        //history.go(-1);
	        if (this.state.f == 1) {
	            // 1:首页
	            location.href = "#main";
	        } else if (this.state.f == 2) {
	            // 2:区域
	            location.href = "#groupList";
	        } else {
	            // 3和其他情况都返回设备
	            location.href = "#device";
	        }
	    },

	    getDataById: function getDataById(deviceid, user) {
	        var p = this;
	        if (user && deviceid) {
	            Ajax("POST", "getDeviceByDeviceId", { id: deviceid, userid: user.parentid }, function (dt) {
	                //  console.log("dt : " + JSON.stringify(dt));
	                if (dt && dt.success && dt.data[0]) {
	                    p.getData(p, dt.data);
	                }
	            });
	        }
	    },
	    getData: function getData(p, data) {
	        var attributes = null;
	        try {
	            attributes = JSON.parse(data[0].attributes);
	        } catch (e) {
	            console.log(e);
	        }
	        if (attributes) {
	            if (attributes.hasOwnProperty("NAM") && attributes.NAM == data[0].alias) {
	                p.setState({ alias: data[0].alias });
	            }

	            if (attributes.hasOwnProperty("SWI")) {
	                if (attributes.SWI == "ON") {
	                    p.setState({ SWI: "ON" });
	                } else {
	                    p.setState({ SWI: "OFF" });
	                }
	            }
	            if (attributes.hasOwnProperty("LEV")) {
	                p.refs.lev.setValue(attributes.LEV);
	                p.setState({
	                    startLEV: attributes.LEV
	                });
	            }
	            if (attributes.hasOwnProperty("CTM")) {
	                p.refs.lev.setValue(attributes.CTM);
	                p.setState({
	                    startCTM: attributes.CTM
	                });
	            }
	            if (attributes.hasOwnProperty("SAV")) {
	                p.setState({
	                    SAV: attributes.SAV
	                });
	            }
	            p.setState({
	                attributes: attributes
	            });
	        }
	        var configdata1 = null;
	        if (data[0].macid == "0000000000000000") {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }];
	        } else {
	            configdata1 = [{ iconfont: "icon-quyuxuanze", text: "选择区域", type: "area", id: 1 }, { iconfont: "icon-zhongmingming", text: "重命名", type: "curtain", id: 2 }, { iconfont: "icon-changyongshebei", text: "常用设备", type: "common", id: 3 }, { iconfont: "icon-baocunwangluo", text: "保存网络", type: "network", id: 4 }, { iconfont: "icon-zhaoshebei", text: "找设备", type: "query", id: 5 }, { iconfont: "icon-shanchushebei", text: "删除设备", type: "delete", id: 6 }, { iconfont: "icon-chanpinxiangqing", text: "产品详情", type: "info", id: 7 }, { iconfont: "icon-jiqiren", text: "设备联动", type: "info", id: 8 }];
	        }
	        p.refs.configList.setState({ hover: false, data: configdata1 });

	        p.setState({ LIVE: data[0].online ? "ON" : "OFF" });
	        p.setState({ type: data[0].type });
	        p.setState({ title: data[0].name });
	        p.setState({ starttime: data[0].starttime });
	        p.setState({ endtime: data[0].endtime });
	        p.setState({ macid: data[0].macid });
	    },

	    doRight: function doRight() {
	        this.refs.configList.setState({ hover: true });
	    },
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "cmd",
	            "id": this.state.macid,
	            "ddcId": this.state.ddcmac,
	            "attributes": {}
	        };
	        return cmd;
	    },
	    /* ajax 执行 cmd 协议*/
	    cmd: function cmd(cmdObj) {
	        var p = this;
	        if (this.state.attributes && this.state.attributes.hasOwnProperty("GRP") && this.state.attributes.GRP != "00" && this.state.macid == "0000000000000000") {
	            cmdObj.attributes["GRP"] = this.state.attributes.GRP;
	            cmdObj.attributes["TYP"] = "LT-CTM";
	        } else {
	            if (this.state.alias && this.state.alias != this.state.macid) {
	                cmdObj.attributes["NAM"] = this.state.alias;
	            }
	        }
	        console.log("cmdStr : " + JSON.stringify(cmdObj));
	        Ajax("POST", "cmd", { cmdStr: JSON.stringify(cmdObj) }, function (dt) {
	            // console.log(" dt : " + JSON.stringify(dt));
	            if (dt.success) {} else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    doSwitch: function doSwitch() {
	        //  console.log("doSwitch");
	        var p = this;
	        var SWI = this.state.SWI;
	        var cmdObj = this.cmd_protocol();
	        if (SWI == "ON") {
	            p.setState({ SWI: "OFF" });
	            cmdObj.attributes["SWI"] = "OFF";
	        } else {
	            p.setState({ SWI: "ON" });
	            cmdObj.attributes["SWI"] = "ON";
	        }
	        this.cmd(cmdObj);
	    },
	    changeTitleid: function changeTitleid(id) {
	        var p = this;
	        switch (id) {
	            case 1:
	                //获取用户的区域
	                this.getGroupByUser();break;
	            case 2:
	                this.setName();break;
	            case 3:
	                this.setCommom();break;
	            case 4:
	                this.saveNetWork();break;
	            case 5:
	                this.findDevice();break;
	            case 6:
	                this.deleteDevice();break;
	            case 7:
	                location.href = "#product/" + this.state.deviceid;break;
	            case 8:
	                break;
	            default:
	                break;
	        }
	    },
	    findDevice: function findDevice() {
	        var cmdObj = this.cmd_protocol();
	        cmdObj.attributes["DID"] = "DO";
	        this.cmd(cmdObj);
	    },
	    setName: function setName() {
	        this.refs.name.setState({ show: true, id: this.state.deviceid });
	    },

	    setCommom: function setCommom() {
	        var p = this;
	        Ajax("POST", "getCommonuseEq", { deviceid: this.state.deviceid }, function (dt) {
	            if (dt.data[0]) {
	                if (dt.data[0].commonuse == 1) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否取消此设备为常用设备？" });
	                }
	                if (dt.data[0].commonuse == 0) {
	                    p.refs.ConfirmWinCom.setState({ show: true, word: "是否设置为常用设备？" });
	                }
	                p.setState({
	                    commonuse: dt.data[0].commonuse
	                });
	            }
	        });
	    },
	    saveNetWork: function saveNetWork() {
	        // this.refs.saveNetWork.setState({show:true,text:"你确定要保存这个设备吗？"});
	        var p = this;
	        if (this.state.SAV != "DO") {
	            var cmdObj = this.cmd_protocol();
	            cmdObj.attributes.SAV = "DO";
	            this.cmd(cmdObj);
	            setTimeout(function () {
	                // 不管是否成功,都要刷新
	                var deviceId = p.state.device;
	                var user = p.state.user;
	                p.getDataById(deviceId, user);
	            }, 1500);
	        } else {
	            this.refs.msg.setState({ show: true, word: "设备已保存", timeout: 1500 });
	        }
	    },
	    getNewName: function getNewName(name) {
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请输入名称", timeout: 1500 });
	            return;
	        }
	        Ajax("POST", "reName", { id: this.state.deviceid, name: name }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ title: name });
	                p.refs.msg.setState({ show: true, word: "重命名成功", timeout: 1500 });
	            } else {
	                p.refs.msg.setState({ show: true, word: "重命名失败", timeout: 1500 });
	            }
	        });
	    },
	    setNewCommon: function setNewCommon() {
	        var p = this;
	        var common = this.state.commonuse;
	        var commonNew = 1;
	        if (common) {
	            commonNew = 0;
	        }
	        var user = this.state.user;
	        Ajax("POST", "setCommonuseEq", { deviceid: p.state.deviceid, commonuse: commonNew, uid: user.userid, parentid: user.parentid }, function (dt) {
	            if (dt.success) {
	                if (commonNew == 1) {
	                    p.refs.msg.setState({ show: true, word: "设置常用设备成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: "取消常用设备成功", timeout: 1500 });
	                }
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },
	    getNewGroup: function getNewGroup(attr) {

	        var p = this;
	        console.log(attr);
	        if (attr) {
	            Ajax("POST", "allocDeviceToGroup", { deviceid: this.state.deviceid, group: JSON.stringify(attr) }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域成功", timeout: 1500
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "选择区域失败", timeout: 1500
	                    });
	                }
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, word: "选择区域失败", timeout: 1500
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                //    p.setState({GroupList:GroupList});
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },
	    deleteDevice: function deleteDevice() {
	        this.refs.ConfirmWin.setState({ show: true, word: "你确定要删除这个设备吗？" });
	    },
	    delDevice: function delDevice() {},
	    setLEV: function setLEV(v) {
	        var t = v;
	        var p = this;
	        if (t != this.state.startLEV && this.state.startLEV != null) {
	            if (this.state.SWI == "ON") {
	                var cmdObj = this.cmd_protocol();
	                cmdObj.attributes["LEV"] = t;
	                this.cmd(cmdObj);
	                this.setState({ startLEV: t });
	            } else {
	                if (this.state.SWI == "OFF") {
	                    p.refs.msg.setState({ show: true, word: "请开启设备", timeout: 1500 });
	                }
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/ltctm.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { count: '2', title: '当前亮度', value: this.state.startLEV }),
	                React.createElement(Label, { count: '2', title: '网络保存', value: p.state.online })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { className: 'contentk' },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", marginTop: "3rem", marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { style: { margin: "0 auto" }, choose: this.state.SWI == "ON" ? 1 : 0, doSwitch: p.doSwitch })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { style: { marginTop: "8rem" } },
	                    React.createElement(Slider, { min: '0', max: '100', ref: 'lev', onchange: this.setLEV }),
	                    React.createElement(
	                        'div',
	                        { className: 'FS13', style: { width: "90%", marginLeft: "5%", color: "#b3abcc" } },
	                        React.createElement(
	                            'div',
	                            { style: { float: "left" } },
	                            "暗光"
	                        ),
	                        React.createElement(
	                            'div',
	                            { style: { float: "right" } },
	                            "亮光"
	                        )
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { ref: 'configList', onchange: this.changeTitleid }),
	            React.createElement(InputSelect, { ref: 'name', doDone: this.getNewName }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getNewGroup }),
	            React.createElement(Msg, { ref: 'ConfirmWinCom', type: 2, doDone: this.setNewCommon }),
	            React.createElement(Msg, { ref: 'ConfirmWin', type: 2, doDone: this.delDevice }),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);

	var Nav = __webpack_require__(266);
	var Ajax = __webpack_require__(244);
	var ItemList = __webpack_require__(278);
	var OperatingListWin = __webpack_require__(328);
	var Msg = __webpack_require__(250);
	var MsgConfirm = __webpack_require__(250);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            videoList: [],
	            videoid: 0,
	            deletevideoid: 0,
	            user: null,
	            page: 1,
	            account: null,
	            phone: "",
	            code: ""
	        };
	    },
	    myScroll: null,
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        window.getWifiState = this.getWifiState;
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.getVideoByUserid(user.userid, user.parentid);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	        this.queryWifiState();
	    },
	    queryWifiState: function queryWifiState() {
	        if (window.jsbridge) {
	            window.jsbridge.queryWifiState();
	        }
	    },
	    getWifiState: function getWifiState(state, type) {
	        var p = this;
	        console.log("state:" + state + "type," + type);
	        /*  p.refs.msg.setState({
	              show:true,word:"state:"+state+"type,"+type,timeout:1500
	          })*/
	    },
	    bk: function bk() {
	        location.href = "#mine";
	    },
	    getVideoByUserid: function getVideoByUserid(userid, parentid) {
	        var p = this;
	        Ajax("POST", "getVideoByUserid", { uid: userid, userid: parentid }, function (dt) {
	            if (dt && dt.success) {
	                p.setState({
	                    videoList: dt.data
	                });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },

	    addVideo: function addVideo() {
	        location.href = "#videodetail/0";
	    },
	    updateVideo: function updateVideo(videoid) {
	        location.href = "#videodetail/" + videoid;
	    },
	    delVideconfirm: function delVideconfirm(videoid) {
	        if (videoid) {
	            this.setState({
	                deletevideoid: videoid
	            });
	        }
	        this.refs.operatingListWin.setHide();
	        this.refs.msgconfirm.setState({
	            show: true, word: "是否删除此摄像头"
	        });
	    },
	    confirm: function confirm() {
	        this.refs.msgconfirm.setState({
	            show: false, word: ""
	        });
	        this.deleteVideo(this.state.deletevideoid);
	    },
	    deleteVideo: function deleteVideo(deletevideoid) {
	        var p = this;
	        Ajax("POST", "deleteVideoById", { id: deletevideoid }, function (dt) {
	            if (dt && dt.success) {
	                p.refs.msg.setState({
	                    show: true, timeout: 1500, word: "删除成功"
	                });
	                setTimeout(function () {
	                    p.getVideoByUserid(p.state.user.userid, p.state.user.parentid);
	                }, 1400);
	            } else {
	                p.refs.msg.setState({
	                    show: true, timeout: 1500, word: "删除失败"
	                });
	            }
	        });
	    },
	    getVideoOperate: function getVideoOperate(id) {
	        if (id) {
	            this.refs.operatingListWin.setState({
	                list: [{ name: "修改", id: 1, scenceid: id }, { name: "删除", id: 2, scenceid: id }]
	            });
	            if (id) {
	                this.setState({
	                    videoid: id
	                });
	                console.log(id);
	                this.refs.operatingListWin.setShow();
	            }
	        }
	    },
	    selectItem: function selectItem(id, videoid) {
	        switch (parseInt(id)) {
	            case 1:
	                this.updateVideo(videoid);break;
	            case 2:
	                this.delVideconfirm(videoid);break;
	            case 3:
	                this.updateVideoToWifi(videoid);break;
	            default:
	                break;
	        }
	    },
	    updateVideoToWifi: function updateVideoToWifi() {},
	    sortVideo: function sortVideo(videoid) {},
	    sendCmd: function sendCmd(t) {
	        var p = this;
	        var id = t;
	        var videoList = this.state.videoList;
	        for (var i = 0; i < videoList.length; i++) {
	            if (videoList[i] && videoList[i].id == id) {

	                if (videoList[i].brand == "乐橙摄像头") {
	                    //获取最新的token
	                    var videoWiKi = videoList[i];
	                    Ajax("POST", "getUserTokenByVideo", { userid: this.state.user.userid, brand: videoWiKi.brand }, function (dt) {
	                        if (dt && dt.success) {
	                            var video = dt.data;
	                            console.log("usertoken:" + video.usertoken + "p.state.user.userid" + p.state.user.userid + "videoWiKi.sn" + videoWiKi.sn + "videoWiKi.code" + videoWiKi.code);
	                            if (window.jsbridge) {
	                                if (videoWiKi.hasOwnProperty("code") && videoWiKi.code) {
	                                    window.jsbridge.playVideo(video.usertoken, p.state.user.userid, videoWiKi.sn, videoWiKi.code);
	                                } else {
	                                    window.jsbridge.playVideo(video.usertoken, p.state.user.userid, videoWiKi.sn, videoWiKi.sn);
	                                }
	                            } else {
	                                p.refs.msg.setState({
	                                    show: true, word: "暂无法播放", timeout: 1500
	                                });
	                            }
	                        } else {
	                            p.refs.msg.setState({
	                                show: true, word: "暂无法播放", timeout: 1500
	                            });
	                        }
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "暂无法播放", timeout: 1500
	                    });
	                }
	            }
	        }
	    },
	    goBack: function goBack() {
	        location.href = "#mine";
	    },
	    render: function render() {
	        var p = this;
	        var videoList = this.state.videoList.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            return React.createElement(ItemList, { type: 1, key: "scene" + num, info: '查看', id: obj.id, bgc: bgc, icon: 'shexiangtou', name: obj.name, tip: obj.brand, ItemClick: p.getVideoOperate, sendCommand: p.sendCmd });
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: this.state.username ? this.state.username + "视频" : "我的视频", rightClick: this.state.role == 1 ? function () {} : this.addVideo, rightIcon: this.state.role == 1 ? "" : "tianjia", leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "1" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: 4.5 * 2 + "rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            videoList
	                        )
	                    )
	                )
	            ),
	            React.createElement(OperatingListWin, { title: '操作选择', h1: '60%', h2: '40%', ref: 'operatingListWin', onClick: this.selectItem }),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(MsgConfirm, { ref: 'msgconfirm', type: '2', doDone: this.confirm })
	        );
	    }
	});

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Select = __webpack_require__(281);
	var TouchBtn = __webpack_require__(329);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            list: [],
	            selectItem: ""
	        };
	    },
	    goBack: function goBack() {
	        this.setState({
	            show: false
	        });
	    },
	    selectItem: function selectItem(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        var scenceid = e.currentTarget.getAttribute("data-data");
	        this.props.onClick(id, scenceid);
	        this.setState({ show: false });
	    },
	    setShow: function setShow() {
	        this.refs.win.setState({
	            show: true
	        });
	    },
	    setHide: function setHide() {
	        this.refs.win.setState({
	            show: false,
	            list: [],
	            selectItem: ""
	        });
	    },
	    render: function render() {
	        var p = this;
	        var data = this.state.list.map(function (obj, num) {
	            return React.createElement(
	                TouchBtn,
	                { key: "touch_" + num },
	                React.createElement(
	                    'div',
	                    { className: 'WZS BJ_DQ_ZX FS15 BJ_BL_W50', 'data-id': obj.id, 'data-data': obj.scenceid, style: { height: "3.5rem", lineHeight: "3.5rem", marginLeft: "25%" }, onClick: p.selectItem },
	                    obj.name
	                )
	            );
	        });
	        return React.createElement(
	            Select,
	            { ref: 'win', title: this.props.title, h1: this.props.h1 ? this.props.h1 : "65%", h2: this.props.h2 ? this.props.h2 : "50%", goBack: this.setHide },
	            React.createElement(
	                'div',
	                { style: { height: "98%" } },
	                data
	            )
	        );
	    }

	});

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            hover: false
	        };
	    },
	    hover: function hover(e) {
	        this.setState({
	            hover: true
	        });
	    },
	    unhover: function unhover(e) {
	        this.setState({
	            hover: false
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            "div",
	            { className: this.props["className"] + (this.state.hover ? " activeBorder " : ""),
	                "data-type": this.props["data-type"] ? this.props["data-type"] : "",
	                "data-id": this.props["data-id"] ? this.props["data-id"] : "",
	                "data-data": this.props["data-data"] ? this.props["data-data"] : "",
	                onTouchStart: this.hover,
	                onTouchMove: this.unhover,
	                onTouchEnd: this.unhover,
	                onClick: this.props.onClick ? this.props.onClick : "",
	                style: this.props.style },
	            this.props.children
	        );
	    }
	});

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Input = __webpack_require__(254);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var OperatingListWin = __webpack_require__(328);
	var Loading = __webpack_require__(271);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            videoid: parseInt(this.props.params.id) ? parseInt(this.props.params.id) : 0,
	            name: "",
	            user: null,
	            videoType: [{ name: "乐橙摄像头", id: 1, scenceid: 1 }],
	            brand: "乐橙摄像头",
	            wifi: "",
	            appid: "",
	            appsecret: "",
	            usertoken: ""

	        };
	    },
	    componentWillMount: function componentWillMount() {
	        window.bk = this.bk;
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.updateUserVideo(user.parentid, "乐橙摄像头", function (data) {
	                    if (data) {
	                        if (p.state.videoid) {
	                            p.getVideoAuthorByUser(user);
	                            p.getVideoByUser(p.state.videoid);
	                        } else {
	                            p.getVideoAuthorByUser(user);
	                        }
	                    } else {
	                        if (p.state.videoid) {
	                            p.getVideoAuthorByUser(user);
	                            p.getVideoByUser(this.state.videoid);
	                        } else {
	                            p.getVideoAuthorByUser(user);
	                        }
	                    }
	                });
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#video";
	    },
	    doScan: function doScan() {
	        if (window.jsbridge) {
	            window.videoToWifi = this.videoToWifi;
	        }
	    },
	    videoToWifi: function videoToWifi(data) {
	        var p = this;
	        p.refs.msg.setState({
	            show: true, msg: data, timeout: 3000
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    componentDidMount: function componentDidMount() {
	        this.doScan();
	    },
	    updateUserVideo: function updateUserVideo(userid, brand, cb) {
	        Ajax("POST", "getUserTokenByVideo", { userid: userid, brand: brand }, function (dt) {
	            if (dt && dt.success) {
	                cb(dt.data);
	            } else {
	                cb(null);
	            }
	        });
	    },
	    getVideoByUser: function getVideoByUser(id) {
	        var p = this;
	        Ajax("POST", "getVideoById", { id: id }, function (dt) {
	            if (dt && dt.success) {
	                var video = dt.data;
	                if (video.hasOwnProperty("brand") && video.brand) {
	                    p.setState({
	                        brand: video.brand
	                    });
	                }
	                if (video.hasOwnProperty("name") && video.name) {
	                    p.refs.name.setValue(video.name);
	                }
	                if (video.hasOwnProperty("sn") && video.sn) {
	                    p.refs.sn.setValue(video.sn);
	                }
	            }
	        });
	    },
	    saveVideo: function saveVideo() {
	        var p = this;
	        var sn = this.refs.sn.getValue();
	        if (!sn) {
	            p.refs.msg.setState({
	                show: true, word: "请输入序列号（序列号在摄像头背后）", timeout: 1500
	            });
	            return;
	        }
	        var code = this.refs.code.getValue();
	        var name = this.refs.name.getValue();
	        if (!name) {
	            p.refs.msg.setState({
	                show: true, word: "请输入视频名称", timeout: 1500
	            });
	            return;
	        }
	        var wifi = this.refs.wifi.getValue();
	        if (!wifi) {
	            p.refs.msg.setState({
	                show: true, word: "请输入wifi名称", timeout: 1500
	            });
	            return;
	        }
	        var wifipsd = this.refs.wifipsd.getValue();
	        if (!wifipsd) {
	            p.refs.msg.setState({
	                show: true, word: "请输入wifi密码", timeout: 1500
	            });
	            return;
	        }
	        var str = "";
	        if (code) {
	            str = "deviceId:" + sn + "," + "code:" + code + "," + "token:" + this.state.usertoken + ",";
	        } else {
	            str = "deviceId:" + sn + "," + "token:" + this.state.usertoken + ",";
	        }
	        // 绑定设备
	        Ajax("POST", "bindDeviceByWiKi", { deviceId: sn, code: "", token: p.state.usertoken, userid: this.state.userid, str: str }, function (dt) {
	            if (dt && dt.success) {
	                //成功绑定，则添加设备
	                Ajax("POST", "AddOrUpdateVideoByDeviceId", { deviceId: sn, code: code ? code : "", token: p.state.usertoken, name: name, brand: p.state.brand, userid: p.state.user.userid, parentid: p.state.user.parentid }, function (dt) {
	                    if (dt && dt.success) {
	                        var str = "deviceId:" + sn + "," + "token:" + p.state.usertoken + ",";
	                        //获取当前连接的wifi
	                        p.refs.loading.setState({
	                            timeout: 800,
	                            show: true
	                        });
	                        Ajax("POST", "currentDeviceWifi", { deviceId: sn, token: p.state.usertoken, str: str }, function (dt) {
	                            //  console.log(dt);
	                            if (dt && dt.success) {
	                                //如果有wifi 连接，则保存成功
	                                p.refs.msg.setState({
	                                    show: true, timeout: 1500, word: "保存成功"
	                                });
	                                setTimeout(function () {
	                                    p.back();
	                                }, 2100);
	                            } else {
	                                //无wifi连接，连接wifi
	                                if (window.jsbridge) {
	                                    if (p.state.user && sn && wifi && wifipsd) {
	                                        window.jsbridge.bindDeviceToWifi(p.state.user.userid, sn, wifi, wifipsd, p.state.brand);
	                                        p.refs.msg.setState({
	                                            show: true, timeout: 60 * 1000, word: "连接wifi中，请耐心等待一分钟"
	                                        });
	                                    } else {
	                                        p.refs.msg.setState({
	                                            show: true, timeout: 1500, word: "无参数"
	                                        });
	                                    }
	                                } else {
	                                    p.refs.msg.setState({
	                                        show: true, timeout: 1500, word: dt.msg
	                                    });
	                                    setTimeout(function () {
	                                        p.back();
	                                    }, 2100);
	                                }
	                            }
	                        });
	                    } else {
	                        p.refs.msg.setState({
	                            show: true, timeout: 1500, word: " 请重新添加"
	                        });
	                        setTimeout(function () {
	                            p.back();
	                        }, 2100);
	                    }
	                });
	            } else {
	                //绑定未成功，
	                p.refs.msg.setState({
	                    show: true, timeout: 1500, word: dt.msg
	                });
	                setTimeout(function () {
	                    p.back();
	                }, 2100);
	            }
	        });
	    },
	    back: function back() {
	        location.href = "#video";
	    },
	    getBrand: function getBrand() {
	        this.refs.operatingListWin.setState({
	            list: this.state.videoType
	        });
	        this.refs.operatingListWin.setShow();
	    },
	    selectItem: function selectItem(id, videoType) {
	        if (id && videoType) {
	            this.refs.operatingListWin.setHide();
	            var video = this.state.videoType;
	            for (var i = 0; i < video.length; i++) {
	                if (video[i].id == id) {
	                    this.setState({
	                        brand: video[i].name
	                    });
	                }
	            }
	            //获取摄像头授权
	            this.getVideoAuthorByUser(this.state.user);
	        }
	    },
	    getVideoAuthorByUser: function getVideoAuthorByUser(user) {
	        var p = this;
	        if (user && user.hasOwnProperty("parentid")) {
	            Ajax("POST", "getVideoAccountByUserId", { parentid: user.parentid }, function (dt) {
	                if (dt && dt.success && dt.data.length > 0) {
	                    var data = dt.data[0];
	                    if (data.hasOwnProperty("usertoken") && data.hasOwnProperty("appid") && data.hasOwnProperty("appsecret") && data.hasOwnProperty("userid")) {
	                        p.setState({
	                            usertoken: data.usertoken,
	                            appid: data.appid,
	                            appsecret: data.appsecret
	                        });
	                    }
	                } else {
	                    location.href = "#videodetailnew/0";
	                }
	            });
	        }
	    },

	    render: function render() {
	        var data = React.createElement(
	            'div',
	            { className: 'BJ_BL_W98  B2g', style: { position: "absolute", marginLeft: "1%" } },
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100 YS_BJ_LBS LB', style: { height: "5rem", marginTop: "1rem", lineHeight: "5rem" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 品牌选择'
	                ),
	                ' ',
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FY', style: { float: "right", marginRight: "18%", width: "30%", height: "4rem" }, onClick: this.getBrand },
	                    this.state.brand ? this.state.brand : "乐橙摄像头"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100  YS_BJ_LBS LB', style: { height: "5rem", lineHeight: "5rem", marginTop: "2px" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 设备序列号'
	                ),
	                ' ',
	                React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "1rem" }, ref: 'sn' })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100  YS_BJ_LBS LB', style: { height: "5rem", lineHeight: "5rem", marginTop: "2px" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 设备验证码'
	                ),
	                ' ',
	                React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "1rem" }, ref: 'code' })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100  YS_BJ_LBS LB', style: { height: "5rem", lineHeight: "5rem", marginTop: "2px" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 视频名称'
	                ),
	                ' ',
	                React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "1rem" }, ref: 'name' })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100  YS_BJ_LBS LB', style: { height: "5rem", lineHeight: "5rem", marginTop: "2px" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 连接wifi名称'
	                ),
	                ' ',
	                React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "1rem" }, ref: 'wifi' })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100  YS_BJ_LBS LB', style: { height: "5rem", lineHeight: "5rem", marginTop: "2px" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS16' },
	                    ' 连接wifi密码'
	                ),
	                ' ',
	                React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "1rem" }, ref: 'wifipsd' })
	            )
	        );

	        return React.createElement(
	            'div',
	            { className: 'main B2g ', style: { position: "fixed" } },
	            React.createElement(Nav, { title: "摄像头管理", rightClick: this.saveVideo, rightIcon: 'baocun', leftIcon: 'xiaojiantou2', leftClick: this.back }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            data,
	            React.createElement(OperatingListWin, { title: '品牌选择', ref: 'operatingListWin', onClick: this.selectItem }),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(Loading, { ref: 'loading' })
	        );
	    }

	});

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Input = __webpack_require__(254);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var OperatingListWin = __webpack_require__(328);
	var Button = __webpack_require__(252);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            videoid: parseInt(this.props.params.id) ? parseInt(this.props.params.id) : 0,
	            name: "",
	            user: null,
	            videoType: [{ name: "乐橙摄像头", id: 1, scenceid: 1 }],
	            brand: "乐橙摄像头",
	            wifi: "",
	            appid: "",
	            appsecret: "",
	            usertoken: ""

	        };
	    },
	    componentWillMount: function componentWillMount() {
	        window.bk = this.bk;
	    },
	    bk: function bk() {
	        location.href = "#video";
	    },
	    doScan: function doScan() {
	        if (window.jsbridge) {
	            window.videoToWifi = this.videoToWifi;
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({
	                    role: user.role
	                });
	            }
	        }
	        cb(user);
	    },
	    componentDidMount: function componentDidMount() {
	        this.doScan();
	        //第一步获取认证信息
	        //更新user 的乐橙usertoken
	        //第二步获取绑定信息
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                /* p.updateUserVideo(user.parentid,"乐橙摄像头",function (data) {
	                     if(data){
	                         if(p.state.videoid){
	                             p.getVideoAuthorByUser(user);
	                             p.getVideoByUser(p.state.videoid)
	                         }else{
	                             p.getVideoAuthorByUser(user);
	                           }
	                     }else{
	                         if(p.state.videoid){
	                             p.getVideoAuthorByUser(user);
	                             p.getVideoByUser(this.state.videoid)
	                         }else{
	                             p.getVideoAuthorByUser(user);
	                           }
	                     }
	                 });*/
	            }
	        });
	    },
	    back: function back() {
	        location.href = "#video";
	    },
	    sendcode: function sendcode() {
	        var phone = this.refs.phone.getValue();
	        var p = this;
	        this.setState({
	            phone: phone
	        });
	        var myreg = /^1[3|4|5|8|7][0-9]\d{4,8}$/;
	        console.log(phone);
	        if (!myreg.test(phone)) {
	            p.refs.msg.setState({
	                show: true, timeout: 1500, word: "请输入正确的手机号码"
	            });
	        } else {
	            this.setState({
	                phone: phone
	            });
	            this.sendPhone(phone);
	        }
	    },
	    sendPhone: function sendPhone(phone) {
	        var p = this;
	        if (phone) {
	            var str = "phone:" + phone + ",";
	            Ajax("POST", "userBindSmsByWiKi", { phone: phone, str: str }, function (dt) {
	                if (dt && dt.success) {
	                    if (dt.data == "0") {
	                        p.refs.msg.setState({
	                            show: true, word: "发送验证码成功，请及时填写验证码", timeout: 1500
	                        });
	                    } else {
	                        if (dt.data == "TK1001") {
	                            Ajax("POST", "userTokenByWiKi", { phone: phone, str: str }, function (dt) {
	                                if (dt && dt.success) {
	                                    var data = dt.data;
	                                    p.saveUserVideoAuthorByWiKi(phone, data.userToken, data.expireTime, p.state.user, p.state.brand);
	                                } else {
	                                    p.refs.msg.setState({
	                                        show: true, word: dt.msg, timeout: 1500
	                                    });
	                                }
	                            });
	                        } else {
	                            p.refs.msg.setState({
	                                show: true, word: dt.msg, timeout: 1500
	                            });
	                        }
	                    }
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: "发送验证码失败，请1分钟后重新获取验证码", timeout: 1500
	                    });
	                }
	            });
	        }
	    },
	    sendPhoneAndCode: function sendPhoneAndCode() {
	        var p = this;
	        var code = this.refs.code.getValue();
	        var phone = this.refs.phone.getValue();
	        if (!phone) {
	            p.refs.msg.setState({
	                show: true, timeout: 1500, word: "请输入手机号码"
	            });
	            return;
	        }
	        if (code) {
	            this.setState({
	                code: code
	            });
	        } else {
	            p.refs.msg.setState({
	                show: true, timeout: 1500, word: "请输入验证码"
	            });
	            return;
	        }
	        if (phone && code) {
	            var str = "phone:" + phone + "," + "smsCode:" + code + ",";
	            Ajax("POST", "userBindByWiKi", { phone: phone, smsCode: code, str: str }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, timeout: 1500, word: "认证成功"
	                    });
	                    str = "phone:" + phone + ",";
	                    Ajax("POST", "userTokenByWiKi", { phone: phone, str: str }, function (dt) {
	                        if (dt && dt.success) {
	                            var data = dt.data;
	                            p.saveUserVideoAuthorByWiKi(phone, data.userToken, data.expireTime, p.state.user, p.state.brand);
	                        }
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true, timeout: 1500, word: "认证失败，请在一分钟后重新认证"
	                    });
	                }
	            });
	        }
	    },
	    saveUserVideoAuthorByWiKi: function saveUserVideoAuthorByWiKi(phone, usertoken, expiretime, user, brand) {
	        var p = this;
	        if (phone && usertoken && user) {
	            Ajax("POST", "insertOrUpdateUserVideoAuthority", {
	                phone: phone,
	                usertoken: usertoken,
	                expiretime: expiretime,
	                userid: user.parentid,
	                brand: brand
	            }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({
	                        show: true, timeout: 1500, word: "认证成功，请添加摄像头设备"
	                    });
	                    setTimeout(function () {
	                        location.href = "#videodetail/0";
	                    }, 1800);
	                } else {
	                    p.refs.msg.setState({
	                        show: true, timeout: 1500, word: "认证失败"
	                    });
	                }
	            });
	        }
	    },

	    render: function render() {
	        var data = React.createElement(
	            'div',
	            { className: 'BJ_BL_W98  B2g', style: { position: "absolute", marginLeft: "1%" } },
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100 YS_BJ_LBS LB', style: { height: "4rem", marginTop: "1rem", lineHeight: "4rem" } },
	                React.createElement(
	                    'text',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14' },
	                    ' 品牌选择'
	                ),
	                ' ',
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FY', style: { float: "right", marginRight: "18%", width: "30%", height: "4rem" }, onClick: this.getBrand },
	                    this.state.brand ? this.state.brand : "乐橙摄像头"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100 YS_BJ_LBS LB ', style: { height: "4rem", marginTop: "0.5rem", lineHeight: "4rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS12  ', style: { width: "20%" } },
	                    ' 手机认证:'
	                ),
	                ' ',
	                React.createElement(Input, { placeholder: ' 请输入手机号码', style: { float: "left", width: "50%", marginTop: "0.5rem", marginLeft: "5%" }, ref: 'phone' }),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS12 activeBorder ', onClick: this.sendcode },
	                    ' 发送验证码'
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100 YS_BJ_LBS LB ', style: { height: "4rem", marginTop: "0.5rem", lineHeight: "4rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ BJ_BJ_PL10 FS12  ', style: { width: "20%" } },
	                    ' 验证码:'
	                ),
	                ' ',
	                React.createElement(Input, { placeholder: ' 请输入手机验证码', style: { float: "left", width: "50%", marginTop: "0.5rem", marginLeft: "5%" }, ref: 'code' })
	            ),
	            React.createElement(
	                Button,
	                { style: { width: "80%", marginLeft: "10%", marginTop: "10px", marginBottom: "20px" }, onClick: this.sendPhoneAndCode },
	                '确   认'
	            )
	        );

	        return React.createElement(
	            'div',
	            { className: 'main B2g ', style: { position: "fixed" } },
	            React.createElement(Nav, { title: "摄像头管理", rightClick: this.saveVideo, rightIcon: 'baocun', leftIcon: 'xiaojiantou2', leftClick: this.back }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            data,
	            React.createElement(OperatingListWin, { title: '品牌选择', ref: 'operatingListWin', onClick: this.selectItem }),
	            React.createElement(Msg, { ref: 'msg', type: '1' })
	        );
	    }

	});

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	

	//ddc界面，支持ddc 的添加，ddc列表，ddc详情跳转
	'';

	var React = __webpack_require__(24);
	var Footer = __webpack_require__(242);
	var Nav = __webpack_require__(266);
	var ItemList = __webpack_require__(278);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var Select = __webpack_require__(281);
	var IconInput = __webpack_require__(253);
	var OperatingListWin = __webpack_require__(263);
	var MsgConfirm = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            ddcList: [],
	            ddcid: 0,
	            deleteddcid: 0,
	            user: null
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDDCByUserid(user.userid);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    bk: function bk() {
	        location.href = "#mine";
	    },
	    getUser: function getUser(cb) {
	        //  var user={"username":"suojiu","userid":24,"role":0,"parentid":24,"nat":"011233444455557889999abbbccddeff","phone":"18649821537","companyid":1,"exithiden":0};
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    myScroll: null,
	    getDDCByUserid: function getDDCByUserid(userid) {
	        var p = this;
	        Ajax("POST", "getDdcListByUserId", { userid: userid }, function (dt) {
	            if (dt && dt.success) {
	                var ddc = dt.data;
	                p.setState({
	                    ddcList: ddc
	                });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            }
	        });
	    },
	    addDDC: function addDDC() {
	        this.refs.select.setState({
	            show: true
	        });
	    },
	    getddcOperate: function getddcOperate(id) {
	        if (id) {
	            location.href = "#ddcdetail/" + id;
	        } else {
	            location.href = "#ddcdetail";
	        }
	    },
	    sendCmd: function sendCmd() {},
	    goBack: function goBack() {
	        location.href = "#mine";
	    },
	    backSelect: function backSelect() {
	        this.refs.select.setState({
	            show: false
	        });
	    },
	    DDCUpdate: function DDCUpdate() {
	        var p = this;
	        var ddcname = this.refs.ddcname.getValue();
	        var ddcmac = this.refs.ddcmac.getValue();
	        var pinocode = this.refs.pincode.getValue();
	        if (!ddcname) {
	            p.refs.msg.setState({
	                show: true, word: "未输入网关名称", timeout: 1500
	            });
	            return;
	        }
	        if (!ddcmac) {
	            p.refs.msg.setState({
	                show: true, word: "未输入网关地址", timeout: 1500
	            });
	            return;
	        }
	        if (!pinocode) {
	            p.refs.msg.setState({
	                show: true, word: "未输入网关验证码", timeout: 1500
	            });
	            return;
	        }
	        if (ddcname && ddcmac && pinocode) {
	            Ajax("POST", "addDdc", { ddcname: ddcname, ddcmac: ddcmac, userid: this.state.user.userid, ddcpin: pinocode }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.select.setState({
	                        show: false
	                    });
	                    p.getDDCByUserid(p.state.user.userid);
	                } else {
	                    p.refs.msg.setState({
	                        show: true, word: dt.msg, timeout: 1500
	                    });
	                }
	            });
	        }
	    },
	    getDDCList: function getDDCList(id) {
	        //   console.log(id);
	        if (id) {
	            this.refs.operatingListWin.setState({
	                data: [{ name: "删除", id: 2, fid: id }, { name: "获取设备", id: 3, fid: id }, { name: "获取逻辑", id: 4, fid: id }]
	            });
	            if (id) {
	                this.setState({
	                    videoid: id
	                });
	                console.log(id);
	                this.refs.operatingListWin.show();
	            }
	        }
	    },
	    selectItem: function selectItem(id, sceneid) {
	        if (id && sceneid) {
	            this.refs.operatingListWin.hide();
	            switch (parseInt(id)) {
	                case 2:
	                    this.deleteDDC(sceneid);break;
	                case 3:
	                    this.updateDeviceByDDC(sceneid);break;
	                case 4:
	                    this.updateDDClogic(sceneid);break;
	                default:
	                    break;
	            }
	        }
	    },
	    deleteDDC: function deleteDDC(id) {
	        console.log("id:" + id);
	        this.setState({
	            deleteddcid: id
	        });
	        this.refs.msgconfirm.setState({
	            show: true,
	            word: "是否删除此网关"
	        });
	    },
	    updateDeviceByDDC: function updateDeviceByDDC(id) {
	        var p = this;
	        if (id) {
	            var ddc = null;
	            var ddcList = this.state.ddcList;
	            for (var i = 0; i < ddcList.length; i++) {
	                if (ddcList[i].hasOwnProperty("id") && ddcList[i].id == id) {
	                    ddc = ddcList[i];
	                }
	            }
	            p.refs.msg.setState({ show: true, word: "设备同步更新中，请稍等....", timeout: 1500 });
	            Ajax("POST", "devQueryByDDC", { ddcmac: ddc.ddcmac }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: "发送成功，请查看设备。", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },
	    updateDDClogic: function updateDDClogic(id) {
	        if (id) {
	            var ddc = null;
	            var ddcList = this.state.ddcList;
	            for (var i = 0; i < ddcList.length; i++) {
	                if (ddcList[i].hasOwnProperty("id") && ddcList[i].id == id) {
	                    ddc = ddcList[i];
	                }
	            }
	            if (ddc) {
	                //同步逻辑查看

	            }
	        }
	    },
	    confirm: function confirm() {
	        var p = this;
	        this.refs.msgconfirm.setState({
	            show: false,
	            word: ""
	        });
	        if (this.state.deleteddcid) {
	            var deleteddc = null;
	            var ddcList = this.state.ddcList;
	            for (var i = 0; i < ddcList.length; i++) {
	                if (ddcList[i].hasOwnProperty("id") && ddcList[i].id == this.state.deleteddcid) {
	                    deleteddc = ddcList[i];
	                    break;
	                }
	            }
	            if (deleteddc) {
	                Ajax("POST", "deleteByDdcId", { keyid: deleteddc.keyid, ddcid: deleteddc.id, userid: this.state.user.userid, ddcmac: deleteddc.ddcmac }, function (dt) {
	                    if (dt && dt.success) {
	                        p.refs.msg.setState({
	                            show: true, word: "删除成功", timeout: 1500
	                        });
	                        setTimeout(function () {
	                            p.getDDCByUserid(p.state.user.userid);
	                        }, 1800);
	                    } else {
	                        p.refs.msg.setState({
	                            show: true, word: "删除失败", timeout: 1500
	                        });
	                    }
	                });
	            }
	        }
	    },
	    render: function render() {
	        var p = this;
	        var ddcList = this.state.ddcList.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            return React.createElement(ItemList, { type: 1, key: "ddc" + num, info: '查看', id: obj.id, bgc: bgc, icon: "A-jizhongkongzhiqi", name: obj.ddcname, tip: obj.online ? "在线" : "不在线", tip1: obj.ddcmac, sendCommand: p.getddcOperate, ItemClick: p.getDDCList });
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: "我的网关", rightClick: this.addDDC, rightIcon: 'tianjia', leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: 4.5 * 2 + "rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            ddcList
	                        )
	                    )
	                )
	            ),
	            React.createElement(Msg, { ref: 'msg', type: '1' }),
	            React.createElement(
	                Select,
	                { ref: 'select', title: "智能网关", h2: '50%', h1: '70%', goBack: this.backSelect, onClick: this.DDCUpdate },
	                React.createElement(IconInput, { ref: 'ddcname', placeholder: '请输入智能网关名称', icon: 'A-jizhongkongzhiqi', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } }),
	                React.createElement(IconInput, { ref: 'ddcmac', placeholder: '请输入智能网关地址', icon: 'A-dianshi', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } }),
	                React.createElement(IconInput, { ref: 'pincode', placeholder: '请输入智能网关 pin码', icon: 'mima', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } })
	            ),
	            React.createElement(OperatingListWin, { title: '操作选择', ref: 'operatingListWin', height: '10rem', doDone: this.selectItem }),
	            React.createElement(MsgConfirm, { ref: 'msgconfirm', type: '2', doDone: this.confirm })
	        );
	    }

	});

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var Label = __webpack_require__(290);
	var Connect = __webpack_require__(292);
	var SwitchBtn = __webpack_require__(259);
	var ConfigList = __webpack_require__(287);
	var InputWin = __webpack_require__(280);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            ddcid: this.props.params.id ? this.props.params.id : 0,
	            user: null,
	            title: "我的网关",
	            ddcmac: "123412341234",
	            IP: "192.168.10.101",
	            version: "1233455433",
	            ssid: "我的wifi",
	            led: 1,
	            wifistate: 1,
	            gomore: 1
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.getDDCById(p.state.ddcid, user.userid);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    doMore: function doMore() {
	        var dataList = [{ iconfont: "icon-zhongmingming", text: "重命名", id: 1 }];
	        this.refs.configList.setState({ data: dataList });
	        this.refs.configList.setState({ hover: true });
	    },
	    getDDCById: function getDDCById(ddcid, userid) {
	        var p = this;
	        Ajax("POST", "getDDCByIdforUser", { id: ddcid, userid: userid }, function (dt) {
	            if (dt && dt.success) {
	                p.getData(p, dt.data);
	                console.log(JSON.stringify(dt.data));
	            }
	        });
	    },
	    getData: function getData(p, data) {
	        p.setState({
	            ddcmac: data.ddcmac,
	            ip: data.ip,
	            version: data.version,
	            zbversion: data.zbversion,
	            channel: data.channel,
	            ssid: data.ssid, // wifi名称
	            wifistate: data.wifistate,
	            LEDState: data.led,
	            zbmac: data.zbmac,
	            title: data.ddcname,
	            online: data.online
	        });
	    },
	    myScroll: null,
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    goBack: function goBack() {
	        location.href = "#ddc";
	    },
	    doRight: function doRight() {
	        this.doMore();
	    },
	    gotoMore: function gotoMore() {
	        var p = this;
	        this.setState({
	            gomore: 0
	        });
	        setTimeout(function () {
	            if (!p.myScroll) {
	                p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                document.addEventListener('touchmove', function () {}, false);
	            } else {
	                p.myScroll.refresh();
	            }
	        }, 500);
	    },
	    LEDHandle: function LEDHandle() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        if (this.state.LEDState) {
	            cmdObj.requestType = "LED_close";
	            this.cmd(JSON.stringify(cmdObj), function (m) {
	                console.log("LED m : " + m);
	                if (m == 1) {
	                    p.setState({ led: 0 });
	                }
	            });
	        } else {
	            cmdObj.requestType = "LED_open";
	            this.cmd(JSON.stringify(cmdObj), function (n) {
	                console.log("LED n : " + n);
	                if (n == 1) {
	                    p.setState({ led: 1 });
	                }
	            });
	        }
	    },
	    cmd: function cmd(cmdStr, callback) {
	        var p = this;
	        console.log("cmdStr : " + cmdStr);
	        if (cmdStr) {
	            Ajax("POST", "cmdDDC", { cmdStr: cmdStr }, function (dt) {
	                console.log("dt : " + JSON.stringify(dt));
	                if (dt.success) {
	                    callback(1);
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                    callback(0);
	                }
	            });
	        }
	    },
	    doWifiState: function doWifiState() {
	        var p = this;
	        var cmdObj = this.cmd_protocol();
	        if (this.state.wifistate) {
	            cmdObj.requestType = "WIFI_close";
	            this.cmd(JSON.stringify(cmdObj), function (m) {
	                console.log("wifi m : " + m);
	                if (m == 1) {
	                    p.setState({ wifistate: 0 });
	                }
	            });
	        } else {
	            cmdObj.requestType = "WIFI_open";
	            this.cmd(JSON.stringify(cmdObj), function (n) {
	                console.log("wifi n : " + n);
	                if (n == 1) {
	                    p.setState({ wifistate: 1 });
	                }
	            });
	        }
	    },
	    backSelect: function backSelect() {
	        this.refs.select.setState({
	            show: false
	        });
	    },
	    /* cmd 控制协议 */
	    cmd_protocol: function cmd_protocol() {
	        var cmd = {
	            "sourceId": "123456",
	            "serialNum": new Date().getTime() % 10000,
	            "requestType": "", //“requestType”:”WIFI_open”或”WIFI_close”,(必须)(str),
	            "id": this.state.ddcmac
	        };
	        return cmd;
	    },
	    DDCUpdateName: function DDCUpdateName(value) {
	        var p = this;
	        var ddcname = value;
	        this.refs.select.setState({
	            show: false
	        });

	        if (ddcname) {
	            Ajax("POST", "updateDdcName", { ddcname: ddcname, ddcid: this.state.ddcid, userid: this.state.user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({
	                        title: ddcname
	                    });
	                } else {
	                    p.refs.msg.setState({
	                        show: true,
	                        timeout: 1500,
	                        word: "修改失败，请重新修改"
	                    });
	                }
	            });
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入网关名称"
	            });
	        }
	    },
	    savePwd: function savePwd() {
	        var p = this;
	        var text = this.refs.text.value;

	        if (!text.match(/^[a-zA-Z0-9-_]{8,10}$/g)) {
	            p.refs.msg.setState({ show: true, type: 1, word: "请输入英文字母或数字,其长度8~10位", timeout: 2000 });
	            return;
	        }
	        var cmdObj = this.cmd_protocol();
	        cmdObj.requestType = "WIFI_password";
	        cmdObj["attributes"] = { "PASSWORD": text };

	        this.cmd(JSON.stringify(cmdObj), function (n) {
	            if (n == 1) {
	                p.refs.msg.setState({ show: true, word: "修改成功", timeout: 1000 });
	            }
	        });
	    },
	    changeTitleid: function changeTitleid(id) {
	        console.log("id:" + id);
	        switch (parseInt(id)) {
	            case 1:
	                this.refs.select.setState({
	                    show: true
	                });
	                this.refs.select.setValue(this.state.title);
	                break;
	        }
	    },
	    render: function render() {
	        var p = this;
	        var data = "";
	        if (this.state.gomore) {
	            data = React.createElement(
	                'div',
	                { className: 'contentk', id: 'wrapper' },
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ', style: { width: "100%", height: "2rem", lineHeight: "2rem", marginTop: "2rem" } },
	                    React.createElement(
	                        'text',
	                        { style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.4rem", color: "#b3abcc", width: "30%" } },
	                        'DDC信息'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        'macid:'
	                    ),
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                        this.state.ddcmac
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        'IP:'
	                    ),
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                        this.state.IP
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        '软件版本:'
	                    ),
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                        this.state.version
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        'LED控制:'
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemBtn', style: { marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { choose: this.state.led, doSwitch: this.LEDHandle })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ', style: { width: "100%", height: "2rem", marginTop: "2rem" } },
	                    React.createElement(
	                        'text',
	                        { style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.4rem", color: "#b3abcc", width: "30%" } },
	                        'WiFi信息'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        'WiFi名称:'
	                    ),
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                        this.state.ssid
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        'WiFi控制:'
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemBtn', style: { marginRight: "2rem" } },
	                        React.createElement(SwitchBtn, { choose: this.state.wifistate, doSwitch: this.doWifiState })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                    React.createElement(
	                        'text',
	                        { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1.5rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                        '密码修改:'
	                    ),
	                    React.createElement('input', { className: 'BJ_DW_FZ borderinput ', type: 'text', ref: 'text', style: { marginLeft: "2rem", marginTop: "1.5rem", fontSize: "1.2rem", color: "#d1cae0", width: "35%" }, onblur: '请输入', onChange: this.getWifiPassword }),
	                    React.createElement(
	                        'div',
	                        { className: 'itemBtn Button3', style: { marginRight: "1.6rem", marginTop: "4%" }, onClick: p.savePwd },
	                        '保存'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ BJ_DQ_ZX', style: { marginTop: "2rem", height: "5rem", width: "100%" }, onClick: this.gotoMore },
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ  ', style: { fontSize: "1.2rem", color: "#b3abcc", width: "100%" } },
	                        '更多'
	                    ),
	                    React.createElement('div', { className: 'BJ_DW_FZ BJ_DQ_ZX fontS iconfont icon-jiantou ', style: { width: "100%", color: "#b3abcc" } })
	                )
	            );
	        } else {
	            data = React.createElement(
	                'div',
	                { className: 'contentk  ', id: 'wrapper', style: { overflow: "hidden" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "auto", width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { width: "100%", height: "500px" } },
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { width: "100%", height: "1rem", lineHeight: "1rem", marginTop: "2rem" } },
	                            React.createElement(
	                                'text',
	                                { style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.4rem", color: "#b3abcc", width: "30%" } },
	                                'DDC信息'
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'mac地址:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.ddcmac
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'IP:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.IP
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                '软件版本:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.version
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'LED控制:'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'itemBtn', style: { marginRight: "2rem" } },
	                                React.createElement(SwitchBtn, { choose: this.state.led, doSwitch: this.LEDHandle })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { width: "100%", height: "1rem", marginTop: "1rem" } },
	                            React.createElement(
	                                'text',
	                                { style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.4rem", color: "#b3abcc", width: "30%" } },
	                                'WiFi信息'
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'WiFi名称:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.ssid
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'WiFi控制:'
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'itemBtn', style: { marginRight: "2rem" } },
	                                React.createElement(SwitchBtn, { choose: this.state.wifistate, doSwitch: this.doWifiState })
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1.5rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                '密码修改:'
	                            ),
	                            React.createElement('input', { className: 'BJ_DW_FZ borderinput ', type: 'text', ref: 'text', style: { marginLeft: "2rem", marginTop: "1.5rem", fontSize: "1.2rem", color: "#d1cae0", width: "35%" }, onblur: '请输入', onChange: this.getWifiPassword }),
	                            React.createElement(
	                                'div',
	                                { className: 'itemBtn Button3', style: { marginRight: "1.6rem", marginTop: "4%" }, onClick: p.savePwd },
	                                '保存'
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { width: "100%", height: "2rem", lineHeight: "3rem" } },
	                            React.createElement(
	                                'text',
	                                { style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.4rem", color: "#b3abcc", width: "30%" } },
	                                '其他信息'
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.0rem", color: "#b3abcc", width: "30%" } },
	                                'ZigBee MAC地址:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.zbmac
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'ZigBee 版本:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.zbversion
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                'ZigBee 信道:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.zbpanid
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: ' BJ_DW_FZ ', style: { height: "2.5rem", width: "100%" } },
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#b3abcc", width: "30%" } },
	                                '已安装APP:'
	                            ),
	                            React.createElement(
	                                'text',
	                                { className: ' BJ_DW_FZ', style: { marginLeft: "2rem", marginTop: "1rem", fontSize: "1.2rem", color: "#d1cae0", width: "40%" } },
	                                this.state.app
	                            )
	                        )
	                    )
	                )
	            );
	        }
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { style: { background: "transparent" }, title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doRight }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "30%", width: "100%", color: "white", paddingTop: "3rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'imgk' },
	                    React.createElement('img', { className: 'BJ_DW_JZ', style: { height: "100%" }, src: 'images/main/detail/ddc.png' })
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'headerk' },
	                React.createElement(Label, { title: 'LED控制', value: this.state.led ? "开" : "关" }),
	                React.createElement(Label, { title: 'WIFI控制', value: this.state.wifistate ? "开" : "关" }),
	                React.createElement(Label, { title: '网络', value: this.state.online ? "在线" : "不在线" })
	            ),
	            React.createElement(Connect, null),
	            React.createElement(
	                'div',
	                { style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "100%" } },
	                data
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ConfigList, { data: this.state.data, onchange: this.changeTitleid, ref: 'configList' }),
	            React.createElement(InputWin, { icon: 'inform', ref: 'select', doDone: this.DDCUpdateName, title: '名称', placeholder: '请输入名称' })
	        );
	    }
	});

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/24.
	 */

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var DevItem = __webpack_require__(258);
	var ConfigList = __webpack_require__(287);
	var OpWin = __webpack_require__(263);
	var UserWin = __webpack_require__(335);
	var PwdWin = __webpack_require__(336);
	var MsgWin = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            title: "我的",
	            list: [],
	            data: [],
	            currId: "",
	            user: {}
	        };
	    },

	    myScroll: "",

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.setUserList(user);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    setUserList: function setUserList(user) {
	        var p = this;
	        if (user) {
	            Ajax("POST", "getUserListByParentId", { pid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ list: dt.data });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                } else {}
	            });
	        }
	    },

	    reflesh: function reflesh() {
	        this.setUserList();
	    },

	    goBack: function goBack() {
	        location.href = "#mine";
	    },

	    doMore: function doMore() {
	        var dataList = [{ iconfont: "icon-zhanghao", text: "新增用户", id: 1 }, { iconfont: "icon-mima", text: "密码修改", id: 2 }];
	        this.refs.configList.setState({ data: dataList, hover: true });
	    },
	    changeTitleid: function changeTitleid(id) {
	        switch (parseInt(id)) {
	            case 1:
	                this.addUser();break;
	            case 2:
	                this.updataPwd();break;
	        }
	    },
	    addUser: function addUser() {
	        var p = this;
	        p.refs.UWin.show();
	    },
	    updataPwd: function updataPwd() {
	        var p = this;
	        p.refs.PWin.show();
	    },

	    doClick: function doClick(e) {
	        var uid = e.currentTarget.getAttribute("data-id");
	        if (uid) {
	            this.refs.opWin.setState({
	                data: [{ name: "修改", id: 1, fid: uid }, { name: "删除", id: 2, fid: uid }, { name: "设备权限", id: 3, fid: uid }, { name: "情景权限", id: 4, fid: uid }, { name: "摄像头权限", id: 5, fid: uid }, { name: "机器人权限", id: 6, fid: uid }]
	            });
	            this.setState({ currId: uid });
	            this.refs.opWin.show();
	        }
	    },
	    doDone: function doDone(id, fid) {
	        console.log("id: " + id + " - fid: " + fid);
	        switch (parseInt(id)) {
	            case 1:
	                this.updateUser(fid);break;
	            case 2:
	                this.delUser(fid);break;
	            case 3:
	                location.href = "/#/authList/1?uid=" + fid;break;
	            case 4:
	                location.href = "/#/authList/2?uid=" + fid;break;
	            case 5:
	                location.href = "/#/videoAlloc/" + fid;break;
	            case 6:
	                location.href = "/#/robotAlloc/" + fid;break;
	        }
	        this.refs.opWin.hide();
	    },

	    delUser: function delUser(fid) {
	        var p = this;
	        p.setState({ currId: fid });
	        p.refs.msg.setState({ show: true, word: "确定删除吗?" });
	    },

	    doDelete: function doDelete() {
	        var p = this;
	        var id = this.state.currId;
	        var pid = 24;
	        p.refs.msg.setState({ show: false });
	        if (id && pid) {
	            Ajax("POST", "delUser", { id: id, pid: pid }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.info.setState({
	                        word: "用户删除成功",
	                        timeout: 1500,
	                        show: true
	                    });
	                    setTimeout(function () {
	                        var user = p.state.user;
	                        p.setUserList(user);
	                        p.reflesh();
	                        p.myScroll.refresh();
	                    }, 1800);
	                } else {
	                    p.refs.info.setState({
	                        word: dt.msg,
	                        timeout: 1500,
	                        show: true
	                    });
	                }
	            });
	        }
	    },

	    updateUser: function updateUser(fid) {
	        var p = this;
	        p.refs.UWin.show(fid);
	    },

	    render: function render() {
	        var p = this;

	        var d = 0;
	        var dataList = "";
	        var list = p.state.list;
	        if (list.length > 0) {
	            dataList = list.map(function (obj) {
	                return React.createElement(
	                    'div',
	                    { key: "d" + ++d, className: 'itemdev', style: { height: "7rem" } },
	                    React.createElement(
	                        'div',
	                        { className: 'itemicon', style: { height: "7rem", lineHeight: "7rem" } },
	                        React.createElement(
	                            'div',
	                            { className: "itemCircle TB" + ((d - 1) % 6 + 1), style: { marginTop: "1rem" } },
	                            React.createElement('i', { className: "iconfont icon-personage", style: { fontSize: "3rem" } })
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemTitlek' },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle', style: { width: "100%" } },
	                            obj.username
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemInfom', style: { width: "40%", height: "2rem", lineHeight: "2rem" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemDDC', style: { fontSize: "1rem", width: "50%" } },
	                            React.createElement(
	                                'div',
	                                { style: { float: "left" } },
	                                obj.phone
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'itemMore', style: { float: "right", height: "3rem", lineHeight: "2rem", width: "4rem", textAlign: "center", marginRight: "1rem" }, 'data-id': obj.id, onClick: p.doClick },
	                        React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'gengduo', rightClick: this.doMore }),
	            React.createElement(
	                'div',
	                { className: 'userK' },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%", overflow: "hidden" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        dataList,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { data: this.state.data, onchange: this.changeTitleid, ref: 'configList' }),
	            React.createElement(OpWin, { title: '操作选择', ref: 'opWin', doDone: p.doDone }),
	            React.createElement(UserWin, { ref: 'UWin', reflesh: p.reflesh }),
	            React.createElement(PwdWin, { ref: 'PWin' }),
	            React.createElement(MsgWin, { ref: 'msg', title: '删除确认', type: '2', doDone: p.doDelete }),
	            React.createElement(MsgWin, { ref: 'info', title: '删除确认', type: '1' })
	        );
	    }
	});

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/1/30.
	 */

	'';

	var React = __webpack_require__(24);
	var BWin = __webpack_require__(261);
	var IconInput = __webpack_require__(253);
	var PwdInput = __webpack_require__(255);
	var MsgWin = __webpack_require__(250);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            title: "添加用户",
	            pid: "", // parentid
	            id: "" // userid
	        };
	    },

	    componentDidMount: function componentDidMount() {},

	    hide: function hide() {
	        var p = this;
	        p.refs.win.setState({ show: false });
	    },
	    show: function show(id) {
	        var p = this;

	        if (id) {
	            p.setState({ id: id });
	            p.setState({ title: "修改用户" });
	            p.getDdcListByUserId(id);
	        } else {
	            var value = "";
	            p.refs.name.setValue(value);
	            p.refs.pwd.setValue(value);
	            p.refs.pwd2.setValue(value);
	            p.refs.phone.setValue(value);
	        }

	        p.refs.win.setState({ show: true });
	    },

	    getDdcListByUserId: function getDdcListByUserId(uid) {
	        var p = this;
	        if (uid) {
	            Ajax("POST", "getUserbyId", { userid: uid, pid: 24 }, function (dt) {
	                console.log("UWin : " + JSON.stringify(dt.data[0]));
	                if (dt && dt.success && dt.data[0]) {
	                    var user = dt.data[0];
	                    p.refs.pwd.setValue("");
	                    p.refs.pwd2.setValue("");
	                    p.refs.phone.setValue(user.phone);
	                    p.refs.name.setValue(user.username);
	                }
	            });
	        }
	    },

	    doDone: function doDone() {
	        var p = this;
	        var name = p.refs.name.getValue(); // p.refs.name.state.text;
	        var pwd = p.refs.pwd.getValue(); // p.refs.pwd.state.text;
	        var pwd2 = p.refs.pwd2.getValue(); //p.refs.pwd2.state.text;
	        var phone = p.refs.phone.getValue(); //p.refs.phone.state.text;

	        console.log("111: " + name + "-" + pwd + "-" + pwd2 + "-" + phone);
	        if (!name) {
	            p.refs.msg.setState({ show: true, word: "请填写用户名", timeout: 1000 });
	            return;
	        }
	        if (!pwd) {
	            p.refs.msg.setState({ show: true, word: "请填写密码", timeout: 1000 });
	            return;
	        }
	        if (!pwd2) {
	            p.refs.msg.setState({ show: true, word: "请填写确认密码", timeout: 1000 });
	            return;
	        }
	        if (pwd2 != pwd) {
	            p.refs.msg.setState({ show: true, word: "确认密码错误", timeout: 1000 });
	            return;
	        }
	        if (!phone) {
	            p.refs.msg.setState({ show: true, word: "请填写手机号", timeout: 1000 });
	            return;
	        }
	        if (!phone.match(/^1[3|4|5|7|8]\d{9}$/g)) {
	            p.refs.msg.setState({ show: true, word: "手机号格式不对", timeout: 1000 });
	            return;
	        }

	        if (p.state.id != 0) {
	            p.updataUser(name, pwd, phone);
	        } else {
	            p.addUser(name, pwd, phone);
	        }
	    },

	    addUser: function addUser(name, pwd, phone) {
	        var p = this;
	        var pid = 24;
	        console.log("addUser : " + name + pwd + phone);
	        Ajax("POST", "addUser", { username: name, userpassword: pwd, userphone: phone, pid: pid }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                console.log("添加成功");
	                p.hide();
	                p.refs.msg.setState({ show: true, word: "添加成功", timeout: 1500 });
	                p.props.reflesh();
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    updataUser: function updataUser(name, pwd, phone) {
	        var p = this;
	        var pid = 24;
	        console.log("updataUser : " + name + pwd + phone);
	        Ajax("POST", "updatUser", { username: name, userpassword: pwd, userphone: phone, pid: pid, id: this.state.id }, function (dt) {
	            console.log("dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.hide();
	                p.refs.msg.setState({ show: true, word: "修改成功", timeout: 1500 });
	                p.props.reflesh();
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	            }
	        });
	    },

	    render: function render() {
	        var p = this;

	        return React.createElement(
	            BWin,
	            { ref: 'win', title: this.state.title, doDone: p.doDone },
	            React.createElement(
	                'div',
	                null,
	                React.createElement(IconInput, { ref: 'name', placeholder: '请输入用户名', style: { width: "65%", marginLeft: "17.5%", marginTop: "1rem" } }),
	                React.createElement(PwdInput, { ref: 'pwd', placeholder: '请输入密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(PwdInput, { ref: 'pwd2', placeholder: '请确认密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(IconInput, { icon: 'shouji', ref: 'phone', placeholder: '请输入手机号', style: { width: "65%", marginLeft: "17.5%", marginTop: "1rem" } })
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1', style: { marginTop: "-30px" } })
	        );
	    }
	});

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/1.
	 */

	'';

	var React = __webpack_require__(24);
	var BWin = __webpack_require__(261);
	var PwdInput = __webpack_require__(255);
	var MsgWin = __webpack_require__(250);
	var Ajax = __webpack_require__(244);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            title: "修改密码",
	            pid: "", // parentid
	            id: "" // userid
	        };
	    },

	    componentDidMount: function componentDidMount() {},

	    hide: function hide() {
	        var p = this;
	        p.refs.win.setState({ show: false });
	    },
	    show: function show(id) {
	        var p = this;

	        if (id) {
	            p.setState({ id: id });
	            p.setState({ title: "修改用户" });
	        } else {
	            p.refs.pwd.setValue("");
	            p.refs.pwd2.setValue("");
	        }

	        p.refs.win.setState({ show: true });
	    },

	    doDone: function doDone() {
	        var p = this;

	        var id = 24;
	        var pwd = p.refs.pwd.getValue();
	        var pwd1 = p.refs.pwd1.getValue();
	        var pwd2 = p.refs.pwd2.getValue();

	        if (!pwd) {
	            p.refs.msg.setState({ show: true, word: "请填写原密码", timeout: 1000 });
	            return;
	        }
	        if (!pwd1) {
	            p.refs.msg.setState({ show: true, word: "请填写新密码", timeout: 1000 });
	            return;
	        }
	        if (!pwd2) {
	            p.refs.msg.setState({ show: true, word: "请填写确认密码", timeout: 1000 });
	            return;
	        }
	        if (pwd2 != pwd1) {
	            p.refs.msg.setState({ show: true, word: "确认密码错误", timeout: 1000 });
	            return;
	        }
	        p.updataPwd(id, pwd, pwd1);
	    },
	    updataPwd: function updataPwd(id, pwd, pwd1) {
	        console.log(id, pwd, pwd1);
	        var p = this;
	        if (id) {
	            Ajax("POST", "updatePwd", { userid: id, userpassword: pwd1, oldpassword: pwd }, function (dt) {
	                if (dt && dt.success) {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                    setTimeout(function () {
	                        p.hide();
	                    }, 1500);
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },

	    render: function render() {
	        var p = this;

	        return React.createElement(
	            BWin,
	            { ref: 'win', title: this.state.title, doDone: p.doDone },
	            React.createElement(
	                'div',
	                null,
	                React.createElement(PwdInput, { ref: 'pwd', placeholder: '输入原密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(PwdInput, { ref: 'pwd1', placeholder: '输入新密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(PwdInput, { ref: 'pwd2', placeholder: '请确认密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } })
	            ),
	            React.createElement(MsgWin, { ref: 'msg', type: '1', style: { marginTop: "-30px" } })
	        );
	    }
	});

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/1.
	 */

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var ConfigList = __webpack_require__(287);
	var OpWin = __webpack_require__(263);
	var UserWin = __webpack_require__(335);
	var PwdWin = __webpack_require__(336);
	var MsgWin = __webpack_require__(250);
	var Url = __webpack_require__(249);
	var GroupWin = __webpack_require__(284);
	var TypeWin = __webpack_require__(285);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: this.props.params.id, //1为设备权限,2为情景权限,3为平板权限
	            uid: "",
	            title: "设备权限",
	            data: [],
	            currId: "",

	            user: {},
	            deviceList: [], //所有设备
	            selectDev: [], //被选中的设备
	            selectGroups: [{ id: 0, name: "所有区域" }], //选中的区域
	            selectTypes: [{ id: 0, name: "所有设备" }], //选中的设备类型
	            isChoose: 0, // 1:全选

	            GroupList: [],
	            TypeList: [],

	            area: "",
	            type: ""

	        };
	    },

	    myScroll: "",
	    lock: 1,

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        var uid = Url.getParameterByName("uid") ? Url.getParameterByName("uid") : null;
	        this.setState({ uid: uid });
	        this.getUser(function (user) {
	            if (user) {} else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });

	        if (p.state.id == 1) {

	            p.setState({ title: "设备权限" });
	            p.fleshDeviceList(uid);
	            p.getGroupByUser();
	            p.getDeviceType();
	        } else if (p.state.id == 2) {

	            p.setState({ title: "情景权限" });
	            p.fleshDeviceList(uid);
	            p.getGroupByUser();
	            p.getDeviceType();
	        } else if (p.state.id == 3) {

	            p.setState({ title: "平板权限" });
	            p.getPads();
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },

	    fleshDeviceList: function fleshDeviceList(uid) {
	        var p = this;
	        var groups = [];
	        var groupAllFlag = false;
	        var noSelectFlag = 0;

	        for (var i = 0; i < p.state.selectGroups.length; i++) {
	            if (p.state.selectGroups[i].id == 0) {
	                groupAllFlag = true;
	                break;
	            }
	            if (p.state.selectGroups[i].id == -1) {
	                noSelectFlag = 1;
	            } else {
	                groups.push(p.state.selectGroups[i].id);
	            }
	        }
	        var types = [];
	        var typeAllFlag = false;
	        for (var j = 0; j < p.state.selectTypes.length; j++) {
	            if (this.state.selectTypes[j] == 0) {
	                typeAllFlag = true;
	            }
	            types.push(p.state.selectTypes[j].id);
	        }
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        p.setState({ user: user });
	        if (this.state.id == 1) {
	            if (user) {
	                Ajax("POST", "getAuthorDeviceByGroupsTypes", { userid: user.parentid,
	                    groups: groupAllFlag ? "all" : groups.join(","),
	                    types: typeAllFlag ? "" : types.join(","),
	                    noSelectFlag: noSelectFlag
	                }, function (dt) {
	                    if (dt && dt.success) {
	                        //p.refs.groupListWin.setState({show:false});
	                        p.setState({ deviceList: dt.data });
	                        p.setChoose(dt.data, uid);
	                        if (!p.myScroll) {
	                            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                            document.addEventListener('touchmove', function () {}, false);
	                        } else {
	                            p.myScroll.refresh();
	                            p.myScroll.scrollTo(0, 0, 0, IScroll.utils.ease.elastic);
	                        }
	                    }
	                });
	            }
	        } else if (this.state.id == 2) {
	            Ajax("POST", "getSceneListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ deviceList: dt.data });
	                    p.setChoose(dt.data, uid);
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                        p.myScroll.scrollTo(0, 0, 0, IScroll.utils.ease.elastic);
	                    }
	                }
	            });
	        }
	    },
	    getPads: function getPads() {
	        var p = this;
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        if (user) {
	            Ajax("POST", "getPadListByUserid", { userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ deviceList: dt.data });
	                    p.getpadButtonbyChild(dt.data); //获取该用户的原有的平板按钮权限
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                }
	            });
	        }
	    },
	    getpadButtonbyChild: function getpadButtonbyChild(list) {
	        var p = this;
	        var uid = Url.getParameterByName("uid");
	        if (list && uid) {
	            Ajax("POST", "getpadButtonbyChild", { userid: uid }, function (dt) {
	                if (dt && dt.success) {
	                    var selectButton = [];
	                    for (var i in dt.data) {
	                        selectButton.push(dt.data[i].padid);
	                    }
	                    if (list.length != 0) {
	                        if (list.length == selectButton.length) {
	                            p.setState({ isChoose: 1 });
	                        }
	                        p.setState({ selectDev: selectButton });
	                    }
	                }
	            });
	        }
	    },

	    setChoose: function setChoose(tempList, uid) {
	        var p = this;
	        if (uid && this.state.id) {
	            Ajax("POST", "authorList", { userid: uid, type: this.state.id }, function (dt) {
	                if (dt && dt.success) {
	                    var ids = [];
	                    for (var i = 0; i < dt.data.length; i++) {
	                        ids.push(dt.data[i].targetid);
	                    }
	                    if (tempList.length != 0) {
	                        if (tempList.length == ids.length) {
	                            p.setState({ isChoose: 1 });
	                        }
	                    }

	                    p.setState({ selectDev: ids });
	                }
	            });
	        }
	    },
	    setUserList: function setUserList() {
	        var p = this;
	        Ajax("POST", "getUserListByParentId", { pid: 24 }, function (dt) {
	            console.log("dt: " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ list: dt.data });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                } else {
	                    p.myScroll.refresh();
	                }
	            } else {
	                //p.refs.msg.setState({show: true, type: "text", word: dt.msg, timeout: 1000});
	            }
	        });
	    },

	    reflesh: function reflesh() {
	        this.setUserList();
	    },

	    goBack: function goBack() {
	        //history.go(-1);
	        location.href = "/#/user?f=3";
	    },

	    changeTitleid: function changeTitleid(id) {
	        console.log("id:" + id);
	        switch (parseInt(id)) {
	            case 1:
	                this.addUser();break;
	            case 2:
	                this.updataPwd();break;
	        }
	    },
	    addUser: function addUser() {
	        var p = this;
	        var id = 24;

	        p.refs.UWin.show();
	    },
	    updataPwd: function updataPwd() {
	        var p = this;
	        p.refs.PWin.show();
	    },

	    doClick: function doClick(e) {
	        //var uid =e.currentTarget.getAttribute("data-id") ;
	        //if(uid){
	        //    this.refs.opWin.setState({
	        //        data:[
	        //            {name:"修改",id:1,fid:uid},
	        //            {name:"删除",id:2,fid:uid},
	        //            {name:"设备权限",id:3,fid:uid},
	        //            {name:"情景权限",id:4,fid:uid},
	        //            {name:"面板按钮权限",id:5,fid:uid},
	        //            {name:"机器人权限",id:6,fid:uid}
	        //        ]
	        //    });
	        //    this.setState({currId:uid});
	        //    this.refs.opWin.show();
	        //    //this.refs.opWin.setState({show:true});
	        //}
	    },
	    doDone: function doDone(id, fid) {
	        console.log("id: " + id + " - fid: " + fid);
	        switch (parseInt(id)) {
	            case 1:
	                this.updateUser(fid);break;
	            case 2:
	                this.delUser(fid);break;
	            //case 3:this.setCommom(scenceid,1);break;
	            //case 4:this.setCommom(scenceid,0);break;
	            //case 5:this.setTiming(scenceid);break;
	            //case 6:
	            //  this.refs.sortNum.setState({show:true});
	            //排序
	            //break;
	        }
	        this.refs.opWin.hide();
	    },
	    delUser: function delUser(fid) {
	        var p = this;
	        p.setState({ currId: fid });
	        p.refs.msg.setState({ show: true, word: "确定删除吗?" });
	    },

	    doDelete: function doDelete() {
	        var p = this;
	        var id = this.state.currId;
	        var pid = 24;
	        if (id && pid) {
	            Ajax("POST", "delUser", { id: id, pid: pid }, function (dt) {
	                if (dt && dt.success) {
	                    console.log(dt.success);
	                    p.refs.msg.setState({ show: false });
	                    p.reflesh();
	                    p.myScroll.refresh();
	                }
	            });
	        }
	    },

	    updateUser: function updateUser(fid) {
	        var p = this;
	        p.refs.UWin.show(fid);
	    },
	    checkHandler: function checkHandler(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-type");
	        var attr = p.state.selectDev;
	        var flag = true;
	        var devObj = null;
	        var attrNew = [];
	        try {
	            devObj = JSON.parse(data);
	        } catch (e) {
	            console.log(e);
	        }
	        if (devObj) {
	            for (var i = 0; i < attr.length; i++) {
	                if (attr[i] == devObj.id) {
	                    flag = false;
	                    p.setState({ isChoose: 0 });
	                } else {
	                    attrNew.push(attr[i]);
	                }
	            }
	            if (flag) {
	                attrNew.push(devObj.id);
	            }
	            p.setState({ selectDev: attrNew });

	            if (attrNew.length == p.state.deviceList.length) {
	                p.setState({ isChoose: 1 });
	            }
	        } else {
	            p.setState({
	                selectDev: attr
	            });
	        }
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        //console.log("user : " + JSON.stringify(user));
	        if (user) {
	            Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    var GroupList = [];
	                    var icondata = dt.data;
	                    for (var i in icondata) {
	                        GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                    }
	                    p.setState({ GroupList: GroupList });
	                }
	            });
	        }
	    },
	    getDeviceType: function getDeviceType() {
	        var p = this;
	        Ajax("POST", "getAllDeviceType", {}, function (dt) {
	            if (dt && dt.success) {
	                //console.log(JSON.stringify(dt.data));
	                var TypeList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    TypeList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].typename });
	                }
	                p.setState({
	                    TypeList: TypeList
	                });
	            }
	        });
	    },
	    getArea: function getArea() {
	        var p = this;
	        //p.getGroupByUser();
	        this.refs.groupwin.doShow(this.state.GroupList);
	    },
	    getAreaSelect: function getAreaSelect(attr) {
	        var p = this;
	        //console.log("area : " + JSON.stringify(attr));
	        if (attr) {
	            this.setState({ selectGroups: attr });
	            var groupStr = [];
	            if (attr.length > 0) {
	                for (var i = 0; i < attr.length; i++) {
	                    groupStr.push(attr[i].name);
	                }
	            }
	            this.setState({ area: groupStr.join(",") });
	            setTimeout(function () {
	                p.fleshDeviceList(p.state.uid);
	            }, 300);
	        }
	    },
	    getType: function getType() {
	        this.refs.typewin.doShow(this.state.TypeList);
	    },
	    getTypeSelect: function getTypeSelect(attr) {
	        var p = this;
	        console.log("type: " + JSON.stringify(attr));
	        if (attr) {
	            this.setState({ selectTypes: attr });
	            var groupStr = [];
	            if (attr.length > 0) {
	                for (var i = 0; i < attr.length; i++) {
	                    groupStr.push(attr[i].name);
	                }
	            }
	            this.setState({ type: groupStr.join(",") });
	            setTimeout(function () {
	                p.fleshDeviceList(p.state.uid);
	            }, 300);
	        }
	    },

	    doChoose: function doChoose() {
	        var p = this;
	        var attr = this.state.deviceList;
	        var attrNew = [];
	        //console.log("111attr : " + JSON.stringify(attr));
	        var t = this.state.isChoose;
	        if (t) {
	            this.setState({ isChoose: 0 });
	            p.setState({ selectDev: [] });
	        } else {
	            this.setState({ isChoose: 1 });
	            for (var i = 0; i < attr.length; i++) {
	                attrNew.push(attr[i].id);
	            }
	            p.setState({ selectDev: attrNew });
	        }
	    },

	    doSave: function doSave() {
	        var p = this;
	        //p.refs.msg.setState({show: true, type: "loading"});

	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        var type = this.state.id;
	        var uid = this.state.uid;
	        var devids = "";
	        if (this.state.id != 3) {
	            if (this.state.selectDev.length != 0) {
	                devids = this.state.selectDev.join(",");
	            }
	            if (user) {
	                Ajax("POST", "savAuthor", { userid: uid, type: type, devids: devids }, function (dt) {
	                    console.log("dt : " + JSON.stringify(dt));
	                    if (dt && dt.success) {
	                        //p.refs.msg.setState({show: true, type: "text", word: "保存成功", timeout: 800});
	                        setTimeout(function () {
	                            location.href = "/#/user?f=3";
	                        }, 800);
	                    } else {
	                        p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                    }
	                });
	            }
	        } else {
	            //p.refs.msg.setState({show: true, type: "loading"});
	            //console.log("uid:"+uid+" selectDev:"+JSON.stringify(this.state.selectDev));
	            Ajax("POST", "authorPad", { userid: uid, selectbutton: p.state.selectDev }, function (dt) {
	                if (dt && dt.success) {
	                    //p.refs.msg.setState({show: true, type: "text", word: "保存成功", timeout: 800});
	                    setTimeout(function () {
	                        location.href = "/#/user?f=3";
	                    }, 800);
	                } else {
	                    p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 1000 });
	                }
	            });
	        }
	    },

	    render: function render() {
	        var p = this;

	        var d = 0;
	        var dataList = "";

	        var list = p.state.deviceList;
	        if (list.length > 0) {
	            dataList = list.map(function (obj) {
	                var sd = p.state.selectDev;
	                var selectflag = null;
	                for (var i = 0; i < sd.length; i++) {
	                    if (sd[i] == obj.id) {
	                        selectflag = true;
	                    }
	                }

	                var icon = "icon-zhanghao";
	                if (p.state.id == 3) {
	                    icon = "icon-" + obj.dicon;
	                } else {
	                    icon = "icon-" + obj.hicon;
	                }

	                return React.createElement(
	                    'div',
	                    { className: 'item_S  B2g', style: { width: "96%", marginLeft: "2%", borderRadius: "0.5rem" }, key: "senseD" + ++d },
	                    React.createElement(
	                        'div',
	                        { style: { height: "4rem", width: "100%" } },
	                        React.createElement(
	                            'div',
	                            { className: " itemS BJ_DW_FZ  " + ("TB" + ((d - 1) % 6 + 1)) },
	                            React.createElement('i', { className: "itemIcon_S iconfont " + icon, style: { fontSize: "3rem", marginLeft: "0.5rem" } })
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { width: "70%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                            React.createElement(
	                                'div',
	                                { className: 'itemTitle_S', style: { height: p.state.id == 2 ? "4rem" : "1.8rem", lineHeight: p.state.id == 2 ? "4rem" : "2rem", width: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                                p.state.id == 1 ? obj.name : obj.buttonname
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { color: "#b7b7b7" } },
	                                React.createElement(
	                                    'div',
	                                    { className: "FS12 BJ_BJ_ML10 BJ_DW_FZ", style: { marginTop: "2px", height: "1.8rem", lineHeight: "1.8rem" } },
	                                    obj.ddcname ? obj.ddcname : ""
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: "BJ_DW_FZ  FS12 ", style: { marginTop: "0.1rem", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", width: "15rem", height: "1.8rem", lineHeight: "1.8rem" } },
	                                    obj.alias ? React.createElement(
	                                        'span',
	                                        null,
	                                        ' | '
	                                    ) : "",
	                                    obj.alias ? obj.alias : ""
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', 'data-type': JSON.stringify(obj), style: { width: "10%", height: "5rem", lineHeight: "5rem" }, onClick: p.checkHandler },
	                            React.createElement('i', { className: "itemIcon_S iconfont " + (selectflag ? "icon-xuanzhong JQS" : " icon-weixuanzhong JQS"), style: { fontSize: "3rem" } })
	                        )
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'baocun', rightClick: this.doSave }),
	            React.createElement(
	                'div',
	                { className: 'userK' },
	                p.state.id == 1 ? React.createElement(
	                    'div',
	                    null,
	                    React.createElement(
	                        'div',
	                        { className: 'item_AU' },
	                        React.createElement(
	                            'div',
	                            { className: 'title_AU' },
	                            "区域选择"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'text_AU', ref: 'area', onClick: p.getArea },
	                            p.state.area ? p.state.area : "所有区域"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'item_AU' },
	                        React.createElement(
	                            'div',
	                            { className: 'title_AU' },
	                            "设备类型"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'text_AU', ref: 'type', onClick: p.getType },
	                            p.state.type ? p.state.type : "所有设备"
	                        )
	                    )
	                ) : "",
	                React.createElement(
	                    'div',
	                    { className: 'item_AU' },
	                    React.createElement(
	                        'div',
	                        { className: 'title_AU' },
	                        p.state.id == 1 ? "设备选择" : "情景选择"
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { marginRight: "2.5rem", height: "4rem", lineHeight: "4rem", float: "right" }, onClick: p.doChoose },
	                        React.createElement('i', { className: "itemIcon_S iconfont " + (p.state.isChoose ? "icon-xuanzhong JQS" : "icon-weixuanzhong JQS"), style: { fontSize: "3rem" } })
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", fontSize: "1.4rem", color: "#8877ff" } },
	                        "全选"
	                    )
	                ),
	                React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	                React.createElement(
	                    'div',
	                    { className: p.state.id == 1 ? "device_AU " : "scence_AU" },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            dataList,
	                            React.createElement('div', { style: { height: "1rem" } })
	                        )
	                    )
	                )
	            ),
	            React.createElement(ConfigList, { data: this.state.data, onchange: this.changeTitleid, ref: 'configList' }),
	            React.createElement(OpWin, { title: '操作选择', ref: 'opWin', doDone: p.doDone }),
	            React.createElement(GroupWin, { ref: 'groupwin', title: "选择区域", onSelect: this.getAreaSelect }),
	            React.createElement(TypeWin, { ref: 'typewin', title: "选择类型", onSelect: this.getTypeSelect }),
	            React.createElement(UserWin, { ref: 'UWin', reflesh: p.reflesh }),
	            React.createElement(PwdWin, { ref: 'PWin' }),
	            React.createElement(MsgWin, { ref: 'msg', title: '删除确认', type: '2', doDone: p.doDelete })
	        );
	    }
	});

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/26.
	 */

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var DevItem = __webpack_require__(258);
	var IconButton = __webpack_require__(248);
	var MsgWin = __webpack_require__(250);
	var global = __webpack_require__(262);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: this.props.params.id ? this.props.params.id : 1,
	            list: [
	                //{id:"1",ddcname:"ceshi1"},
	                //{id:"2",ddcname:"ceshi2"},
	                //{id:"3",ddcname:"ceshi3"},
	                //{id:"4",ddcname:"ceshi4"}
	            ],
	            sDDC: {}
	        };
	    },
	    myScroll: "",

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        this.getDdcListByUserId();
	    },
	    getDdcListByUserId: function getDdcListByUserId() {
	        var p = this;
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        this.setState({ user: user });
	        if (user) {
	            Ajax("POST", "getDdcListByUserId", { userid: user.parentid }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({ list: dt.data });
	                    //if(!p.myScroll){
	                    //    p.myScroll = new IScroll('#wrapper', {scrollX: false, scrollY: true, click:true,mouseWheel: true});
	                    //    document.addEventListener('touchmove', function () { }, false);
	                    //}else{
	                    //    p.myScroll.refresh();
	                    //}

	                    p.setState({ sDDC: global.Sddc });
	                }
	            });
	        }
	    },

	    goBack: function goBack() {
	        var id = this.state.id;
	        location.href = "/#/setting/" + id + "?s=1";
	    },

	    doSave: function doSave() {
	        var id = this.state.id;
	        if (this.state.sDDC.hasOwnProperty("ddcname")) {
	            global.Sddc = this.state.sDDC;
	            location.href = "/#/setting/" + id + "?s=1";
	        } else {
	            this.refs.msg.setState({ show: true, word: "请选择ddc", timeout: 1500 });
	        }
	    },

	    doChoose: function doChoose(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        var ddcname = e.currentTarget.getAttribute("data-text");
	        var ddcmac = e.currentTarget.getAttribute("data-mac");
	        var item = { id: id, ddcname: ddcname, ddcmac: ddcmac };
	        p.setState({ sDDC: item });
	        console.log(JSON.stringify(item));
	        if (p.state.sDDC.hasOwnProperty("ddcname")) {
	            if (p.state.sDDC.id == id) {
	                p.setState({ sDDC: {} });
	            }
	        }
	    },

	    render: function render() {
	        var p = this;

	        var t = 0;
	        var ddcData = "";
	        var list = this.state.list;
	        if (list.length > 0) {
	            ddcData = list.map(function (obj) {
	                var flag = false;
	                var sDDC = p.state.sDDC;
	                if (sDDC.id == obj.id) {
	                    flag = true;
	                }

	                return React.createElement(
	                    'div',
	                    { key: "t_" + t++, className: 'labelItem' },
	                    React.createElement(
	                        'div',
	                        { style: { color: "#9a98a0", textIndent: "1em", float: "left" } },
	                        obj.ddcname
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { float: "right", width: "10%", height: "4.5rem", lineHeight: "4.5rem", marginRight: "1rem" }, 'data-id': obj.id, 'data-text': obj.ddcname, 'data-mac': obj.ddcmac, onClick: p.doChoose },
	                        React.createElement('i', { className: "JQS iconfont " + (flag ? "icon-xuanzhong " : " icon-weixuanzhong "), style: { fontSize: "2.5rem" } })
	                    )
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: "DDC选择", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'baocun', rightClick: this.doSave }),
	            React.createElement('div', { style: { marginTop: "4.5rem" } }),
	            ddcData,
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/9.
	 */
	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var DevItem = __webpack_require__(258);
	var GroupWin = __webpack_require__(284);
	var IconButton = __webpack_require__(248);
	var global = __webpack_require__(262);
	var MsgWin = __webpack_require__(250);
	var Logic = __webpack_require__(340);
	var RenLogic = __webpack_require__(341);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: this.props.params.id ? this.props.params.id : 1, //1为新增,大于0为修改id
	            ddcid: this.props.params.did, // 这个是选择的ddcid
	            devicelist: [],
	            sList: [],

	            commonData: [],
	            selectGroups: [{ id: 0, name: "所有区域" }],
	            area: "",
	            logic: "or", // 1 : 与    2 : 或
	            innerDev: []
	        };
	    },
	    myScroll: "",

	    componentDidMount: function componentDidMount() {
	        var p = this;
	        if (global.StrigList.length > 0) {
	            p.setState({ innerDev: global.StrigList });
	        }
	        if (global.Slogic) {
	            p.setState({ logic: global.Slogic });
	        }
	        this.getTrigData(p.state.ddcid, this.state.selectGroups);
	    },
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },

	    getTrigData: function getTrigData(ddcid, groups) {
	        var p = this;
	        var groupsAttr = [];
	        var groupAllFlag = false;
	        var noSelectFlag = 0;
	        for (var i = 0; i < groups.length; i++) {
	            if (groups[i].id == 0) {
	                groupAllFlag = true;
	            } else if (groups[i].id == -1) {
	                noSelectFlag = 1;
	            } else {
	                groupsAttr.push(groups[i].id);
	            }
	        }
	        var user = JSON.parse(localStorage.getItem("ibms-login"));
	        this.setState({ user: user });
	        if (user) {
	            Ajax("POST", "getTriDeviveByDdcIdGroups", { ddcid: ddcid, groups: groupAllFlag ? "all" : groupsAttr.join(","), userid: user.parentid, noSelectFlag: noSelectFlag }, function (dt) {
	                if (dt.success) {
	                    var arry = [];
	                    for (var i in dt.data) {
	                        var obj = {};
	                        obj = dt.data[i];
	                        try {
	                            var attr = JSON.parse(dt.data[i].attributes);
	                            if (obj) {
	                                obj.attributes = attr;
	                                arry.push(obj);
	                            }
	                        } catch (e) {
	                            console.log("e: " + dt.data[i].attributes);
	                        }
	                    }
	                    if (dt && dt.success) {
	                        p.setState({ devicelist: arry });
	                        if (!p.myScroll) {
	                            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	                            document.addEventListener('touchmove', function () {}, false);
	                        } else {
	                            p.myScroll.refresh();
	                        }
	                    }
	                }
	            });
	        }
	    },
	    getLEV: function getLEV(e) {
	        var p = this;
	        var LEV = e.currentTarget.getAttribute("data-type");
	        var id = e.currentTarget.getAttribute("data-id");
	        var attr = p.state.innerDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].id == id) {
	                attr[i].attributes["LEV"] = LEV;
	            }
	        }
	        p.setState({ innerDev: attr });
	    },
	    getCTM: function getCTM(e) {
	        var p = this;
	        var CTM = e.currentTarget.getAttribute("data-type");
	        var id = e.currentTarget.getAttribute("data-id");
	        var attr = p.state.innerDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].id == id) {
	                attr[i].attributes["CTM"] = CTM;
	            }
	        }
	        p.setState({ innerDev: attr });
	    },

	    goBack: function goBack() {
	        var id = this.state.id;
	        location.href = "/#/setting/" + id + "?s=1";
	    },

	    //doSave:function(){
	    //    global.Slogic=this.state.logic;
	    //    location.href="/#/setting/3/1";
	    //},

	    doSave: function doSave() {
	        var p = this;
	        var name = [];
	        var selectDevIn = this.state.innerDev;
	        console.log("selectDevIn:" + JSON.stringify(selectDevIn));
	        if (selectDevIn.length > 0) {
	            var logic = this.state.logic;
	            if (logic == "and") {
	                for (var i = 0; i < selectDevIn.length; i++) {
	                    name.push({ id: i, devname: selectDevIn[i].devname });
	                    var attr = selectDevIn[i].attributes;
	                    if (!attr || JSON.stringify(attr) == "{}") {
	                        p.refs.msg.setState({ show: true, type: "text", word: "请选择触发条件", timeout: 1000 });
	                        return;
	                    } else {
	                        var listTemp = [];
	                        for (var key in attr) {
	                            if (key == "NAM" || key == "GRP") {} else {
	                                listTemp.push(key);
	                            }
	                        }
	                        if (listTemp.length == 0) {
	                            p.refs.msg.setState({ show: true, word: "请选择触发条件", timeout: 1000 });
	                            return;
	                        }
	                    }
	                    //暂时只支持触摸开关
	                    if (attr.hasOwnProperty("SWI_ON") && attr.hasOwnProperty("SWI_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW1_ON") && attr.hasOwnProperty("SW1_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW2_ON") && attr.hasOwnProperty("SW2_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW3_ON") && attr.hasOwnProperty("SW3_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW4_ON") && attr.hasOwnProperty("SW4_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW5_ON") && attr.hasOwnProperty("SW5_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("SW6_ON") && attr.hasOwnProperty("SW6_OFF")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                    if (attr.hasOwnProperty("DOR_OUT") && attr.hasOwnProperty("DOR_INP")) {
	                        p.refs.msg.setState({ show: true, word: "在触发逻辑为“与”下，选择触发条件矛盾", timeout: 1000 });
	                        return;
	                    }
	                }

	                global.StrigName = name;
	                global.StrigList = this.state.innerDev;
	                global.Slogic = logic;

	                location.href = "/#/setting/" + p.state.id + "?s=1";
	            }
	            if (logic == "or") {
	                for (var j = 0; j < selectDevIn.length; j++) {
	                    name.push({ id: j, devname: selectDevIn[j].devname });
	                    var attri = selectDevIn[j].attributes;
	                    if (!attri || JSON.stringify(attri) == "{}") {
	                        p.refs.msg.setState({ show: true, type: "text", word: "请选择触发条件", timeout: 1000 });
	                        return;
	                    } else {
	                        var list = [];
	                        for (var o in attri) {
	                            if (o == "NAM" || o == "GRP") {} else {
	                                list.push(o);
	                            }
	                        }
	                        if (list.length == 0) {
	                            p.refs.msg.setState({ show: true, word: "请选择触发条件", timeout: 1000 });
	                            return;
	                        }
	                    }
	                }
	                console.log("name : " + JSON.stringify(name));
	                global.StrigName = name;
	                global.StrigList = this.state.innerDev;
	                global.Slogic = logic;
	                location.href = "/#/setting/" + p.state.id + "?s=1";
	            }
	        } else {
	            this.refs.msg.setState({ show: true, word: "请选择触发设备", timeout: 1000 });
	            //this.props.showTrig(null, null);
	        }
	    },

	    doLogic: function doLogic(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        p.setState({ logic: id });
	    },
	    getOpen: function getOpen(e) {
	        var p = this;
	        var macid = e.currentTarget.getAttribute("data-id");
	        var did = e.currentTarget.getAttribute("data-did");
	        var type = e.currentTarget.getAttribute("data-type");
	        var alias = e.currentTarget.getAttribute("data-alias");
	        var attr = p.state.innerDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (alias && alias == attr[i]["NAM"]) {
	                var ss = type.split(",");
	                if (attr[i].attributes[ss[0] + "_" + ss[1]] == ss[1]) {
	                    delete attr[i].attributes[ss[0] + "_" + ss[1]];
	                } else {
	                    attr[i].attributes[ss[0] + "_" + ss[1]] = ss[1];
	                }
	                break;
	            } else {
	                if (attr[i].MAC == macid) {
	                    var ss = type.split(",");
	                    if (attr[i].attributes[ss[0] + "_" + ss[1]] == ss[1]) {
	                        delete attr[i].attributes[ss[0] + "_" + ss[1]];
	                    } else {
	                        attr[i].attributes[ss[0] + "_" + ss[1]] = ss[1];
	                    }
	                    break;
	                }
	            }

	            //组处理
	            var mac = attr[i].MAC;
	            if (mac.indexOf("_") == 0) {
	                if (attr[i].MAC == "_" + did) {
	                    var ss = type.split(",");
	                    if (attr[i].attributes[ss[0] + "_" + ss[1]] == ss[1]) {
	                        delete attr[i].attributes[ss[0] + "_" + ss[1]];
	                    } else {
	                        attr[i].attributes[ss[0] + "_" + ss[1]] = ss[1];
	                        attr[i].attributes[ss[0] + "_" + ss[1]] = ss[1];
	                    }
	                    break;
	                }
	            }
	        }
	        this.setState({ innerDev: attr });
	    },

	    checkHandler: function checkHandler(e) {
	        var p = this;
	        var data = e.currentTarget.getAttribute("data-type");
	        var devObj = JSON.parse(data);
	        var attr = this.state.innerDev;
	        var flag = true;
	        var attrNew = [];
	        for (var i = 0; i < attr.length; i++) {
	            if (attr[i].MAC == devObj.macid || attr[i].MAC == "_" + devObj.id || attr[i].attributes.NAM == devObj.alias) {
	                flag = false;
	            } else {
	                attrNew.push(attr[i]);
	            }
	        }
	        if (flag) {
	            if (devObj.macid == "0000000000000000") {
	                attrNew.push({
	                    id: devObj.id,
	                    MAC: "_" + devObj.id,
	                    devname: devObj.name,
	                    link: devObj.link,
	                    type: devObj.type,
	                    attributes: { GRP: devObj["attributes"]["GRP"], TYP: devObj["attributes"]["TYP"] }
	                });
	            } else {
	                if (devObj.alias && devObj.alias != devObj.macid) {
	                    attrNew.push({
	                        id: devObj.id,
	                        MAC: devObj.macid,
	                        devname: devObj.alias,
	                        link: devObj.link,
	                        type: devObj.type,
	                        attributes: { NAM: devObj.alias }
	                    });
	                } else {
	                    attrNew.push({
	                        id: devObj.id,
	                        MAC: devObj.macid,
	                        devname: devObj.name,
	                        link: devObj.link,
	                        type: devObj.type,
	                        attributes: {}
	                    });
	                }
	            }
	        }

	        console.log("attrNew : " + JSON.stringify(attrNew));
	        p.setState({ innerDev: attrNew });
	    },
	    getValue: function getValue(e) {
	        var p = this;
	        var type = e.currentTarget.getAttribute("data-type");
	        var mac = e.currentTarget.getAttribute("data-id");
	        var value = e.currentTarget.getAttribute("data-value");
	        var alias = e.currentTarget.getAttribute("data-alias");
	        var attr = p.state.innerDev;
	        for (var i = 0; i < attr.length; i++) {
	            if (alias && alias == attr[i]["NAM"]) {
	                attr[i].attributes[type] = value;
	                break;
	            } else {
	                if (attr[i].MAC == mac) {
	                    attr[i].attributes[type] = value;
	                    break;
	                }
	            }
	        }
	        console.log("attr : " + JSON.stringify(attr));
	        this.setState({ innerDev: attr });
	    },

	    getLogic: function getLogic(type, expression) {
	        //console.log(type +JSON.stringify(expression));
	        var macid = type.split(",")[0];
	        var attri = type.split(",")[1];

	        if (expression && macid && attri && expression.symbols) {
	            var attr = this.state.innerDev;
	            for (var i = 0; i < attr.length; i++) {
	                if (attr[i] && attr[i].MAC == macid) {
	                    attr[i].attributes[attri] = expression.value;
	                    attr[i].attributes["operator"] = expression.symbols;
	                }
	            }
	            this.setState({
	                innerDev: attr
	            });
	        } else {
	            var attr = this.state.innerDev;
	            for (var i = 0; i < attr.length; i++) {
	                if (attr[i] && attr[i].MAC == macid) {
	                    if (attr[i].attributes.hasOwnProperty("LIG")) {
	                        delete attr[i].attributes.LIG;
	                        attr[i].attributes.operator = "=";
	                    }
	                    if (attr[i].attributes.hasOwnProperty("STP")) {
	                        delete attr[i].attributes.STP;
	                        attr[i].attributes.operator = "=";
	                    }
	                }
	            }
	            this.setState({
	                innerDev: attr
	            });
	        }
	    },

	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({ GroupList: GroupList });
	                p.refs.groupwin.doShow(GroupList);
	            }
	        });
	    },

	    getAreaSelect: function getAreaSelect(attr) {
	        var p = this;
	        console.log("attr : " + JSON.stringify(attr));
	        if (attr) {
	            this.setState({ selectGroups: attr });
	            var groupStr = [];
	            if (attr.length > 0) {
	                for (var i = 0; i < attr.length; i++) {
	                    groupStr.push(attr[i].name);
	                }
	            }
	            p.setState({ area: groupStr.join(",") });
	            this.getTrigData(p.state.ddcid, attr);
	        }
	    },

	    doChoose: function doChoose() {
	        var p = this;
	        p.getGroupByUser();
	    },

	    render: function render() {
	        var p = this;
	        var logic = this.state.logic;

	        var dataList = "";
	        var list = this.state.devicelist;
	        if (list.length > 0) {
	            dataList = list.map(function (obj, num) {
	                var key = num % 6;
	                var bgc = "";
	                switch (key) {
	                    case 0:
	                        bgc = "TB1";break;
	                    case 1:
	                        bgc = "TB2";break;
	                    case 2:
	                        bgc = "TB3";break;
	                    case 3:
	                        bgc = "TB4";break;
	                    case 4:
	                        bgc = "TB5";break;
	                    case 5:
	                        bgc = "TB6";break;
	                    default:
	                        bgc = "TB1";break;
	                }
	                var selectflag = false;
	                var attr = p.state.innerDev;
	                var attributes = {};
	                for (var i in attr) {

	                    if (attr[i].hasOwnProperty("attributes") && attr[i].attributes.hasOwnProperty("NAM") && attr[i].attributes.NAM == obj.alias && obj.alias) {
	                        selectflag = true;
	                        attributes = attr[i].attributes;
	                        break;
	                    } else {
	                        if (attr[i].MAC) {
	                            if (attr[i].MAC == obj.macid) {
	                                selectflag = true;
	                                attributes = attr[i].attributes;
	                                break;
	                            }
	                        } else {
	                            if (attr[i].hasOwnProperty("id") && attr[i].id == obj.id) {
	                                selectflag = true;
	                                attributes = attr[i].attributes;
	                                break;
	                            }
	                        }
	                    }
	                }

	                return React.createElement(
	                    'div',
	                    { className: 'item_S  B2g', style: { width: "100%", marginTop: "2px" }, key: "senseD" + num + "obj" + obj.id },
	                    React.createElement(
	                        'div',
	                        { style: { height: "4rem", width: "100%" } },
	                        React.createElement(
	                            'div',
	                            { className: " itemS BJ_DW_FZ  " + bgc },
	                            React.createElement('i', { className: "itemIcon_S iconfont  " + (obj.dicon ? "icon-" + obj.dicon : " icon-zhanghao"), style: { fontSize: "3rem", marginLeft: "0.5rem" } })
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { width: "70%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                            React.createElement(
	                                'div',
	                                { className: 'itemTitle_S', style: { height: "1.8rem", lineHeight: "2rem", width: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                                obj.name
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { color: "#b7b7b7" } },
	                                React.createElement(
	                                    'div',
	                                    { className: "BJ_DW_FZ  FS12 ", style: { marginLeft: "0.5rem", marginTop: "0.1rem", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", width: "15rem", height: "1.8rem", lineHeight: "1.8rem" } },
	                                    obj.alias ? " " + obj.alias : ""
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', 'data-type': JSON.stringify(obj), style: { width: "10%", height: "5rem", lineHeight: "5rem" }, onClick: p.checkHandler },
	                            React.createElement('i', { className: "itemIcon_S iconfont " + (selectflag ? "icon-xuanzhong JQS" : " icon-weixuanzhong JQS"), style: { fontSize: "3rem" } })
	                        )
	                    ),
	                    obj.link == "ltctm" && obj.typ == "LT-CTM" ? React.createElement(
	                        'div',
	                        { className: selectflag && attributes ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "16rem" : "" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S ', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开",
	                                ' '
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_TOG"] == "TOG" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                ' ',
	                                "取反"
	                            )
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { style: { height: "12.5rem", marginTop: "5px" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S' },
	                                React.createElement(
	                                    'div',
	                                    { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                    "调光:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '1', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "1"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '5', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "5"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '15', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "15"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '25', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "25"
	                                ),
	                                React.createElement('br', null),
	                                React.createElement(
	                                    'div',
	                                    { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '35', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "35"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '50', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "50"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '75', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "75"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '100', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "100"
	                                )
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' }),
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { marginTop: "0.3rem" } },
	                                React.createElement(
	                                    'div',
	                                    { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                    "调色:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 0 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '0', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "0"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '5', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "5"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '15', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "15"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '25', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "25"
	                                ),
	                                React.createElement('br', null),
	                                React.createElement(
	                                    'div',
	                                    { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '35', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "35"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '50', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "50"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '75', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "75"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'CTM', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '100', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "100"
	                                )
	                            )
	                        )
	                    ) : "",
	                    obj.link == "ltt8s" && obj.typ == "LT-T8S" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "13rem" : "" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开",
	                                ' '
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_TOG"] == "TOG" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                ' ',
	                                "取反"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_YES"] == "YES" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,YES", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "有人"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_NO"] == "NO" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,NO", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "无人"
	                            )
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { style: { height: "3rem", marginTop: "5px" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S' },
	                                React.createElement(
	                                    'div',
	                                    { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                    "调光:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '1', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "1"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '5', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "5"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '15', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "15"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '25', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "25"
	                                ),
	                                React.createElement('br', null),
	                                React.createElement(
	                                    'div',
	                                    { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '35', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "35"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '50', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "50"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '75', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "75"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '100', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "100"
	                                )
	                            )
	                        )
	                    ) : "",
	                    obj.link == "ltlev" || obj.typ == "LT-LEV" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: selectflag ? "10rem" : "" } },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开",
	                                ' '
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SsspmwWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWsspmwI_TOG"] == "TOG" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,TOG", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                ' ',
	                                "取反"
	                            )
	                        ),
	                        React.createElement('div', { className: 'BJ_DW_QC' }),
	                        React.createElement(
	                            'div',
	                            { style: { marginTop: "5px" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S' },
	                                React.createElement(
	                                    'div',
	                                    { style: { width: "12%", textAlign: "center" }, className: ' BJ_DW_FZ FS14 BK ' },
	                                    "调光:"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '1', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "1"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '5', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "5"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '15', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "15"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '25', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "25"
	                                ),
	                                React.createElement('br', null),
	                                React.createElement(
	                                    'div',
	                                    { style: { marginLeft: "14%" }, className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '35', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "35"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '50', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "50"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '75', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "75"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: " BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100 ? " LtctmChecked_S " : " LtctmboxDev_S "), 'data-type': 'LEV', 'data-id': obj.macid == "0000000000000000" ? "_" + obj.id : obj.macid, 'data-value': '100', 'data-alias': obj.alias, onClick: p.getValue },
	                                    "100"
	                                )
	                            )
	                        )
	                    ) : "",
	                    obj.typ == "DL-LCK" || obj.typ == "DL-HTL" || obj.typ == "DL-HTK" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["DOR_OPEN"] == "OPEN" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "DOR,OPEN", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开门"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "hmlck" && obj.typ == "HM-LCK" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["DOR_OUT"] == "OUT" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "DOR,OUT", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "外开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["DOR_INP"] == "INP" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "DOR,INP", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "内开"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "wdrxj" && obj.typ == "WD-RXJ" || obj.link == "wdrxj" && obj.typ == "WD-DYK" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["WIN_OPEN"] == "OPEN" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "WIN,OPEN", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["WIN_CLOSE"] == "CLOSE" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "WIN,CLOSE", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["WIN_STOP"] == "STOP" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "WIN,STOP", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "停"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "irbyt" && obj.typ == "IR-BYT" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SND_68"] == "68" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SND,68", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "空调开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SND_67"] == "67" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SND,67", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "空调关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SND_69"] == "69" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SND,69", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "电视开关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK1" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk0" && obj.typ == "SW-TK0" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "7rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["RL1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "RL1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1路开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["RL1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "RL1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1路关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["RL2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "RL2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2路开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["RL2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "RL2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2路关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "clrl" && obj.typ == "CL-RL1" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        obj.hasOwnProperty("attributes") && obj.attributes.hasOwnProperty("titleid") && obj.attributes.titleid == 2 ? React.createElement(
	                            'div',
	                            { style: { height: "9rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "4rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "关"
	                                ),
	                                React.createElement('div', { className: 'BJ_DW_QC' })
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_BL_W100 ', style: { height: "4rem", marginTop: "1rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: 'redioAir_S' },
	                                    React.createElement(Logic, { attr: attributes, word: '温度范围 ：', type: obj.macid + "," + "STP", onSelect: p.getLogic })
	                                )
	                            )
	                        ) : React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK2" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "7.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK3" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "7.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK4" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "10.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW4_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "4开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW4_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "4关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "clrl" && obj.typ == "CL-RL3" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "7rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1路开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1路关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2路开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2路关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3路开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3路关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "clrl6" && obj.typ == "CL-RL6" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        obj.hasOwnProperty("attributes") && obj.attributes.hasOwnProperty("titleid") && obj.attributes.titleid == 2 ? React.createElement(
	                            'div',
	                            { style: { height: "12rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "8rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'ON' },
	                                        '空调开'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["TUN_OPEN"] == "OPEN" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "TUN,OPEN", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'OFF' },
	                                        '空调关'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["TUN_CLOSE"] == "CLOSE" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "TUN,CLOSE", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'ON' },
	                                        '制冷'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["SMD_COOL"] == "COOL" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "SMD,COOL", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'OFF' },
	                                        '制热'
	                                    ),
	                                    React.createElement('br', null)
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'ON' },
	                                        '大风'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["SSP_HIGH"] == "HIGH" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "SSP,HIGH", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'OFF' },
	                                        '中风'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["SSP_MID"] == "MID" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "SSP,MID", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement(
	                                        'label',
	                                        { htmlFor: 'ON' },
	                                        '小风'
	                                    ),
	                                    React.createElement('div', { className: selectflag && attributes["SSP_LOW"] == "LOW" ? "radioChecked_S" : "radio_S",
	                                        onClick: p.getOpen, 'data-type': "SSP,LOW", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                    React.createElement('div', { className: 'BJ_DW_QC' })
	                                )
	                            ),
	                            React.createElement(
	                                'div',
	                                { style: { height: "5rem", width: "100%" } },
	                                React.createElement(
	                                    'div',
	                                    { className: 'redioAir_S' },
	                                    React.createElement(Logic, { attr: attributes, word: '温度范围 ：', type: obj.macid + "," + "STP", onSelect: p.getLogic })
	                                )
	                            )
	                        ) : React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "10rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '1路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW1_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '1路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW1_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '2路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW2_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '2路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW2_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '3路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW3_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '3路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW3_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '4路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW4_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '4路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW4_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '5路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW5_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '5路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW5_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '6路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW6_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '6路关'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW6_OFF"] == "OFF" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW6,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id })
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK5" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "14rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1键开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "1键关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2键开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "2键关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW3_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "3关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW4_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "4开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW4_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "4关"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW5_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "5开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SW5_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "5关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swtk" && obj.typ == "SW-TK6" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "13.5rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW1_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "1键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW1_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "1键关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW2_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "2键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW2_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "2键关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW3_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "3键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW3_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "3键关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW4_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "4键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW4_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "4键关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW5_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "5键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW5_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "5键关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW6_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "6键开"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: attributes["SW6_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                        onClick: p.getOpen, 'data-type': "SW6,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    "6键关"
	                                )
	                            )
	                        )
	                    ) : "",
	                    obj.link == "ssdsc" && obj.typ == "SS-DSC" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH1_1"] == "1" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH1,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道1高"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH2_1"] == "1" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH2,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道2高"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH3_1"] == "1" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH3,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道3高"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH1_0"] == "0" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH1,0", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道1低"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH2_0"] == "0" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH2,0", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道2低"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH3_0"] == "0" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH3,0", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道3低"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "ssasc" && obj.typ == "SS-ASC" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH1_1"] == "1" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH1,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道1高"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH1_0"] == "0" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH1,0", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道1低"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH2_1"] == "1" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH2,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道2高"
	                            )
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "3rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["CH2_0"] == "0" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "CH2,0", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "通道2低"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "sswat" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["WAT_NO"] == "NO" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "WAT,NO", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "水位正常"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["WAT_YES"] == "YES" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "WAT,YES", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "已溢水"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "sspmw" && obj.typ == "SS-DOR" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["DOR_OPEN"] == "OPEN" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "DOR,OPEN", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "门打开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["DOR_CLOSE"] == "CLOSE" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "DOR,CLOSE", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "门关闭"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "sspmw" && obj.typ == "SS-PMW" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_YES"] == "YES" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,YES", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "有人"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_NO"] == "NO" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,NO", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "无人"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "sspmw" && obj.typ == "SS-PIR" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_YES"] == "YES" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,YES", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "有人"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: selectflag && attributes["PIR_NO"] == "NO" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "PIR,NO", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "无人"
	                            )
	                        ),
	                        React.createElement(RenLogic, { attr: attributes, word: '光照强度范围：', type: obj.macid + "," + "LIG", onSelect: p.getLogic })
	                    ) : "",
	                    obj.link == "sslux" && obj.typ == "SS-LUX" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC", style: { height: "5rem" } },
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                            "开"
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                            "关"
	                        )
	                    ) : "",
	                    obj.link == "clr1m" && obj.typ == "CL-R1M" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "bgm" && obj.typ == "MS-BGM" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S ', style: { height: "15.5rem" } },
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI_ON"] == "ON" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SWI_OFF"] == "OFF" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SWI,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "关"
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' }),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SPS_SPS"] == "PUS" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SPS,PUS", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "暂停"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SPS_PLY"] == "PLY" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SPS,PLY", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "播放"
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' }),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SMN_1"] == "1" ? " stateDevChecked_S  " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SMN,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "第一首"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SMN_2"] == "2" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SMN,2", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "第二首"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SMN_3"] == "3" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SMN,3", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "第三首"
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' }),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SVL_1"] == "1" ? " stateDevChecked_S  " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SVL,1", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "音量最低"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SVL_4"] == "4" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SVL,4", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "音量低"
	                            ),
	                            React.createElement('div', { className: 'BJ_DW_QC' }),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SVL_7"] == "7" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SVL,7", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "音量中"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SVL_11"] == "11" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SVL,11", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "音量高"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: attributes["SVL_15"] == "15" ? " stateDevChecked_S " : " stateDev_S ",
	                                    onClick: p.getOpen, 'data-type': "SVL,15", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                "音量最高"
	                            )
	                        )
	                    ) : "",
	                    obj.link == "ssith" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "4.5rem" } },
	                            React.createElement(Logic, { attr: attributes, word: '温度范围：', type: obj.macid + "," + "STP", onSelect: p.getLogic })
	                        )
	                    ) : "",
	                    obj.link == "clpu6" && obj.typ == "CL-PU6" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "7rem" } },
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '1路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW1_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '2路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW2_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': 'SW2,ON', 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '3路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW3_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': 'SW3,ON', 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '4路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW4_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': 'SW4,ON', 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement('br', null)
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'BJ_DW_FZ', style: { height: "3rem", width: "100%" } },
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'ON' },
	                                    '5路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW5_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id }),
	                                React.createElement(
	                                    'label',
	                                    { htmlFor: 'OFF' },
	                                    '6路开'
	                                ),
	                                React.createElement('div', { className: selectflag && attributes["SW6_ON"] == "ON" ? "radioChecked_S" : "radio_S",
	                                    onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id })
	                            )
	                        )
	                    ) : "",
	                    obj.link == "swrmt" && obj.typ == "SW-RMT" ? React.createElement(
	                        'div',
	                        { className: selectflag ? "BJ_DW_XS" : "BJ_DW_YC" },
	                        React.createElement(
	                            'div',
	                            { className: 'redioAir_S', style: { height: "16rem" } },
	                            React.createElement('div', { style: { height: "0.3rem" } }),
	                            React.createElement(
	                                'div',
	                                { style: { height: "1.5rem", lineHeight: "1.5rem", textAlign: "left", textIndent: "1.5em", fontSize: "1.2rem" } },
	                                "开"
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "3rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW2_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW2,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-yuan ' })
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW3_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW3,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-sanjiao ' })
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW4_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW4,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-fang ' })
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW5_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW5,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-cha ' })
	                                )
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "3rem" } },
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW1_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW1,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-lux ' })
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW6_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW6,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-A ', style: { fontSize: "1.8rem" } })
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: selectflag && attributes["SW7_ON"] == "ON" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                        onClick: p.getOpen, 'data-type': "SW7,ON", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                    React.createElement('i', { className: 'iconfont icon-B ', style: { fontSize: "1.8rem" } })
	                                )
	                            ),
	                            React.createElement('div', { style: { height: "0.6rem", borderBottom: "1px solid #efefef", width: "90%", marginLeft: "5%" } }),
	                            React.createElement(
	                                'div',
	                                { className: 'redioAir_S', style: { height: "11rem" } },
	                                React.createElement('div', { style: { height: "0.3rem" } }),
	                                React.createElement(
	                                    'div',
	                                    { style: { height: "1.5rem", lineHeight: "1.5rem", textAlign: "left", textIndent: "1.5em", fontSize: "1.2rem" } },
	                                    "关"
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: 'redioAir_S', style: { height: "3rem" } },
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW2_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW2,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-yuan ' })
	                                    ),
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW3_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW3,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-sanjiao ' })
	                                    ),
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW4_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW4,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-fang ' })
	                                    ),
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW5_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW5,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-cha ' })
	                                    )
	                                ),
	                                React.createElement(
	                                    'div',
	                                    { className: 'redioAir_S', style: { height: "3rem" } },
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW1_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW1,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-lux ' })
	                                    ),
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW6_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW6,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-A ', style: { fontSize: "1.8rem" } })
	                                    ),
	                                    React.createElement(
	                                        'div',
	                                        { className: selectflag && attributes["SW7_OFF"] == "OFF" ? " boxDevChecked_S " : " boxDev_S ", style: { width: "20%", marginLeft: "4%" },
	                                            onClick: p.getOpen, 'data-type': "SW7,OFF", 'data-id': obj.macid, 'data-alias': obj.alias, 'data-did': obj.id },
	                                        React.createElement('i', { className: 'iconfont icon-B ', style: { fontSize: "1.8rem" } })
	                                    )
	                                )
	                            )
	                        )
	                    ) : ""
	                );
	            });
	        }

	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: "触发设备", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'baocun', rightClick: this.doSave }),
	            React.createElement('div', { style: { marginTop: "4.5rem" } }),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "区域选择"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'more', onClick: p.doChoose },
	                    React.createElement('i', { className: "iconfont icon-xiaojiantou", style: { fontSize: "2rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'text', onClick: p.doChoose, style: { color: p.state.area ? "#6f6e73" : "#a7a4ad" } },
	                    this.state.area ? this.state.area : "请选择区域"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "触发逻辑"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'Slogic BJ_DQ_ZX', style: { marginRight: "1.5rem", lineHeight: "4.8rem" }, 'data-id': 'or', onClick: p.doLogic },
	                    React.createElement('i', { className: "JQS iconfont " + (logic == "or" ? "icon-xuanzhong " : " icon-weixuanzhong "), style: { fontSize: "2.5rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'Slogic BJ_DQ_YB', style: { color: "#9a98a0" } },
	                    "或"
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'Slogic BJ_DQ_ZX', style: { lineHeight: "4.8rem" }, 'data-id': 'and', onClick: p.doLogic },
	                    React.createElement('i', { className: "JQS iconfont " + (logic == "and" ? "icon-xuanzhong " : " icon-weixuanzhong "), style: { fontSize: "2.5rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'Slogic BJ_DQ_YB', style: { color: "#9a98a0" } },
	                    "与"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'item_AU' },
	                React.createElement(
	                    'div',
	                    { className: 'title_AU ', style: { color: "#8877ff" } },
	                    "设备选择"
	                )
	            ),
	            React.createElement('div', { className: 'line', style: { width: "100%", height: "1px" } }),
	            React.createElement(
	                'div',
	                { className: 'trigView', style: { width: "95%", marginLeft: "2.5%" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto" } },
	                        dataList,
	                        React.createElement('div', { style: { height: "1rem" } })
	                    )
	                )
	            ),
	            React.createElement(GroupWin, { ref: 'groupwin', title: "选择区域", onSelect: this.getAreaSelect }),
	            React.createElement(MsgWin, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/3/9.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            start: 19,
	            end: 32,
	            first: 0,
	            second: 0,
	            now: 0,
	            foot: 3,
	            edge: -1,
	            expression: { name: "", symbols: "", value: 0 }
	        };
	    },

	    selectFirst: function selectFirst() {
	        var expression = null;
	        if (this.state.edge == 0) {
	            this.setState({
	                edge: -1,
	                now: 0,
	                first: 0,
	                second: 0,
	                expression: { name: "", symbols: "", value: 0 }
	            });
	            expression = { name: "", symbols: "", value: 0 };
	        } else {
	            this.setState({
	                edge: 0

	            });
	            if (this.state.now == 0) {
	                this.setState({
	                    expression: {
	                        name: "小于" + this.state.start,
	                        symbols: "<=",
	                        value: this.state.start
	                    }
	                });
	                expression = {
	                    name: "小于" + this.state.start,
	                    symbols: "<=",
	                    value: this.state.start
	                };
	            } else {
	                this.setState({
	                    expression: {
	                        name: "小于" + this.state.now,
	                        symbols: "<=",
	                        value: this.state.now
	                    }
	                });
	                expression = {
	                    name: "小于" + this.state.now,
	                    symbols: "<=",
	                    value: this.state.now
	                };
	            }
	        }
	        this.props.onSelect(this.props.type, expression);
	    },
	    componentDidMount: function componentDidMount() {

	        var attr = this.props.attr ? this.props.attr : null;
	        var operator = attr.operator;
	        var value = 0;
	        switch (operator) {
	            case "=":
	                value = parseInt(attr["STP"]);if (value) {
	                    this.setState({
	                        first: value,
	                        second: value,
	                        now: value,
	                        expression: {
	                            name: "等于" + value + "℃",
	                            symbols: "=",
	                            value: value
	                        }
	                    });
	                }break;
	            case ">=":
	                value = parseInt(attr["STP"]);this.setState({
	                    now: value,
	                    edge: 1,
	                    expression: {
	                        name: "大于" + value + "℃",
	                        symbols: ">=",
	                        value: value
	                    }
	                });break;
	            case "<=":
	                value = parseInt(attr["STP"]);this.setState({

	                    now: value,
	                    edge: 0,
	                    expression: {
	                        name: "小于" + value + "℃",
	                        symbols: "<=",
	                        value: value
	                    }
	                });break;
	            case "<>":
	                var frist = parseInt(attr["STP"].split(",")[0]);
	                var second = parseInt(attr["STP"].split(",")[1]);
	                this.setState({
	                    first: frist,
	                    second: second,
	                    now: frist,
	                    expression: {
	                        name: "从" + frist + "℃" + "到" + second + "℃",
	                        symbols: "<>",
	                        value: "" + frist + "," + second
	                    }
	                });
	                break;

	            default:
	                break;
	        }
	    },
	    selectEnd: function selectEnd() {
	        var expression = null;
	        if (this.state.edge == 1) {
	            this.setState({
	                edge: -1,
	                now: 0,
	                first: 0,
	                second: 0,
	                expression: { name: "", symbols: "", value: 0 }
	            });
	            expression = { name: "", symbols: "", value: 0 };
	        } else {
	            this.setState({
	                edge: 1
	            });
	            if (this.state.now == 0) {
	                this.setState({
	                    expression: {
	                        name: "大于" + this.state.end,
	                        symbols: ">=",
	                        value: this.state.end
	                    }
	                });
	                expression = {
	                    name: "大于" + this.state.end,
	                    symbols: ">=",
	                    value: this.state.end
	                };
	            } else {
	                this.setState({
	                    expression: {
	                        name: "大于" + this.state.now,
	                        symbols: ">=",
	                        value: this.state.now
	                    }
	                });
	                expression = {
	                    name: "大于" + this.state.now,
	                    symbols: ">=",
	                    value: this.state.now
	                };
	            }
	        }
	        this.props.onSelect(this.props.type, expression);
	    },
	    select: function select(e) {
	        var data = e.currentTarget.getAttribute("data-value");
	        var expression = null;
	        if (this.state.first && this.state.first == data && this.state.second == data) {
	            this.setState({
	                first: 0,
	                second: 0,
	                now: 0,
	                edge: -1,
	                expression: { name: "", symbols: "", value: 0 }
	            });
	        }
	        if (this.state.edge == 0 || this.state.edge == 1) {
	            this.setState({
	                now: data
	            });
	            if (this.state.edge == 0) {
	                this.setState({
	                    expression: {
	                        name: "小于" + data,
	                        symbols: "<=",
	                        value: data
	                    }
	                });
	                expression = {
	                    name: "小于" + data,
	                    symbols: "<=",
	                    value: data
	                };
	            } else {
	                this.setState({
	                    expression: {
	                        name: "大于" + data,
	                        symbols: ">=",
	                        value: data
	                    }
	                });
	                expression = {
	                    name: "大于" + data,
	                    symbols: ">=",
	                    value: data
	                };
	            }
	        } else {
	            if (this.state.first == 0) {
	                this.setState({
	                    first: data,
	                    second: data,
	                    now: data
	                });
	                this.setState({
	                    expression: {
	                        name: "等于" + data,
	                        symbols: "=",
	                        value: data
	                    }
	                });
	                expression = {
	                    name: "等于" + data,
	                    symbols: "=",
	                    value: data
	                };
	            } else {
	                if (data > this.state.second || data == this.state.second) {
	                    this.setState({
	                        second: data,
	                        now: data
	                    });
	                    this.setState({
	                        expression: {
	                            name: "从" + this.state.first + "到" + data,
	                            symbols: "<>",
	                            value: "" + this.state.first + "," + data
	                        }
	                    });
	                    expression = {
	                        name: "从" + this.state.first + "到" + data,
	                        symbols: "<>",
	                        value: "" + this.state.first + "," + data
	                    };
	                } else {
	                    if (data > this.state.first) {
	                        this.setState({
	                            first: 0,
	                            second: 0,
	                            expression: {
	                                name: "",
	                                symbols: "",
	                                value: ""
	                            }
	                        });
	                        expression = {
	                            name: "",
	                            symbols: "",
	                            value: ""
	                        };
	                    } else {
	                        this.setState({
	                            first: data,
	                            second: this.state.first,
	                            now: data
	                        });
	                        this.setState({
	                            expression: {
	                                name: "从" + data + "到" + this.state.second,
	                                symbols: "<>",
	                                value: "" + data + "," + this.state.second
	                            }
	                        });
	                        expression = {
	                            name: "从" + data + "到" + this.state.second,
	                            symbols: "<>",
	                            value: "" + data + "," + this.state.second
	                        };
	                    }
	                }
	            }
	        }
	        this.props.onSelect(this.props.type, expression);
	    },
	    render: function render() {
	        var list = [];
	        var key = 0;
	        var num = Math.ceil((this.state.end - this.state.start) / this.state.foot) + 2;
	        var kuandu = (100 / num).toFixed(0) + "%";
	        if (this.state.edge == 0) {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogiczuo YS_BJ_TBS  LBS ", style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, onClick: this.selectFirst },
	                "<" + this.state.start
	            ));
	        } else {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogiczuo ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, onClick: this.selectFirst },
	                "<" + this.state.start
	            ));
	        }
	        if (this.state.edge == -1) {
	            if (this.state.first == 0) {
	                for (var i = this.state.start; i <= this.state.end; i = i + this.state.foot) {
	                    list.push(React.createElement(
	                        "div",
	                        { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                        i
	                    ));
	                }
	            } else {
	                if (this.state.first == this.state.second) {
	                    for (var i = this.state.start; i <= this.state.end; i = i + this.state.foot) {
	                        if (this.state.first == i) {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 YS_BJ_TBS LBS",
	                                    style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i,
	                                    onClick: this.select },
	                                i
	                            ));
	                        } else {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 ",
	                                    style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i,
	                                    onClick: this.select },
	                                i
	                            ));
	                        }
	                    }
	                } else {
	                    for (var i = this.state.start; i <= this.state.end; i = i + this.state.foot) {
	                        if (i >= this.state.first && i <= this.state.second) {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                                i
	                            ));
	                        } else {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                                i
	                            ));
	                        }
	                    }
	                }
	            }
	        } else {
	            if (this.state.edge == 0) {
	                for (var i = this.state.start; i <= this.state.end; i = i + this.state.foot) {
	                    if (i < this.state.now || this.state.now == i) {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                            i
	                        ));
	                    } else {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                            i
	                        ));
	                    }
	                }
	            }
	            if (this.state.edge == 1) {
	                for (var i = this.state.start; i <= this.state.end; i = i + this.state.foot) {
	                    if (this.state.now < i || this.state.now == i) {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                            i
	                        ));
	                    } else {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, "data-value": i, onClick: this.select },
	                            i
	                        ));
	                    }
	                }
	            }
	        }
	        if (this.state.edge == 1) {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogicyou YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, onClick: this.selectEnd },
	                ">" + this.state.end
	            ));
	        } else {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogicyou ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "2.5rem", height: "2.5rem" }, onClick: this.selectEnd },
	                ">" + this.state.end
	            ));
	        }
	        return React.createElement(
	            "div",
	            { style: { height: "5rem", width: "100%", marginTop: "5px" } },
	            list,
	            React.createElement(
	                "div",
	                { key: key++, className: "FS13 TBS BJ_DQ_ZX ", style: { height: "2rem", lineHeight: "2rem", width: "100%" } },
	                this.props.word ? this.props.word + this.state.expression.name : "" + this.state.expression.name
	            )
	        );
	    }
	});

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/4/9.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            start: { value: 1, name: "最暗" },
	            end: { value: 5, name: "最亮" },
	            first: 0,
	            second: 0,
	            list: ["很暗", "较暗", "正常", "明亮", "很亮"],
	            now: 0,
	            edge: -1,
	            foot: 1,
	            expression: { name: "", symbols: "", value: 0 }

	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;

	        var attr = this.props.attr ? this.props.attr : null;
	        var operator = attr.operator;
	        var value = 0;
	        switch (operator) {
	            case "=":
	                value = parseInt(attr["LIG"]);if (value) {
	                    this.setState({
	                        first: value,
	                        second: value,
	                        now: value,
	                        expression: {
	                            name: "等于" + this.state.list[value - 1],
	                            symbols: "=",
	                            value: value
	                        }
	                    });
	                }break;
	            case ">=":
	                value = parseInt(attr["LIG"]);this.setState({
	                    now: value,
	                    edge: 1,
	                    expression: {
	                        name: "大于" + this.state.list[value - 1],
	                        symbols: ">=",
	                        value: value
	                    }
	                });break;
	            case "<=":
	                value = parseInt(attr["LIG"]);this.setState({

	                    now: value,
	                    edge: 0,
	                    expression: {
	                        name: "小于" + this.state.list[value - 1],
	                        symbols: "<=",
	                        value: value
	                    }
	                });break;
	            case "<>":
	                var frist = parseInt(attr["LIG"].split(",")[0]);
	                var second = parseInt(attr["LIG"].split(",")[1]);
	                this.setState({
	                    first: frist,
	                    second: second,
	                    now: frist,
	                    expression: {
	                        name: "从" + this.state.list[frist - 1] + "到" + this.state.list[second - 1],
	                        symbols: "<>",
	                        value: "" + frist + "," + second
	                    }
	                });
	                break;

	            default:
	                break;
	        }
	    },

	    selectFirst: function selectFirst() {
	        var expression = null;
	        if (this.state.edge == 0) {
	            this.setState({
	                edge: -1,
	                now: 0,
	                first: 0,
	                second: 0,
	                expression: { name: "", symbols: "", value: 0 }
	            });
	            expression = { name: "", symbols: "", value: 0 };
	        } else {
	            this.setState({
	                edge: 0
	            });
	            if (this.state.now == 0) {
	                this.setState({
	                    expression: {
	                        name: "小于" + this.state.start.name,
	                        symbols: "<=",
	                        value: this.state.start.value
	                    }
	                });
	                expression = {
	                    name: "小于" + this.state.start.name,
	                    symbols: "<=",
	                    value: this.state.start.value
	                };
	            } else {
	                this.setState({
	                    expression: {
	                        name: "小于" + this.state.list[this.state.now - 1],
	                        symbols: "<=",
	                        value: this.state.now
	                    }
	                });
	                expression = {
	                    name: "小于" + this.state.list[this.state.now - 1],
	                    symbols: "<=",
	                    value: this.state.now
	                };
	            }
	        }
	        this.props.onSelect(this.props.type, expression);
	    },
	    selectEnd: function selectEnd() {
	        var expression = null;
	        if (this.state.edge == 1) {
	            this.setState({
	                edge: -1
	            });
	            this.setState({
	                edge: -1,
	                now: 0,
	                first: 0,
	                second: 0,
	                expression: { name: "", symbols: "", value: 0 }
	            });
	            expression = { name: "", symbols: "", value: 0 };
	        } else {
	            this.setState({
	                edge: 1
	            });
	            if (this.state.now == 0) {
	                this.setState({
	                    expression: {
	                        name: "大于" + this.state.start.name,
	                        symbols: ">=",
	                        value: this.state.start.value
	                    }
	                });
	                expression = {
	                    name: "大于" + this.state.start.name,
	                    symbols: ">=",
	                    value: this.state.start.value
	                };
	            } else {
	                this.setState({
	                    expression: {
	                        name: "大于" + this.state.list[this.state.now - 1],
	                        symbols: ">=",
	                        value: this.state.now
	                    }
	                });
	                expression = {
	                    name: "大于" + this.state.list[this.state.now - 1],
	                    symbols: ">=",
	                    value: this.state.now
	                };
	            }
	        }
	        this.props.onSelect(this.props.type, expression);
	    },
	    select: function select(e) {
	        var data = e.currentTarget.getAttribute("data-value");
	        var expression = null;
	        console.log(data + this.state.first + this.state.second);
	        if (data == this.state.first && this.state.first == this.state.second) {
	            this.setState({
	                first: 0,
	                second: 0,
	                now: 0,
	                expression: { name: "", symbols: "", value: 0 },
	                edge: -1
	            });
	        } else {
	            if (this.state.edge == 0 || this.state.edge == 1) {
	                this.setState({
	                    now: data
	                });
	                if (this.state.edge == 0) {
	                    this.setState({
	                        expression: {
	                            name: "小于" + this.state.list[data - 1],
	                            symbols: "<=",
	                            value: data
	                        }
	                    });
	                    expression = {
	                        name: "小于" + this.state.list[data - 1],
	                        symbols: "<=",
	                        value: data
	                    };
	                } else {
	                    this.setState({
	                        expression: {
	                            name: "大于" + this.state.list[data - 1],
	                            symbols: ">=",
	                            value: data
	                        }
	                    });
	                    expression = {
	                        name: "大于" + this.state.list[data - 1],
	                        symbols: ">=",
	                        value: data
	                    };
	                }
	            } else {
	                if (this.state.first == 0) {
	                    this.setState({
	                        first: data,
	                        second: data,
	                        now: data
	                    });
	                    this.setState({
	                        expression: {
	                            name: "等于" + this.state.list[data - 1],
	                            symbols: "=",
	                            value: data
	                        }
	                    });
	                    expression = {
	                        name: "等于" + this.state.list[data - 1],
	                        symbols: "=",
	                        value: data
	                    };
	                } else {
	                    if (data > this.state.second || data == this.state.second) {
	                        this.setState({
	                            second: data,
	                            now: data
	                        });
	                        this.setState({
	                            expression: {
	                                name: "从" + this.state.list[this.state.first - 1] + "到" + this.state.list[data - 1],
	                                symbols: "<>",
	                                value: "" + this.state.first + "," + data
	                            }
	                        });
	                        expression = {
	                            name: "从" + this.state.list[this.state.first - 1] + "到" + this.state.list[data - 1],
	                            symbols: "<>",
	                            value: "" + this.state.first + "," + data
	                        };
	                    } else {
	                        if (data > this.state.first) {
	                            this.setState({
	                                first: 0,
	                                second: 0,
	                                expression: {
	                                    name: "",
	                                    symbols: "",
	                                    value: ""
	                                }
	                            });
	                            expression = {
	                                name: "",
	                                symbols: "",
	                                value: ""
	                            };
	                        } else {
	                            this.setState({
	                                first: data,
	                                second: this.state.first,
	                                now: data
	                            });
	                            this.setState({
	                                expression: {
	                                    name: "从" + this.state.list[data - 1] + "到" + this.state.list[this.state.second - 1],
	                                    symbols: "<>",
	                                    value: "" + data + "," + this.state.second
	                                }
	                            });
	                            expression = {
	                                name: "从" + this.state.list[data - 1] + "到" + this.state.list[this.state.second - 1],
	                                symbols: "<>",
	                                value: "" + data + "," + this.state.second
	                            };
	                        }
	                    }
	                }
	            }
	        }

	        this.props.onSelect(this.props.type, expression);
	    },
	    render: function render() {
	        var list = [];
	        var key = 0;
	        var num = Math.ceil((this.state.end.value - this.state.start.value) / this.state.foot) + 2 + 1;
	        var kuandu = (100 / num).toFixed(0) + "%";
	        if (this.state.edge == 0) {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogiczuo YS_BJ_TBS LBS  ", style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, onClick: this.selectFirst },
	                this.state.start.name
	            ));
	        } else {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10  kuanglogiczuo ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem" }, onClick: this.selectFirst },
	                this.state.start.name
	            ));
	        }

	        if (this.state.edge == -1) {
	            if (this.state.first == 0) {
	                for (var i = this.state.start.value; i <= this.state.end.value; i = i + this.state.foot) {

	                    list.push(React.createElement(
	                        "div",
	                        { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                        this.state.list[i - 1]
	                    ));
	                }
	            } else {
	                if (this.state.first == this.state.second) {
	                    for (var i = this.state.start.value; i <= this.state.end.value; i = i + this.state.foot) {
	                        if (this.state.first == i) {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic YS_BJ_TBS LBS",
	                                    style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i,
	                                    onClick: this.select },
	                                this.state.list[i - 1]
	                            ));
	                        } else {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic ",
	                                    style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i,
	                                    onClick: this.select },
	                                this.state.list[i - 1]
	                            ));
	                        }
	                    }
	                } else {
	                    for (var i = this.state.start.value; i <= this.state.end.value; i = i + this.state.foot) {
	                        if (i >= this.state.first && i <= this.state.second) {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                                this.state.list[i - 1]
	                            ));
	                        } else {
	                            list.push(React.createElement(
	                                "div",
	                                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                                this.state.list[i - 1]
	                            ));
	                        }
	                    }
	                }
	            }
	        } else {
	            if (this.state.edge == 0) {
	                for (var i = this.state.start.value; i <= this.state.end.value; i = i + this.state.foot) {
	                    if (i < this.state.now || this.state.now == i) {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                            this.state.list[i - 1]
	                        ));
	                    } else {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                            this.state.list[i - 1]
	                        ));
	                    }
	                }
	            }
	            if (this.state.edge == 1) {
	                for (var i = this.state.start.value; i <= this.state.end.value; i = i + this.state.foot) {
	                    if (this.state.now < i || this.state.now == i) {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic YS_BJ_TBS LBS", style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                            this.state.list[i - 1]
	                        ));
	                    } else {
	                        list.push(React.createElement(
	                            "div",
	                            { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogic ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, "data-value": i, onClick: this.select },
	                            this.state.list[i - 1]
	                        ));
	                    }
	                }
	            }
	        }

	        if (this.state.edge == 1) {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogicyou YS_BJ_TBS LBS  ", style: { width: kuandu, lineHeight: "3rem", height: "3rem" }, onClick: this.selectEnd },
	                this.state.end.name
	            ));
	        } else {
	            list.push(React.createElement(
	                "div",
	                { key: key++, className: " BJ_DW_FZ BJ_DQ_ZX FS10 kuanglogicyou ", style: { backgroundColor: "#edebef", width: kuandu, lineHeight: "3rem", height: "3rem" }, onClick: this.selectEnd },
	                this.state.end.name
	            ));
	        }

	        return React.createElement(
	            "div",
	            { style: { height: "5rem", width: "100%", marginTop: "1rem" } },
	            list,
	            React.createElement(
	                "div",
	                { className: "FS13 TBS BJ_DQ_ZX", style: { height: "2rem", lineHeight: "2rem", width: "100%" } },
	                this.props.word ? this.props.word + this.state.expression.name : "" + this.state.expression.name
	            )
	        );
	    }

	});

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/28.
	 */'';var React=__webpack_require__(24);var Ajax=__webpack_require__(244);var Nav=__webpack_require__(266);var DevItem=__webpack_require__(258);var GroupWin=__webpack_require__(284);var IconButton=__webpack_require__(248);var global=__webpack_require__(262);var MsgWin=__webpack_require__(250);module.exports = React.createClass({displayName:'exports',getInitialState:function getInitialState(){return {id:this.props.params.id?this.props.params.id:1, //1为新增,大于0为修改id
	ddcid:this.props.params.did, // 这个是选择的ddcid
	selectedDdc:null,selectGroups:[{id:0,name:"所有区域"}], //选中的区域
	devicelist:[],selectDev:[],outerDev:[],commonData:{},area:"",user:null};},myScroll:"",componentDidMount:function componentDidMount(){var p=this;var calendartime3=new lCalendar();calendartime3.init({'trigger':'#time3','type':'time'});if(global.SexecList.length > 0){p.setState({outerDev:global.SexecList});}if(global.Sdelay){p.refs.time3.value = global.Sdelay;}p.getExeData(p.state.ddcid,p.state.selectGroups);},componentDidUpdate:function componentDidUpdate(){var p=this;if(!p.myScroll){p.myScroll = new IScroll('#wrapper',{scrollX:false,scrollY:true,click:true});document.addEventListener('touchmove',function(){},false);}else {p.myScroll.refresh();}},goBack:function goBack(){var id=this.state.id;location.href = "/#/setting/" + id + "?s=1";},getExeData:function getExeData(ddcid,groups){var p=this;var groupsAttr=[];var groupAllFlag=false;var noSelectFlag=0;for(var i=0;i < groups.length;i++) {if(groups[i].id == 0){groupAllFlag = true;}else if(groups[i].id == -1){noSelectFlag = 1;}else {groupsAttr.push(groups[i].id);}}var user=JSON.parse(localStorage.getItem("ibms-login"));this.setState({user:user});console.log("groupAllFlag : " + groupAllFlag);console.log("groupsAttr : " + groupsAttr);if(user){Ajax("POST","getActDeviveByDdcIdGroups",{ddcid:ddcid,groups:groupAllFlag?"all":groupsAttr.join(","),userid:user.parentid,noSelectFlag:noSelectFlag},function(dt){if(dt && dt.success){var arry=[];for(var i in dt.data) {var obj={};obj = dt.data[i];try{var attr=JSON.parse(dt.data[i].attributes);if(obj){obj.attributes = attr;arry.push(obj);}}catch(e) {console.log(dt.data[i].attributes);}}p.setState({devicelist:arry});if(!p.myScroll){p.myScroll = new IScroll('#wrapper',{scrollX:false,scrollY:true,click:true});document.addEventListener('touchmove',function(){},false);}else {p.myScroll.refresh();}p.getCheckIrbyt(arry);}});}},getCheckIrbyt:function getCheckIrbyt(arry){var p=this;var commondata=this.state.commonData;for(var i=0;i < arry.length;i++) {var obj=arry[i];if(obj.link == "irbyt"){p.getIrcodeList(obj.id,obj.ddcid,function(state,dt){if(state == 1 && dt.length > 0){var key=dt[0].deviceid;if(commondata.hasOwnProperty(key)){}else {commondata[key] = dt;}p.setState({commonData:commondata});}});}}}, // 获取红外转发列表
	getIrcodeList:function getIrcodeList(deviceid,ddcid,cb){var p=this;var user=this.state.user;if(user){Ajax("POST","getIrcodeByUserid",{deviceid:deviceid,ddcid:ddcid,userid:user.parentid},function(dt){if(dt.success){cb(1,dt.data);}else {cb(0,[]);}});}else {cb(0,[]);}}, //doSave:function(){
	//
	//    var time = this.refs.time3.value;
	//    global.Sdelay=time;
	//    var delayList = time.split(":");
	//    global.SdelayStr=parseInt(delayList[0]*3600)+parseInt(delayList[1]*60)+parseInt(delayList[2]);
	//    location.href="/#/setting/3/1";
	//},
	doSave:function doSave(){var p=this;var name=[];var outerDev=this.state.outerDev;var flag=true;var tempList=[];var flag1=false;if(outerDev.length != 0){for(var i=0;i < outerDev.length;i++) {var tempObj=outerDev[i];tempList.push(tempObj);name.push({id:i,devname:outerDev[i].devname});var attr=outerDev[i]['true'];var tempAttr={}; // 为了判断除了 GRP 之外的属性
	for(var o in attr) {if(o != "GRP"){tempAttr[o] = attr[o];flag1 = true;}}console.log("tempAttr:" + JSON.stringify(tempAttr));if(flag1){if(tempAttr.hasOwnProperty("SWI") || tempAttr.hasOwnProperty("TUN") && tempAttr.hasOwnProperty("SMD") && tempAttr.hasOwnProperty("SSP") || tempAttr.hasOwnProperty("TUN") && tempAttr["TUN"] == "CLOSE" || tempAttr.hasOwnProperty("SND") || tempAttr.hasOwnProperty("WIN") || tempAttr.hasOwnProperty("LCK") || tempAttr.hasOwnProperty("SW1") || tempAttr.hasOwnProperty("SW2") || tempAttr.hasOwnProperty("SW3") || tempAttr.hasOwnProperty("SW4") || tempAttr.hasOwnProperty("SW5") || tempAttr.hasOwnProperty("SW6") || tempAttr.hasOwnProperty("CH1") || tempAttr.hasOwnProperty("CH2") || tempAttr.hasOwnProperty("CH3") || tempAttr.hasOwnProperty("TUN") && tempAttr["TUN"] == "OPEN" || tempAttr.hasOwnProperty("RL1") || tempAttr.hasOwnProperty("RL2") || tempAttr.hasOwnProperty("SPS") || tempAttr.hasOwnProperty("SVL") || tempAttr.hasOwnProperty("SMN")){}else {flag = false;p.refs.msg.setState({show:true,type:"text",word:"请选择条件",timeout:1000});return;}}else {flag = false;p.refs.msg.setState({show:true,type:"text",word:"请选择条件",timeout:1000});return;}}if(flag){global.SexecName = name;global.SexecList = tempList;var time=this.refs.time3.value;global.Sdelay = time;var delayList=time.split(":");global.SdelayStr = parseInt(delayList[0] * 3600) + parseInt(delayList[1] * 60) + parseInt(delayList[2]);location.href = "/#/setting/" + p.state.id + "?s=1";}}else {p.refs.msg.setState({show:true,type:"text",word:"请选择执行设备",timeout:1500});}},doLogic:function doLogic(e){var p=this;var id=e.currentTarget.getAttribute("data-id");console.log("id : " + id);p.setState({logic:id});},getOpen:function getOpen(e){var p=this;var macid=e.currentTarget.getAttribute("data-id");var type=e.currentTarget.getAttribute("data-type");var did=e.currentTarget.getAttribute("data-did");var alias=e.currentTarget.getAttribute("data-alias");var grp=e.currentTarget.getAttribute("data-grp");console.log("macid: " + macid + "type: " + type + "did: " + did + "alias: " + alias + "grp: " + grp);var attr=p.state.outerDev; //console.log("attr:"+JSON.stringify(attr));
	if(type == "SWI,OFF" || type == "SWI,TOG" || type == "TUN,CLOSE"){for(var j in attr) {var ds=type.split(",");var obj={};if(alias && alias == attr[j]["NAM"]){obj[ds[0]] = ds[1];attr[j]["true"] = "undefind";attr[j]["true"] = obj;attr[j]["false"] = {};break;}else {if(attr[j]["MAC"] == macid){obj[ds[0]] = ds[1];attr[j]["true"] = "undefind";attr[j]["true"] = obj;attr[j]["false"] = {};break;}} //组处理
	var macgroup=attr[j].MAC;if(macgroup.indexOf("_") == 0){if(attr[j].MAC == "_" + did){if(attr[j].MAC == "_" + did){obj[ds[0]] = ds[1];obj["GRP"] = attr[j]["true"]["GRP"];obj["TYP"] = attr[j]["true"]["TYP"];console.log(JSON.stringify(attr[j]["true"]["GRP"]));attr[j]["true"] = "undefind";attr[j]["true"] = obj;attr[j]["false"] = {};break;}}}else {console.log("error");}if(grp && attr[j].MAC == grp){obj[ds[0]] = ds[1];obj["GRP"] = attr[j]["true"]["GRP"];obj["TYP"] = attr[j]["true"]["TYP"];console.log(JSON.stringify(attr[j]["true"]["GRP"]));attr[j]["true"] = "undefind";attr[j]["true"] = obj;attr[j]["false"] = {};break;}}}else {var ss=type.split(",");for(var i=0;i < attr.length;i++) {if(alias && alias == attr[i]["NAM"]){attr[i]["true"][ss[0]] = ss[1];attr[i]["false"][ss[0]] = ss[2];if(attr[i].link == "ltctm"){if(!attr[i]["true"].hasOwnProperty("LEV") && !attr[i]["true"].hasOwnProperty("LEV")){attr[i]["false"] = {SWI:"OFF"};}}break;}else {if(attr[i].MAC == macid){attr[i]["true"][ss[0]] = ss[1];attr[i]["false"][ss[0]] = ss[2];if(attr[i].link == "ltctm"){if(!attr[i]["true"].hasOwnProperty("LEV") && !attr[i]["true"].hasOwnProperty("LEV")){attr[i]["false"] = {SWI:"OFF"};}}break;}} //组处理
	var mac=attr[i].MAC;if(mac.indexOf("_") == 0){if(attr[i].MAC == "_" + did){attr[i]["true"]["GRP"] = attr[i]["true"]["GRP"];attr[i]["true"]["TYP"] = attr[i]["true"]["TYP"];attr[i]["true"][ss[0]] = ss[1];attr[i]["false"][ss[0]] = ss[2];if(attr[i].link == "ltctm"){if(!attr[i]["true"].hasOwnProperty("LEV") && !attr[i]["true"].hasOwnProperty("LEV")){attr[i]["true"]["GRP"] = attr[i]["true"]["GRP"];attr[i]["false"] = {SWI:"OFF",GRP:attr[i]["true"]["GRP"]};}}break;}}if(grp && attr[i].MAC == grp){attr[i]["true"]["GRP"] = attr[i]["true"]["GRP"];attr[i]["true"]["TYP"] = attr[i]["true"]["TYP"];attr[i]["true"][ss[0]] = ss[1];attr[i]["false"][ss[0]] = ss[2];if(attr[i].link == "ltctm"){if(!attr[i]["true"].hasOwnProperty("LEV") && !attr[i]["true"].hasOwnProperty("LEV")){attr[i]["true"]["GRP"] = attr[i]["true"]["GRP"];attr[i]["false"] = {SWI:"OFF",GRP:attr[i]["true"]["GRP"]};}}break;}}}console.log("attr1 : " + JSON.stringify(attr));this.setState({outerDev:attr});},getValue:function getValue(e){var p=this;var type=e.currentTarget.getAttribute("data-type");var mac=e.currentTarget.getAttribute("data-id");var value=e.currentTarget.getAttribute("data-value");var alias=e.currentTarget.getAttribute("data-alias");var grp=e.currentTarget.getAttribute("data-grp");var attr=p.state.outerDev;for(var i=0;i < attr.length;i++) {if(alias && attr[i]["NAM"] == alias){if(attr[i]["true"].hasOwnProperty("SWI") && attr[i]["true"]["SWI"] == "ON"){attr[i]["true"][type] = value;}if(attr[i]["true"].hasOwnProperty("TUN") && attr[i]["true"]["TUN"] == "OPEN"){attr[i]["true"][type] = value;}break;}else {if(attr[i].MAC == mac){if(attr[i]["true"].hasOwnProperty("SWI") && attr[i]["true"]["SWI"] == "ON"){attr[i]["true"][type] = value;}if(attr[i]["true"].hasOwnProperty("TUN") && attr[i]["true"]["TUN"] == "OPEN"){attr[i]["true"][type] = value;}break;}else {if(grp && attr[i].MAC == grp){if(attr[i]["true"].hasOwnProperty("SWI") && attr[i]["true"]["SWI"] == "ON"){attr[i]["true"][type] = value;}if(attr[i]["true"].hasOwnProperty("TUN") && attr[i]["true"]["TUN"] == "OPEN"){attr[i]["true"][type] = value;}break;}}}} //   console.log("attr : " + JSON.stringify(attr));
	this.setState({outerDev:attr});},checkHandler:function checkHandler(e){e.preventDefault();e.stopPropagation();var p=this;var data=e.currentTarget.getAttribute("data-type");var devObj=null;try{devObj = JSON.parse(data);}catch(e) {console.log("e:" + e);}if(devObj){var devattr=devObj.attributes;var attr=p.state.outerDev;var flag=true;var attrNew=[];for(var i=0;i < attr.length;i++) {if(devObj.macid == "0000000000000000"){if(attr[i].MAC == devattr.GRP + "_" + devattr.TYP){flag = false;}else {attrNew.push(attr[i]);}}else {if(attr[i].MAC == devObj.macid){flag = false;}else {if(attr[i].hasOwnProperty("NAM")){if(attr[i].NAM == devObj.alias){flag = false;}else {attrNew.push(attr[i]);}}else {attrNew.push(attr[i]);}}}}if(flag){if(devObj.macid == "0000000000000000"){var obj={id:devObj.id,MAC:devattr["GRP"] + "_" + devattr["TYP"],devname:devObj.name,'true':{},'false':{},link:devObj.link};if(devattr.hasOwnProperty("GRP") && devattr.GRP != "00"){obj['true']["GRP"] = devattr.GRP;obj['true']["TYP"] = devattr.TYP;obj['false']["GRP"] = devattr.GRP;}attrNew.push(obj);}else {if(devObj.alias && devObj.alias != devObj.macid){var obj={id:devObj.id,MAC:devObj.macid,NAM:devObj.alias,devname:devObj.alias,'true':{},'false':{},link:devObj.link};attrNew.push(obj);}else {var obj={id:devObj.id,MAC:devObj.macid,devname:devObj.name,'true':{},'false':{},link:devObj.link};attrNew.push(obj);}}}p.setState({outerDev:attrNew});}},getGroupByUser:function getGroupByUser(){var p=this;var user=this.state.user;Ajax("POST","getGrpupListByUserId",{userid:user.userid},function(dt){if(dt && dt.success){var GroupList=[];var icondata=dt.data;for(var i in icondata) {GroupList.push({id:icondata[i].id,icon:icondata[i].dicon,name:icondata[i].name});}p.setState({GroupList:GroupList});p.refs.groupwin.doShow(GroupList);}});},doChoose:function doChoose(){var p=this;p.getGroupByUser();},getAreaSelect:function getAreaSelect(attr){console.log("attr : " + JSON.stringify(attr));var p=this;if(attr){this.setState({selectGroups:attr});var groupStr=[];if(attr.length > 0){for(var i=0;i < attr.length;i++) {groupStr.push(attr[i].name);}}p.setState({area:groupStr.join(",")});p.getExeData(p.state.ddcid,attr);}},onFocus:function onFocus(){var input3=document.getElementById("time3");if(input3){input3.blur();}},render:function render(){var p=this;var dataList="";var list=this.state.devicelist;if(list.length > 0){dataList = list.map(function(obj,num){var key=num % 6;var bgc="";switch(key){case 0:bgc = "TB1";break;case 1:bgc = "TB2";break;case 2:bgc = "TB3";break;case 3:bgc = "TB4";break;case 4:bgc = "TB5";break;case 5:bgc = "TB6";break;default:bgc = "TB1";break;}var selectflag=false;var attr=p.state.outerDev;var attributes={};var commondata="";var flagNum=0;var common=p.state.commonData;if(attr.length > 0){for(var i in attr) {if(attr[i].MAC == obj.macid || attr[i].MAC == "_" + obj.id){selectflag = true;attributes = attr[i]["true"];var keyV=obj.id;if(obj.link == "irbyt" && obj.typ == "IR-BYT"){var com=0;if(common.hasOwnProperty(keyV) && common[keyV].length > 0){var num=common[keyV].length;if(num % 3 == 0){flagNum = parseInt(num / 3);}else {flagNum = parseInt(num / 3) + 1;}commondata = common[keyV].map(function(o){return React.createElement('div',{key:"com_" + com++,className:selectflag && attributes["SND"] == o.code?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SND," + o.code + ",67",'data-id':obj.macid,'data-alias':o.alias,'data-did':o.id,'data-grp':o.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},o.name);});}}break;}if(obj.hasOwnProperty("attributes") && attr[i].MAC == obj["attributes"]["GRP"] + "_" + obj["attributes"]["TYP"] && obj.macid == "0000000000000000"){selectflag = true;attributes = attr[i]["true"];break;}if(obj.hasOwnProperty("alias") && attr[i]["NAM"] == obj.alias && obj.alias){selectflag = true;attributes = attr[i]["true"];break;}if(attr[i].hasOwnProperty("id") && attr[i].id == obj.id){selectflag = true;attributes = attr[i]["true"];break;}}}var attrObj=obj.hasOwnProperty("attributes")?obj.attributes:{};return React.createElement('div',{className:'item_S  B2g',style:{width:"100%",marginTop:"2px"},key:"senseD" + num + "obj" + obj.id},React.createElement('div',{style:{height:"4rem",width:"100%"}},React.createElement('div',{className:" itemS BJ_DW_FZ  " + bgc},React.createElement('i',{className:"itemIcon_S iconfont  " + (obj.dicon?"icon-" + obj.dicon:" icon-zhanghao"),style:{fontSize:"3rem",marginLeft:"0.5rem"}})),React.createElement('div',{className:'BJ_DW_FZ',style:{width:"70%",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},React.createElement('div',{className:'itemTitle_S',style:{height:"1.8rem",lineHeight:"2rem",width:"100%",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},obj.name),React.createElement('div',{className:'BJ_DW_FZ',style:{color:"#b7b7b7"}},React.createElement('div',{className:"BJ_DW_FZ  FS12 ",style:{marginLeft:"0.5rem",marginTop:"0.1rem",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",width:"15rem",height:"1.8rem",lineHeight:"1.8rem"}},obj.alias?obj.alias:""))),React.createElement('div',{className:'BJ_DW_FZ','data-type':JSON.stringify(obj),style:{width:"10%",height:"5rem",lineHeight:"5rem"},onClick:p.checkHandler},React.createElement('i',{className:"itemIcon_S iconfont " + (selectflag?"icon-xuanzhong JQS":" icon-weixuanzhong JQS"),style:{fontSize:"3rem"}}))),obj.link == "ltctm" && obj.typ == "LT-CTM"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC",style:{height:selectflag?"15.5rem":""}},React.createElement('div',{className:'redioAir_S',style:{height:"3rem"}},React.createElement('div',{className:selectflag && attributes["SWI"] == "ON"?" stateDevChecked_S BJ_DW_FZ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["SWI"] == "OFF"?" stateDevChecked_S BJ_DW_FZ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"),React.createElement('div',{className:selectflag && attributes["SWI"] == "TOG"?" stateDevChecked_S BJ_DW_FZ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,TOG",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"取反")),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:'redioAir_S',style:{marginTop:"0.3rem"}},React.createElement('div',{style:{width:"12%",textAlign:"center"},className:' BJ_DW_FZ FS14 BK'},"调光:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'1','data-alias':obj.alias,onClick:p.getValue},"1"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'5','data-alias':obj.alias,onClick:p.getValue},"5"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'15','data-alias':obj.alias,onClick:p.getValue},"15"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'25','data-alias':obj.alias,onClick:p.getValue},"25"),React.createElement('br',null),React.createElement('div',{style:{marginLeft:"14%"},className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'35','data-alias':obj.alias,onClick:p.getValue},"35"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'50','data-alias':obj.alias,onClick:p.getValue},"50"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'75','data-alias':obj.alias,onClick:p.getValue},"75"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'100','data-alias':obj.alias,onClick:p.getValue},"100")),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:'redioAir_S',style:{marginTop:"0.3rem"}},React.createElement('div',{style:{width:"12%",textAlign:"center"},className:' BJ_DW_FZ FS14 BK'},"调色:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 0?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'0','data-alias':obj.alias,onClick:p.getValue},"0"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 5?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'5','data-alias':obj.alias,onClick:p.getValue},"5"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 15?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'15','data-alias':obj.alias,onClick:p.getValue},"15"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 25?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'25','data-alias':obj.alias,onClick:p.getValue},"25"),React.createElement('br',null),React.createElement('div',{style:{marginLeft:"14%"},className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 35?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'35','data-alias':obj.alias,onClick:p.getValue},"35"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 50?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'50','data-alias':obj.alias,onClick:p.getValue},"50"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 75?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'75','data-alias':obj.alias,onClick:p.getValue},"75"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("CTM") && attributes["CTM"] == 100?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'CTM','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'100','data-alias':obj.alias,onClick:p.getValue},"100"))):"",obj.link == "ltt8s" && obj.typ == "LT-T8S"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC",style:{height:selectflag?"10rem":""}},React.createElement('div',{className:'redioAir_S',style:{height:"3rem"}},React.createElement('div',{className:selectflag && attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON",'data-id':obj.id},"开"),React.createElement('div',{className:selectflag && attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF",'data-id':obj.id},"关"),React.createElement('div',{className:selectflag && attributes["SWI"] == "TOG"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,TOG",'data-id':obj.id},"取反")),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{style:{height:"3rem",marginTop:"5px"}},React.createElement('div',{className:'redioAir_S',style:{marginTop:"0.3rem"}},React.createElement('div',{style:{width:"12%",textAlign:"center"},className:' BJ_DW_FZ FS14 BK'},"调光:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'1','data-alias':obj.alias,onClick:p.getValue},"1"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'5','data-alias':obj.alias,onClick:p.getValue},"5"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'15','data-alias':obj.alias,onClick:p.getValue},"15"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'25','data-alias':obj.alias,onClick:p.getValue},"25"),React.createElement('br',null),React.createElement('div',{style:{marginLeft:"14%"},className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'35','data-alias':obj.alias,onClick:p.getValue},"35"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'50','data-alias':obj.alias,onClick:p.getValue},"50"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'75','data-alias':obj.alias,onClick:p.getValue},"75"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'100','data-alias':obj.alias,onClick:p.getValue},"100")))):"",obj.link == "ltlev" || obj.typ == "LT-LEV"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC",style:{height:selectflag?"10rem":""}},React.createElement('div',{className:'redioAir_S',style:{height:"3rem"}},React.createElement('div',{className:selectflag && attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON",'data-id':obj.id},"开"),React.createElement('div',{className:selectflag && attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF",'data-id':obj.id},"关"),React.createElement('div',{className:selectflag && attributes["SWI"] == "TOG"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,TOG",'data-id':obj.id},"取反")),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{style:{height:"3rem",marginTop:"5px"}},React.createElement('div',{className:'redioAir_S',style:{marginTop:"0.3rem"}},React.createElement('div',{style:{width:"12%",textAlign:"center"},className:' BJ_DW_FZ FS14 BK'},"调光:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 1?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'1','data-alias':obj.alias,onClick:p.getValue},"1"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 5?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'5','data-alias':obj.alias,onClick:p.getValue},"5"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 15?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'15','data-alias':obj.alias,onClick:p.getValue},"15"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 25?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'25','data-alias':obj.alias,onClick:p.getValue},"25"),React.createElement('br',null),React.createElement('div',{style:{marginLeft:"14%"},className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 35?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'35','data-alias':obj.alias,onClick:p.getValue},"35"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 50?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'50','data-alias':obj.alias,onClick:p.getValue},"50"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 75?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'75','data-alias':obj.alias,onClick:p.getValue},"75"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("LEV") && attributes["LEV"] == 100?" LtctmChecked_S ":" LtctmboxDev_S "),'data-type':'LEV','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:"",'data-value':'100','data-alias':obj.alias,onClick:p.getValue},"100")))):"",obj.link == "sslux" && obj.typ == "SS-LUX"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC",style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关")):"",obj.typ == "DL-LCK" || obj.typ == "DL-HTL" || obj.typ == "DL-HTK" || obj.typ == "HM-LCK"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["LCK"] == "OPEN"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"LCK,OPEN,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开门"))):"",obj.typ == "WD-RXJ" || obj.typ == "WD-DYK"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["WIN"] == "OPEN"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"WIN,OPEN",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["WIN"] == "CLOSE"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"WIN,CLOSE",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"),React.createElement('div',{className:selectflag && attributes["WIN"] == "STOP"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"WIN,STOP",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"停"))):"",obj.link == "irbyt" && obj.typ == "IR-BYT"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:flagNum * 3.5 + 4 + "rem"}},React.createElement('div',{className:selectflag && attributes["SND"] == "68"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SND,68,67",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"空调开"),React.createElement('div',{className:selectflag && attributes["SND"] == "67"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SND,67,67",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"空调关"),React.createElement('div',{className:selectflag && attributes["SND"] == "69"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SND,69,69",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"电视开关"),flagNum > 0?React.createElement('div',null,React.createElement('div',{className:'BJ_DW_FZ',style:{borderBottom:"1px solid #efefef",width:"100%",height:"1px",marginTop:"0.8rem"}}),commondata):"")):"",obj.link == "swtk" && obj.typ == "SW-TK1"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["SW1"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["SW1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"))):"",obj.link == "swtk" && obj.typ == "SW-TK2"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"7rem"}},React.createElement('div',{className:selectflag && attributes["SW1"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1开"),React.createElement('div',{className:selectflag && attributes["SW1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1关"),React.createElement('div',{className:selectflag && attributes["SW2"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2开"),React.createElement('div',{className:selectflag && attributes["SW1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2关"))):"",obj.link == "clrl" && obj.typ == "CL-RL1"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},attrObj.hasOwnProperty("titleid") && attrObj.titleid == 2?React.createElement('div',{style:{height:"7rem"}},React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["TUN"] == "OPEN"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"TUN,OPEN",'data-id':obj.macid,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["TUN"] == "CLOSE"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"TUN,CLOSE",'data-id':obj.macid,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"),React.createElement('div',{className:'BJ_DW_QC'})),React.createElement('div',{className:'BJ_BL_W100 ',style:{height:"2.5rem",marginTop:"0.5rem"}},React.createElement('div',{className:'redioAir_S'},React.createElement('div',{className:' BJ_DW_FZ FS14 BK'},"温度:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'23','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"23℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'24','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"24℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'25','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"25℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'26','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"26℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'27','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"27℃")))):React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:selectflag && attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON",'data-id':obj.macid,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:selectflag && attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF",'data-id':obj.macid,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"))):"",obj.link == "swtk0" && obj.typ == "SW-TK0"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"7rem"}},React.createElement('div',{className:attributes["RL1"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"RL1,ON,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1路开"),React.createElement('div',{className:attributes["RL1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"RL1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1路关"),React.createElement('div',{className:attributes["RL2"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"RL2,ON,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2路开"),React.createElement('div',{className:attributes["RL2"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"RL2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2路关"))):"",obj.link == "swtk" && obj.typ == "SW-TK3"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"7rem"}},React.createElement('div',{className:attributes["SW1"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1开"),React.createElement('div',{className:attributes["SW1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1关"),React.createElement('div',{className:attributes["SW2"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2开"),React.createElement('div',{className:attributes["SW2"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2关"),React.createElement('div',{className:attributes["SW3"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW3,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"3开"),React.createElement('div',{className:attributes["SW3"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW3,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"3关"))):"",obj.link == "swtk" && obj.typ == "SW-TK4"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"10.5rem"}},React.createElement('div',{className:attributes["SW1"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1开"),React.createElement('div',{className:attributes["SW1"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"1关"),React.createElement('div',{className:attributes["SW2"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2开"),React.createElement('div',{className:attributes["SW2"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"2关"),React.createElement('div',{className:attributes["SW3"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW3,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"3开"),React.createElement('div',{className:attributes["SW3"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW3,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"3关"),React.createElement('div',{className:attributes["SW4"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW4,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"4开"),React.createElement('div',{className:attributes["SW4"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SW4,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"4关"))):"",obj.link == "clrl6" && obj.typ == "CL-RL6"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},attrObj.hasOwnProperty("titleid") && attrObj.titleid == 2?React.createElement('div',{style:{height:"11.5rem"}},React.createElement('div',{className:'redioAir_S',style:{height:"8rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'空调开'),React.createElement('div',{className:selectflag && attributes["TUN"] == "OPEN"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"TUN,OPEN",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'空调关'),React.createElement('div',{className:selectflag && attributes["TUN"] == "CLOSE"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"TUN,CLOSE",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'制冷'),React.createElement('div',{className:selectflag && attributes["SMD"] == "COOL"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SMD,COOL",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'制热'),React.createElement('div',{className:selectflag && attributes["SMD"] == "HOT"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SMD,HOT",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'大风'),React.createElement('div',{className:selectflag && attributes["SSP"] == "HIGH"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,HIGH",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'中风'),React.createElement('div',{className:selectflag && attributes["SSP"] == "MID"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,MID",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'小风'),React.createElement('div',{className:selectflag && attributes["SSP"] == "LOW"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,LOW",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('div',{className:'BJ_DW_QC'}))),React.createElement('div',{style:{height:"2.5rem"}},React.createElement('div',{className:'redioAir_S'},React.createElement('div',{className:' BJ_DW_FZ FS14 BK'},"温度:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'23','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"23℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'24','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"24℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'25','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"25℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'26','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"26℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'27','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"27℃")))):React.createElement('div',{className:'redioAir_S',style:{height:"10rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'1路开'),React.createElement('div',{className:selectflag && attributes["SW1"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'1路关'),React.createElement('div',{className:selectflag && attributes["SW1"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'2路开'),React.createElement('div',{className:selectflag && attributes["SW2"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'2路关'),React.createElement('div',{className:selectflag && attributes["SW2"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'3路开'),React.createElement('div',{className:selectflag && attributes["SW3"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'3路关'),React.createElement('div',{className:selectflag && attributes["SW3"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'4路开'),React.createElement('div',{className:selectflag && attributes["SW4"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'4路关'),React.createElement('div',{className:selectflag && attributes["SW4"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'5路开'),React.createElement('div',{className:selectflag && attributes["SW5"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'5路关'),React.createElement('div',{className:selectflag && attributes["SW5"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'6路开'),React.createElement('div',{className:selectflag && attributes["SW6"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW6,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'6路关'),React.createElement('div',{className:selectflag && attributes["SW6"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW6,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""})))):"",obj.link == "swtk" && obj.typ == "SW-TK5"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"10rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'1键开'),React.createElement('div',{className:attributes["SW1"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'1键关'),React.createElement('div',{className:attributes["SW1"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'2键开'),React.createElement('div',{className:attributes["SW2"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'2键关'),React.createElement('div',{className:attributes["SW2"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'3键开'),React.createElement('div',{className:attributes["SW3"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'3键关'),React.createElement('div',{className:attributes["SW3"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'4键开'),React.createElement('div',{className:attributes["SW4"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'4键关'),React.createElement('div',{className:attributes["SW4"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'5键开'),React.createElement('div',{className:attributes["SW5"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'5键关'),React.createElement('div',{className:attributes["SW5"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""})))):"",obj.link == "swtk" && obj.typ == "SW-TK6"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"10rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'1键开'),React.createElement('div',{className:attributes["SW1"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'1键关'),React.createElement('div',{className:attributes["SW1"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'2键开'),React.createElement('div',{className:attributes["SW2"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'2键关'),React.createElement('div',{className:attributes["SW2"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'3键开'),React.createElement('div',{className:attributes["SW3"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'3键关'),React.createElement('div',{className:attributes["SW3"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'4键开'),React.createElement('div',{className:attributes["SW4"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'4键关'),React.createElement('div',{className:attributes["SW4"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'5键开'),React.createElement('div',{className:attributes["SW5"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'5键关'),React.createElement('div',{className:attributes["SW5"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'6键开'),React.createElement('div',{className:attributes["SW6"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW6,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'6键关'),React.createElement('div',{className:attributes["SW6"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW6,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}))))):"",obj.link == "clr1m" && obj.typ == "CL-R1M"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"4rem"}},React.createElement('div',{className:attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"))):"",obj.link == "bgm" && obj.typ == "MS-BGM"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S ',style:{height:"17rem"}},React.createElement('div',{className:attributes["SWI"] == "ON"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"开"),React.createElement('div',{className:attributes["SWI"] == "OFF"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SWI,OFF,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"关"),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:attributes["SPS"] == "PUS"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SPS,PUS,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"暂停"),React.createElement('div',{className:attributes["SPS"] == "PLY"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SPS,PLY,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"播放"),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:attributes["SMN"] == "1"?" stateDevChecked_S  ":" stateDev_S ",onClick:p.getOpen,'data-type':"SMN,1,1",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"第一首"),React.createElement('div',{className:attributes["SMN"] == "2"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SMN,2,2",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"第二首"),React.createElement('div',{className:attributes["SMN"] == "3"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SMN,3,3",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"第三首"),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:attributes["SVL"] == "1"?" stateDevChecked_S  ":" stateDev_S ",onClick:p.getOpen,'data-type':"SVL,1,1",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"音量最低"),React.createElement('div',{className:attributes["SVL"] == "4"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SVL,4,4",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"音量低"),React.createElement('div',{className:'BJ_DW_QC'}),React.createElement('div',{className:attributes["SVL"] == "7"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SVL,7,7",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"音量中"),React.createElement('div',{className:attributes["SVL"] == "11"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SVL,11,11",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"音量高"),React.createElement('div',{className:attributes["SVL"] == "15"?" stateDevChecked_S ":" stateDev_S ",onClick:p.getOpen,'data-type':"SVL,15,15",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"音量最高"))):"",obj.typ == "AC-TPC" || obj.typ == "AD-TPC"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC",style:{height:"11.5rem"}},React.createElement('div',{className:'redioAir_S',style:{height:"8rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'空调开'),React.createElement('div',{className:attributes["SWI"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SWI,ON",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'空调关'),React.createElement('div',{className:attributes["SWI"] == "OFF"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SWI,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'制冷'),React.createElement('div',{className:attributes["SMD"] == "COOL"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SMD,COOL",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'制热'),React.createElement('div',{className:attributes["SMD"] == "HOT"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SMD,HOT",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},'大风'),React.createElement('div',{className:attributes["SSP"] == "HIGH"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,HIGH",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},'中风'),React.createElement('div',{className:attributes["SSP"] == "MID"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,MID",'data-id':obj.macid,'data-alias':obj.alias,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},'小风'),React.createElement('div',{className:attributes["SSP"] == "LOW"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SSP,LOW",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""})),React.createElement('div',{className:'BJ_DW_QC'})),React.createElement('div',{style:{height:"2.5rem"}},React.createElement('div',{className:'redioAir_S'},React.createElement('div',{className:'BJ_DW_FZ FS14 BK '},"温度:"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 23?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'23','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"23℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 24?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'24','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"24℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 25?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'25','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"25℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 26?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'26','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"26℃"),React.createElement('div',{className:" BJ_DW_FZ " + (attributes.hasOwnProperty("STP") && attributes["STP"] == 27?" boxDevChecked_S ":" boxDev_S "),'data-type':'STP','data-id':obj.macid == "0000000000000000"?"_" + obj.id:obj.macid,'data-value':'27','data-alias':obj.alias,onClick:p.getValue,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""},"27℃")))):"",obj.link == "clpu6" && obj.typ == "CL-PU6"?React.createElement('div',{className:selectflag?"BJ_DW_XS":"BJ_DW_YC"},React.createElement('div',{className:'redioAir_S',style:{height:"7rem"}},React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},"1路开"),React.createElement('div',{className:attributes["SW1"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW1,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},"2路开"),React.createElement('div',{className:attributes["SW2"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW2,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'ON'},"3路开"),React.createElement('div',{className:attributes["SW3"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW3,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},"4路开"),React.createElement('div',{className:attributes["SW4"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW4,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('br',null)),React.createElement('div',{className:'BJ_DW_FZ',style:{height:"3rem",width:"100%"}},React.createElement('label',{htmlFor:'ON'},"5路开"),React.createElement('div',{className:attributes["SW5"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW5,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""}),React.createElement('label',{htmlFor:'OFF'},"6路开"),React.createElement('div',{className:attributes["SW6"] == "ON"?"radioChecked_S":"radio_S",onClick:p.getOpen,'data-type':"SW6,ON,OFF",'data-id':obj.macid,'data-alias':obj.alias,'data-did':obj.id,'data-grp':obj.macid == "0000000000000000"?attributes["GRP"] + "_" + attributes["TYP"]:""})))):"");});}return React.createElement('div',{className:'main ',style:{backgroundColor:"#f2f0f7",overflow:"hidden"}},React.createElement(Nav,{title:"执行设备",leftIcon:'xiaojiantou2',leftClick:this.goBack,rightIcon:'baocun',rightClick:this.doSave}),React.createElement('div',{style:{marginTop:"4.5rem"}}),React.createElement('div',{className:'labelItem'},React.createElement('div',{className:'title'},"区域选择"),React.createElement('div',{className:'more',onClick:p.doChoose},React.createElement('i',{className:"iconfont icon-xiaojiantou",style:{fontSize:"2rem"}})),React.createElement('div',{className:'text',onClick:p.doChoose,style:{color:p.state.area?"#6f6e73":"#a7a4ad"}},p.state.area?p.state.area:"请选择区域")),React.createElement('div',{className:'labelItem'},React.createElement('div',{className:'title'},"延时时长"),React.createElement('input',{className:'Sdelay',id:'time3',onFocus:p.onFocus,placeholder:'延时时长',ref:'time3'})),React.createElement('div',{className:'item_AU'},React.createElement('div',{className:'title_AU ',style:{color:"#8877ff"}},"设备选择")),React.createElement('div',{className:'line',style:{width:"100%",height:"1px"}}),React.createElement('div',{className:'exeView'},React.createElement('div',{id:'wrapper',style:{height:"100%"}},React.createElement('div',{style:{height:"auto"}},dataList,React.createElement('div',{style:{height:"1rem"}})))),React.createElement(GroupWin,{ref:'groupwin',title:"选择区域",onSelect:this.getAreaSelect}),React.createElement(MsgWin,{ref:'msg',type:'1'}));}});

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	var IconInput = __webpack_require__(253);
	var PwdInput = __webpack_require__(255);
	var Msg = __webpack_require__(250);

	var Ajax = __webpack_require__(244);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            pid: 1
	        };
	    },
	    componentDidMount: function componentDidMount() {},
	    gotologin: function gotologin() {
	        location.href = "#login";
	    },
	    getPhonecode: function getPhonecode() {
	        var p = this;
	        var phone = this.refs.phone.getValue();

	        if (phone) {
	            var reg = /^1[0-9]{10}$/;
	            if (phone.length == 11 && reg.test(phone)) {
	                Ajax("POST", "checkcodebyPhone", { phone: phone }, function (dt) {
	                    if (dt && dt.success) {
	                        p.refs.msg.setState({
	                            show: true,
	                            timeout: 1500,
	                            word: " 发送手机验证码成功"
	                        });
	                    } else {
	                        p.refs.msg.setState({
	                            show: true,
	                            timeout: 1500,
	                            word: " 发送手机验证码失败"
	                        });
	                    }
	                });
	            } else {
	                this.refs.msg.setState({
	                    show: true,
	                    timeout: 1500,
	                    word: "手机号不正确"
	                });
	            }
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入手机号"
	            });
	        }
	    },
	    doRegister: function doRegister() {
	        // var p=this;
	        var username = this.refs.username.getValue();
	        var password = this.refs.password.getValue();
	        var phonecode = this.refs.phonecode.getValue();
	        var phone = this.refs.phone.getValue();
	        if (!username) {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入用户名"
	            });
	            return;
	        }
	        if (!password) {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入密码"
	            });
	            return;
	        }
	        if (!phonecode) {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入手机验证码"
	            });
	            return;
	        }

	        if (!phone) {
	            this.refs.msg.setState({
	                show: true,
	                timeout: 1500,
	                word: "请输入手机号码"
	            });
	            return;
	        }
	        Ajax("POST", "reg", { username: username, password: password, phone: phone, phonecode: phonecode }, function (dt) {
	            if (dt && dt.success) {
	                location.href = "#prompt/1/注册成功";
	            } else {
	                location.href = "#prompt/0/" + dt.msg;
	            }
	        });
	    },
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'main' },
	            React.createElement('img', { className: 'login_bg', src: 'images/main/login_bg.png' }),
	            React.createElement(
	                'div',
	                { className: 'main', style: { position: "absolute", zIndex: 1 } },
	                React.createElement('div', { className: 'iconfont icon-xiaojiantou2', style: { position: "absolute", zIndex: 1000, width: "5rem", height: "5rem", lineHeight: "3rem", top: "1rem", left: "2%", fontSize: "3rem", color: "#f5f3f9" }, onClick: this.gotologin }),
	                React.createElement(IconInput, { ref: 'username', placeholder: '用户名', style: { width: "65%", marginLeft: "17.5%", marginTop: "70%" } }),
	                React.createElement(IconInput, { icon: 'shouji', ref: 'phone', placeholder: '手机号', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(PwdInput, { ref: 'password', placeholder: '密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ', style: { width: "100%", height: "1px" } },
	                    React.createElement(IconInput, { icon: 'yanzhengma', ref: 'phonecode', placeholder: '手机验证码', style: { width: "45%", marginLeft: "17.5%", marginTop: "2rem", float: "left" } }),
	                    React.createElement(
	                        Button,
	                        { style: { marginLeft: "4%", width: "20%", borderRadius: "5px", marginTop: "2rem", float: "left", fontSize: "1rem", height: "2.5rem", lineHeight: "2.5rem" }, onClick: this.getPhonecode },
	                        "获取验证码"
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FZ', style: { width: "100%", height: "1px" } },
	                    React.createElement(
	                        Button,
	                        { height: '3rem', style: { marginLeft: "17.5%", marginTop: "6rem", width: "65%", borderRadius: "15rem" }, onClick: this.doRegister },
	                        "注 册"
	                    )
	                ),
	                React.createElement(Msg, { ref: 'msg', type: 1 })
	            )
	        );
	    }
	});

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	var IconInput = __webpack_require__(253);
	var PwdInput = __webpack_require__(255);
	var Msg = __webpack_require__(250);

	var Ajax = __webpack_require__(244);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            phoneCodeConfirm: false,
	            username: "",
	            phone: "",
	            phonecode: "",
	            password: "",
	            passwordconfirm: false
	        };
	    },
	    componentDidMount: function componentDidMount() {},
	    gotologin: function gotologin() {
	        location.href = "#login";
	    },
	    getPhoneCode: function getPhoneCode() {
	        var p = this;
	        var username = this.refs.username.state.text;
	        var phone = this.refs.phone.state.text;
	        if (!username) {
	            this.refs.msg.setState({
	                show: true,
	                word: "请输入用户名",
	                timeout: 1500
	            });
	            return;
	        }
	        if (!phone) {
	            this.refs.msg.setState({
	                show: true,
	                word: "请输入手机号",
	                timeout: 1500
	            });
	            return;
	        }
	        var reg = /^1[0-9]{10}$/;
	        if (phone.length == 11 && reg.test(phone)) {
	            Ajax("POST", "checkcode", { username: username, phone: phone }, function (dt) {
	                if (dt && dt.success) {
	                    p.setState({
	                        phoneCodeConfirm: true
	                    });
	                    p.refs.msg.setState({ show: true, word: "获取手机验证码成功", timeout: 1500 });
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                msg: "请输入正确的手机号",
	                timeout: 1500
	            });
	            return;
	        }
	    },
	    doSetpassword: function doSetpassword() {
	        var username = this.refs.username.getValue();
	        var phone = this.refs.phone.getValue();
	        if (!username) {
	            this.refs.msg.setState({
	                show: true,
	                word: "请输入用户名",
	                timeout: 1500
	            });
	            return;
	        }
	        if (!phone) {
	            this.refs.msg.setState({
	                show: true,
	                word: "请输入手机号",
	                timeout: 1500
	            });
	            return;
	        }
	        this.setState({
	            phone: phone,
	            username: username
	        });
	        var phonecode = this.refs.phonecode.getValue();
	        if (phonecode) {
	            this.setState({
	                phonecode: phonecode
	            });
	            this.setState({
	                phoneCodeConfirm: true
	            });
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                word: "请输入验证码",
	                timeout: 1500
	            });
	            return;
	        }
	        this.setState({
	            passwordconfirm: 1
	        });
	    },
	    SetPassword: function SetPassword() {
	        var password1 = this.refs.password1.getValue();
	        var password2 = this.refs.password2.getValue();
	        if (password1 && password2 && password1 == password2) {
	            if (this.state.username && this.state.phone && this.state.phonecode) {
	                Ajax("POST", "updatePassword", { username: this.state.username, phone: this.state.phone, password: password1, code: this.state.phonecode }, function (dt) {
	                    if (dt && dt.success) {
	                        var pid = localStorage.getItem("pid");
	                        localStorage.clear();
	                        if (pid) {
	                            location.href = "#login?pid=" + pid;
	                        } else {
	                            location.href = "#login?pid=1";
	                        }
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                    }
	                });
	            } else {
	                this.refs.msg.setState({
	                    show: true,
	                    word: " 重置密码失败",
	                    timeout: 1500
	                });
	            }
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                word: "输入密码不一样",
	                timeout: 1500
	            });
	        }
	    },
	    render: function render() {
	        var p = this;
	        if (this.state.passwordconfirm) {
	            return React.createElement(
	                'div',
	                { className: 'main' },
	                React.createElement('div', { className: 'iconfont icon-xiaojiantou2', style: { position: "absolute", zIndex: 1000, width: "5rem", height: "5rem", lineHeight: "3rem", top: "1rem", left: "2%", fontSize: "3rem", color: "#f5f3f9" }, onClick: this.gotologin }),
	                React.createElement('img', { className: 'login_bg', src: 'images/main/login_bg.png' }),
	                React.createElement(
	                    'div',
	                    { className: 'main', style: { position: "absolute", zIndex: 1, top: "40%" } },
	                    React.createElement(PwdInput, { ref: 'password1', placeholder: '输入新密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                    React.createElement(PwdInput, { ref: 'password2', placeholder: '再次输入新密码', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "100%", height: "1px" } },
	                        React.createElement(
	                            Button,
	                            { height: '3rem', style: { marginLeft: "17.5%", marginTop: "6rem", width: "65%", borderRadius: "15rem" }, onClick: p.SetPassword },
	                            "确 定 重 置"
	                        )
	                    ),
	                    React.createElement(Msg, { ref: 'msg', type: 1 })
	                )
	            );
	        } else {
	            return React.createElement(
	                'div',
	                { className: 'main' },
	                React.createElement('div', { className: 'iconfont icon-xiaojiantou2', style: { position: "absolute", zIndex: 1000, width: "5rem", height: "5rem", lineHeight: "3rem", top: "1rem", left: "2%", fontSize: "3rem", color: "#f5f3f9" }, onClick: this.gotologin }),
	                React.createElement('img', { className: 'login_bg', src: 'images/main/login_bg.png' }),
	                React.createElement(
	                    'div',
	                    { className: 'main', style: { position: "absolute", zIndex: 1 } },
	                    React.createElement(IconInput, { ref: 'username', placeholder: '用户名', style: { width: "65%", marginLeft: "17.5%", marginTop: "70%" } }),
	                    React.createElement(IconInput, { ref: 'phone', icon: 'shouji', placeholder: '手机号', style: { width: "65%", marginLeft: "17.5%", marginTop: "2rem" } }),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "100%", height: "1px" } },
	                        React.createElement(IconInput, { icon: 'yanzhengma', ref: 'phonecode', placeholder: '手机验证码', style: { width: "45%", marginLeft: "19.5%", marginTop: "2rem", float: "left" } }),
	                        React.createElement(
	                            Button,
	                            { style: { marginLeft: "4%", width: "20%", borderRadius: "5px", marginTop: "2rem", float: "left", fontSize: "1rem", height: "2.5rem", lineHeight: "2.5rem" }, onClick: this.getPhoneCode },
	                            "获取验证码"
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "100%", height: "1px" } },
	                        React.createElement(
	                            Button,
	                            { height: '3rem', style: { marginLeft: "17.5%", marginTop: "6rem", width: "65%", borderRadius: "15rem" }, onClick: p.doSetpassword },
	                            "重 置 密 码"
	                        )
	                    ),
	                    React.createElement(Msg, { ref: 'msg', type: 1 })
	                )
	            );
	        }
	    }

	});

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by shanwenjie on 16/7/12.
	 */
	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            url: this.props.params.id ? this.props.params.id : "www.lierdalux.cn"
	        };
	    },

	    render: function render() {
	        return React.createElement(
	            "div",
	            { className: "main B2g" },
	            React.createElement("iframe", { src: this.state.url })
	        );
	    }
	});

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by shanwenjie on 17/12/4.
	 *
	 * test
	 *  用于复杂组件和业务逻辑处理
	 *  现有IconWin,Ajax
	 */

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Ajax = __webpack_require__(244);
	var IconButton = __webpack_require__(248);
	var IconWin = __webpack_require__(283);
	var Select = __webpack_require__(281);
	var GroupWin = __webpack_require__(284);
	var TypeWin = __webpack_require__(285);
	var IconInput = __webpack_require__(253);
	var ImgWin = __webpack_require__(347);
	var InputSelect = __webpack_require__(280);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            title: "测试",
	            user: { "username": "suojiu", "userid": 24, "role": 0, "parentid": 24, "nat": "011233444455557889999abbbccddeff", "phone": "18649821537", "companyid": 1, "exithiden": 0 },
	            IconList: [],
	            GroupList: [],
	            TypeList: []
	        };
	    },

	    componentWillMount: function componentWillMount() {},
	    myScroll: null,
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	        this.getIcon();
	        this.getGroupByUser();
	        this.getDeviceType();

	        var calendartime1 = new lCalendar();
	        calendartime1.init({
	            'trigger': '#testtime',
	            'type': 'time'
	        });
	    },
	    getGroupByUser: function getGroupByUser() {
	        var p = this;
	        var user = this.state.user;
	        Ajax("POST", "getGrpupListByUserId", { userid: user.userid }, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({
	                    GroupList: GroupList
	                });
	            }
	        });
	    },
	    getDeviceType: function getDeviceType() {
	        var p = this;
	        Ajax("POST", "getAllDeviceType", {}, function (dt) {
	            if (dt && dt.success) {
	                console.log(JSON.stringify(dt.data));
	                var TypeList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    TypeList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].typename });
	                }
	                p.setState({
	                    TypeList: TypeList
	                });
	            }
	        });
	    },
	    getIcon: function getIcon() {
	        //    var user=this.state.user;
	        var p = this;
	        Ajax("POST", "getSceneIcon", {}, function (dt) {
	            if (dt && dt.success) {
	                var IconList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    IconList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({
	                    IconList: IconList
	                });
	            }
	        });
	    },
	    goBack: function goBack() {
	        history.go(-1);
	    },
	    doRight: function doRight() {},
	    getSelectWin: function getSelectWin() {
	        this.refs.select.setState({
	            show: true

	        });
	    },
	    getIconWin: function getIconWin() {
	        this.refs.iconwin.doShow(this.state.IconList);
	    },
	    doSelect: function doSelect(attr) {
	        console.log(attr);
	    },
	    backSelect: function backSelect() {
	        this.refs.select.setState({
	            show: false
	        });
	    },
	    getIconSelect: function getIconSelect(attr) {
	        console.log(attr);
	    },
	    getGroupWin: function getGroupWin() {
	        this.refs.groupwin.doShow(this.state.GroupList);
	    },
	    getTypeWin: function getTypeWin() {
	        this.refs.typewin.doShow(this.state.TypeList);
	    },
	    getDDCWin: function getDDCWin() {
	        this.refs.select.setState({
	            show: true
	        });
	    },
	    getGroupSelect: function getGroupSelect(attr) {
	        console.log(attr);
	    },
	    getTypeSelect: function getTypeSelect(attr) {
	        console.log(attr);
	    },
	    DDCUpdate: function DDCUpdate() {},
	    exist: function exist() {
	        localStorage.clear();
	        location.href = "#";
	    },
	    doSuccess: function doSuccess() {
	        location.href = "#prompt/1/注册成功";
	    },
	    doUpdate: function doUpdate() {
	        this.refs.imgwin.setState({
	            show: true,
	            tip1: "发现新版本",
	            tip2: "v1.0.0.0"
	        });
	    },
	    updateAPPNow: function updateAPPNow() {
	        console.log("更新");
	    },
	    doInputWin: function doInputWin() {
	        this.refs.inputwin.setState({
	            show: true
	        });
	    },
	    updateInputWin: function updateInputWin(txt) {
	        this.refs.inputwin.setState({
	            show: false
	        });
	        console.log(txt);
	        if (txt) {} else {}
	    },
	    doSceneWin: function doSceneWin() {
	        this.refs.scenetime.doShow();
	    },
	    doTime: function doTime() {},
	    render: function render() {
	        // var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main B2g test' },
	            React.createElement(Nav, { title: this.state.title, rightClick: this.doRight, rightIcon: 'tianjia', leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100', style: { zIndex: "1", height: "28rem", marginTop: "4rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapper', style: { height: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto", position: "absolute", zIndex: "1", width: "100%" } },
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出图标", count: '3', onClick: this.getIconWin }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出选择框", count: '3', onClick: this.getSelectWin }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出区域", count: '3', onClick: this.getGroupWin }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出类型", count: '3', onClick: this.getTypeWin }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出DDC", count: '3', onClick: this.getDDCWin }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "退出", count: '3', onClick: this.exist }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳转成功", count: '3', onClick: this.doSuccess }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出确认", count: '3', onClick: this.doUpdate }),
	                        React.createElement(IconButton, { bgc: "TB1", color: 'LBS', icon: "A-jizhongkongzhiqi", text: "跳出输入", count: '3', onClick: this.doSceneWin })
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { id: 'testtime', style: { marginTop: "10rem" }, onClick: this.doTime },
	                    '跳出时间啊'
	                )
	            ),
	            React.createElement(IconWin, { ref: 'iconwin', onSelect: this.getIconSelect }),
	            React.createElement(Select, { ref: 'select', title: "测试", h2: '60%', h1: '75%', goBack: this.backSelect, onClick: this.doSelect }),
	            React.createElement(GroupWin, { ref: 'groupwin', onSelect: this.getGroupSelect }),
	            React.createElement(TypeWin, { ref: 'typewin', onSelect: this.getTypeSelect }),
	            React.createElement(
	                Select,
	                { ref: 'select', title: "测试", h2: '60%', h1: '60%', goBack: this.backSelect, onClick: this.DDCUpdate },
	                React.createElement(IconInput, { ref: 'ddcname', placeholder: '请输入DDC名称', icon: 'A-jizhongkongzhiqi', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } }),
	                React.createElement(IconInput, { ref: 'ddcmac', placeholder: '请输入DDC MAC地址', icon: 'A-jizhongkongzhiqi', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } }),
	                React.createElement(IconInput, { ref: 'pincode', placeholder: '请输入DDC pin码', icon: 'A-jizhongkongzhiqi', style: { width: "65%", marginLeft: "17.5%", marginTop: "10%" } })
	            ),
	            React.createElement(ImgWin, { ref: 'imgwin', doDone: this.updateAPPNow }),
	            React.createElement(InputSelect, { ref: 'inputwin', placeholder: "请输入需要排序号码", icon: "liebiao", doDone: this.updateInputWin })
	        );
	    }
	});

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	

	/**
	 * Created by caolinlin on 17/12/27.
	 *
	 * MsgsWin
	 *      style : 自定义宽度以及位置,系统方法
	 *      title : 弹框的标题
	 *       hide : 隐藏窗口
	 *     doDone : 确定按钮
	 *   doCancel : 取消按钮
	 *
	 *
	 *     eg:   <Win ref="win"/>
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            show: false,
	            type: 1, // 1: 时间控制不需要点击确定  2:需要点击确定
	            word: ""
	        };
	    },
	    componentDidUpdate: function componentDidUpdate() {},
	    hide: function hide() {
	        var p = this;
	        p.setState({ show: false });
	    },

	    stopPop: function stopPop(event) {
	        event.preventDefault();
	        event.stopPropagation();
	    },

	    doDone: function doDone() {
	        console.log("doDone");
	        if (this.props.doDone) {
	            this.props.doDone();
	        }
	    },

	    doCancel: function doCancel() {
	        this.hide();
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            "div",
	            { className: this.state.show ? " W_b BJ_DW_XS" : "W_b BJ_DW_YC" },
	            React.createElement(
	                "div",
	                { style: { position: "absolute", top: "20%", width: "100%", zIndex: "1" } },
	                React.createElement("img", { src: "images/main/tip.png", style: { width: "70%", height: "28%", marginLeft: "15%", zIndex: "1" } })
	            ),
	            React.createElement(
	                "div",
	                { style: { height: "6rem", zIndex: "110", position: "absolute", top: "40%", width: "70%", marginLeft: "15%", textAlign: "center" } },
	                React.createElement(
	                    "div",
	                    { style: { fontSize: "1.4rem", width: "100%", height: "3rem", lineHeight: "3rem", textAlign: "center", color: "#a5a3ab" } },
	                    this.state.tip1
	                ),
	                React.createElement(
	                    "div",
	                    { style: { fontSize: "1.4rem", width: "100%", height: "3rem", lineHeight: "3rem", textAlign: "center", color: "#a5a3ab" } },
	                    this.state.tip2
	                )
	            ),
	            React.createElement(
	                "div",
	                { style: { height: "4rem", zIndex: "110", position: "absolute", top: "53%", width: "70%", marginLeft: "15%" } },
	                React.createElement(
	                    "div",
	                    { className: "  MW_btn BJ_DW_FZ TBS", style: { marginLeft: "16%", zIndex: "110" }, onClick: p.doCancel },
	                    "取消"
	                ),
	                React.createElement(
	                    "div",
	                    { className: "  MW_btn BJ_DW_FY TBS", style: { marginRight: "16%", zIndex: "110" }, onClick: p.doDone },
	                    "确定"
	                )
	            ),
	            React.createElement("div", { className: " W_k", style: this.props.style ? this.props.style : {}, onClick: p.stopPop })
	        );
	    }
	});

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	

	/**
	 * Created by caolinlin on 17/12/13.
	 */
	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	var Msg = __webpack_require__(250);
	var MaskBg = __webpack_require__(349);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            success: parseInt(this.props.params.id) ? parseInt(this.props.params.id) : 0,
	            tip: this.props.params.tip ? this.props.params.tip : ""
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        this.refs.maskbg.setState({ show: true, timeout: 500 });
	        console.log(this.state.success);
	        console.log(this.state.tip);
	    },
	    doLogin: function doLogin() {
	        location.href = "#";
	    },
	    gotolast: function gotolast() {
	        history.back(1);
	    },

	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main' },
	            React.createElement('div', { className: 'iconfont icon-xiaojiantou2', style: { position: "absolute", zIndex: 1000, width: "5rem", height: "5rem", lineHeight: "3rem", top: "1rem", left: "2%", fontSize: "3rem", color: "#f5f3f9" }, onClick: this.gotolast }),
	            React.createElement('img', { className: 'login_bg', src: 'images/main/login_bg.png' }),
	            React.createElement(
	                'div',
	                { className: 'main', style: { position: "absolute", zIndex: 1 } },
	                React.createElement('div', { className: this.state.success ? "iconfont icon-chenggong" : "iconfont icon-guanbi1", style: { position: "absolute", zIndex: 1, color: "#1afa29", fontSize: "4rem", width: "100%", textAlign: "center", top: "40%", left: 0, right: 0, margin: "auto" } }),
	                React.createElement(
	                    'div',
	                    { style: { fontSize: "1.2rem", position: "absolute", zIndex: 1, width: "100%", top: "48%", left: 0, right: 0, margin: "auto", textAlign: "center" } },
	                    this.state.tip
	                ),
	                React.createElement(
	                    Button,
	                    { height: '3rem', style: { backgroundColor: "", marginLeft: "17.5%", marginTop: "1rem", width: "65%", borderRadius: "15rem", position: "absolute", top: "53%" }, onClick: p.doLogin },
	                    "返 回 登 录"
	                ),
	                React.createElement(Msg, { ref: 'msg', type: 1 }),
	                React.createElement(MaskBg, { ref: 'maskbg' })
	            )
	        );
	    }
	});

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 17/9/22.
	 *
	 *
	 *    缓冲页面
	 *             1.可以自定义透明度,用 props 定义,默认透明度为0
	 *             2.可以自定义 时长, 用 state 定义,默认 false
	 */

	"";

	var React = __webpack_require__(24);

	module.exports = React.createClass({
	    displayName: "exports",

	    getInitialState: function getInitialState() {
	        return {
	            timeout: 0,
	            show: false
	        };
	    },

	    componentDidUpdate: function componentDidUpdate() {
	        if (this.state.timeout > 0) {
	            var p = this;
	            setTimeout(function () {
	                p.setState({ show: false, timeout: 0 });
	            }, this.state.timeout);
	        }
	    },

	    render: function render() {
	        return React.createElement("div", { className: this.state.show ? " blackBg " : " hide", style: { opacity: this.props.opacity ? this.props.opacity : "0" } });
	    }
	});

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Created by shanwenjie on 17/12/13.
	 */
	'';

	var React = __webpack_require__(24);
	var Button = __webpack_require__(252);
	var Msg = __webpack_require__(250);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var ImgWin = __webpack_require__(347);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            appEditionNow: {},
	            appEditionNew: { address: "http://n2n.lierdalux.cn:8585/ui/www.zip", version: "v1.0" },
	            appVersionNew: "v1.0",
	            appVersionNow: "v1.0",
	            title: "关于",
	            isnew: true
	        };
	    },

	    componentDidMount: function componentDidMount() {
	        window.comfirmApp = this.comfirmApp;

	        try {
	            var data = JSON.parse(localStorage.getItem("ibms-edition"));
	            this.setState({
	                appEditionNow: data
	            });
	            this.refs.msg.setState({
	                word: data.version,
	                timeout: 2000,
	                show: true
	            });
	            this.getEditionCompare();
	        } catch (e) {
	            console.log(e);
	        }
	    },
	    comfirmApp: function comfirmApp(success) {
	        console.log(success);
	        console.log("-----------------------------------------------------------");
	        if (success) {
	            localStorage.setItem("ibms-edition", JSON.stringify(this.state.appEditionNew));
	            console.log("????????????????????????????????????????????????--"+JSON.stringify(this.state.appEditionNew));
	        }
	        var p = this;
	        p.refs.msg.setState({
	            word: "更新成功",
	            timeout: 1000,
	            show: true
	        });
	    },
	    getEditionCompare: function getEditionCompare() {
	        var p = this;
	        var edition = null;
	        try {
	            edition = JSON.parse(localStorage.getItem("ibms-edition"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (edition) {
	            //获取最近版本信息
	            p.setState({
	                appEditionNow: edition
	            });
	            if (edition.hasOwnProperty("version")) {
	                p.setState({
	                    appVersionNow: edition.version
	                });
	            }
	            Ajax("POST", "getAPPEditionNew", {}, function (dt) {
	                if (dt && dt.success) {
	                    var data = dt.data;
	                    p.setState({
	                        appEditionNew: data
	                    });
	                    if (data.hasOwnProperty("version")) {
	                        p.setState({
	                            appVersionNew: data.version
	                        });
	                        // console.log(p.state.appEditionNow);
	                        if (data.version != p.state.appEditionNow.version) {
	                            p.setState({
	                                isnew: true
	                            });
	                        } else {
	                            p.setState({
	                                isnew: false
	                            });
	                        }
	                    }
	                } else {
	                    console.log(dt.msg);
	                }
	            });
	        } else {
	            //当前无版本 直接支持更新
	            Ajax("POST", "getAPPEditionNew", {}, function (dt) {
	                if (dt && dt.success) {
	                    var data = dt.data;
	                    //  console.log(JSON.stringify(data));
	                    // 显示最新版本
	                    p.setState({
	                        isnew: true
	                    });
	                    p.setState({
	                        appEditionNew: data
	                    });
	                    if (data.hasOwnProperty("version")) {
	                        p.setState({
	                            appVersionNew: data.version
	                        });
	                    }
	                } else {}
	            });
	        }
	    },
	    doLogin: function doLogin() {
	        location.href = "#";
	    },
	    updateAPPNow: function updateAPPNow() {
	        this.refs.imgwin.setState({
	            show: false,
	            tip1: "",
	            tip2: ""
	        });
	        if (window.jsbridge) {
	            if (this.state.appEditionNew && this.state.appEditionNew.hasOwnProperty("address") && this.state.appEditionNew.hasOwnProperty("version")) {
	                window.jsbridge.updateUi(this.state.appEditionNew.address, this.state.appEditionNew.version);
	            }
	        } else {
	            this.refs.msg.setState({
	                show: true,
	                word: "无此权限",
	                timeout: 1500
	            });
	        }
	    },

	    getUpdateAPP: function getUpdateAPP() {
	        if (this.state.isnew) {
	            //准备更新
	            this.refs.imgwin.setState({
	                show: true,
	                tip1: "最新软件版本",
	                tip2: this.state.appVersionNew
	            });
	        } else {
	            //维持现状
	            this.refs.msg.setState({
	                show: true,
	                word: "已是最新版本，谢谢使用",
	                timeout: 1500
	            });
	        }
	    },
	    goBack: function goBack() {
	        location.href = "#mine";
	    },
	    exist: function exist() {
	        localStorage.removeItem("ibms-login");
	        localStorage.removeItem("serverUrl");
	        location.href = "#";
	    },

	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: this.state.title, leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'listtest', style: { marginTop: "4.5rem" }, onClick: this.getUpdateAPP },
	                React.createElement(
	                    'div',
	                    { className: ' BJ_DW_FZ TBS  FS14', style: { marginLeft: "1rem", height: "4rem", lineHeight: "4rem" } },
	                    '软件版本'
	                ),
	                this.state.isnew ? React.createElement(
	                    'div',
	                    { className: "BJ_DW_FZ appRound " },
	                    "new"
	                ) : "",
	                React.createElement(
	                    'div',
	                    { className: 'BJ_DW_FY TBS  FS14', style: { marginRight: "1rem", height: "4rem", lineHeight: "4rem" } },
	                    this.state.isnew ? this.state.appVersionNew : this.state.appVersionNow
	                )
	            ),
	            React.createElement(
	                Button,
	                { height: '3rem', style: { backgroundColor: "", marginLeft: "17.5%", marginTop: "1rem", width: "65%", borderRadius: "15rem", position: "absolute", bottom: "15%" }, onClick: this.exist },
	                "退 出 登 录"
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 }),
	            React.createElement(ImgWin, { ref: 'imgwin', doDone: this.updateAPPNow })
	        );
	    }
	});

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);

	var Nav = __webpack_require__(266);
	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            height: 768,
	            width: 1024,
	            id: this.props.params.id ? this.props.params.id : 0,
	            senceTimList: []
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        if (this.state.id) {
	            this.getSceneTimeBySceneId(this.state.id);
	        } else {
	            localStorage.clear();
	            location.href = "/";
	        }
	    },
	    bk: function bk() {
	        location.href = "#scenedetail";
	    },
	    getSceneTimeBySceneId: function getSceneTimeBySceneId(senceid) {
	        var p = this;
	        if (senceid) {
	            Ajax("POST", "getSenceTiming", { id: senceid }, function (dt) {
	                if (dt && dt.success) {
	                    var senceTimList = dt.data;
	                    p.setState({ senceTimList: senceTimList });
	                    if (!p.myScroll) {
	                        p.myScroll = new IScroll('#wrapperST', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                        document.addEventListener('touchmove', function () {}, false);
	                    } else {
	                        p.myScroll.refresh();
	                    }
	                }
	            });
	        }
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    getSenceById: function getSenceById(e) {
	        var id = e.currentTarget.getAttribute("data-id");
	        if (id) {
	            location.href = "#scenetimeview/" + this.state.id + "/" + id;
	        } else {
	            location.href = "#scenetimeview/" + this.state.id + "/" + 0;
	        }
	    },
	    addScene: function addScene() {
	        location.href = "#scenetimeview/" + this.state.id + "/" + 0;
	    },
	    goBack: function goBack() {
	        location.href = "#scenedetail";
	    },

	    myScroll: null,
	    render: function render() {
	        var p = this;
	        var senListData = "";
	        if (this.state.senceTimList.length > 0) {
	            senListData = this.state.senceTimList.map(function (obj, num) {
	                return React.createElement(
	                    'div',
	                    { key: 't_' + num, className: 'timeBlock ', style: { display: "inline-block", whiteSpace: "nowrap", marginTop: "1rem" }, 'data-id': obj.id, onClick: p.getSenceById },
	                    React.createElement('i', { style: { height: "5rem", lineHeight: "5rem", fontSize: "3.5rem", width: "100%" }, className: "iconfont TBS  icon-shijian BJ_DW_FZ" }),
	                    React.createElement(
	                        'div',
	                        { style: { height: "2.5rem", lineHeight: "2.5rem", width: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }, className: 'TBS' },
	                        obj.name
	                    ),
	                    React.createElement(
	                        'div',
	                        { style: { height: "2.5rem", lineHeight: "2.5rem", fontSize: "1.2rem" }, className: 'WZS' },
	                        obj.cycleflag == 1 ? "周期触发: " + obj.start : "无周期触发:" + obj.datetime
	                    )
	                );
	            });
	        }
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: '情景定时', leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'tianjia', rightClick: this.addScene }),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W100', style: { zIndex: "1", height: "96%", marginTop: "4rem" } },
	                React.createElement(
	                    'div',
	                    { id: 'wrapperST', style: { height: "100%" } },
	                    React.createElement(
	                        'div',
	                        { style: { height: "auto", position: "absolute", zIndex: "1", width: "100%" } },
	                        senListData
	                    )
	                )
	            )
	        );
	    }

	});
	/*  <div  className="timeBlock " style={{display:"inline-block",whiteSpace:"nowrap",marginTop:"1rem"}}  onClick={p.addSenceById}>
	     <i style={{height:"5rem",lineHeight:"5rem",fontSize:"3.5rem",width:"100%"}} className={"iconfont TBS  icon-shijian BJ_DW_FZ BJ_DQ_ZX"} />
	 </div>*/

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by caolinlin on 18/2/28.
	 */

	'';

	var React = __webpack_require__(24);
	var Ajax = __webpack_require__(244);
	var Nav = __webpack_require__(266);
	var Weeks = __webpack_require__(273);
	var Msg = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            cycle: 1,
	            id: parseInt(this.props.params.id) ? parseInt(this.props.params.id) : 0,
	            sceneid: parseInt(this.props.params.sceneid) ? parseInt(this.props.params.sceneid) : 0,
	            datetime: "",
	            weeks: [1, 0, 0, 0, 0, 0, 0, 0],
	            timename: "",
	            start: ""
	        };
	    },

	    myScroll: "",

	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        if (this.state.sceneid) {

	            //可以添加
	            if (this.state.id) {
	                var p = this;
	                Ajax("POST", "getSenceTimingById", { id: this.state.id }, function (dt) {
	                    if (dt && dt.success) {
	                        var scentime = dt.data;
	                        if (scentime.hasOwnProperty("name")) {
	                            p.setState({
	                                timename: scentime.name
	                            });
	                        }
	                        if (scentime.hasOwnProperty("cycleflag")) {
	                            p.setState({
	                                cycle: scentime.cycleflag
	                            });
	                        }
	                        if (scentime.hasOwnProperty("start")) {
	                            p.setState({
	                                start: scentime.start
	                            });
	                        }
	                        if (scentime.cycleflag) {
	                            if (scentime.hasOwnProperty("week")) {
	                                var week = scentime.week.split(",");
	                                var weeks = [0, 0, 0, 0, 0, 0, 0, 0];
	                                for (var i = 0; i < week.length; i++) {
	                                    if (week[i]) {
	                                        weeks[week[i]] = 1;
	                                    }
	                                }
	                                console.log("weeks:" + weeks);
	                                p.setState({
	                                    weeks: weeks
	                                });
	                                p.refs.weeks.setweekValue(weeks);
	                            } else {
	                                p.refs.weeks.setweekValue([1, 0, 0, 0, 0, 0, 0, 0]);
	                            }
	                        } else {
	                            if (scentime.hasOwnProperty("datetime")) {
	                                setTimeout(function () {
	                                    p.setState({
	                                        datetime: scentime.datetime
	                                    });
	                                }, 600);
	                            }
	                        }
	                    }
	                });
	            } else {
	                this.setState({
	                    datetime: "",
	                    weeks: [1, 0, 0, 0, 0, 0, 0, 0],
	                    timename: "",
	                    start: "",
	                    cycle: 1
	                });

	                this.refs.weeks.setweekValue([1, 0, 0, 0, 0, 0, 0, 0]);
	            }
	        } else {
	            location.href = "#scenedetail";
	        }
	        var calendartime1 = new lCalendar();
	        calendartime1.init({
	            'trigger': '#time1',
	            'type': 'time'
	        });

	        var calendartime2 = new lCalendar();
	        calendartime2.init({
	            'trigger': '#time2',
	            'type': 'date'
	        });
	    },
	    bk: function bk() {
	        if (this.state.sceneid) {
	            location.href = "";
	        }
	    },

	    goBack: function goBack() {
	        if (this.state.sceneid) {
	            location.href = "#sencetime" + "/" + this.state.sceneid;
	        } else {
	            location.href = "#scenedetail";
	        }
	    },

	    doSave: function doSave() {
	        var p = this;
	        var timename = this.state.timename;
	        if (!timename) {
	            this.refs.msg.setState({
	                word: "请输入情景定时名称",
	                timeout: 1500
	            });
	            return;
	        }
	        var tritime = document.getElementById("time1").value;
	        if (!tritime) {
	            this.refs.msg.setState({
	                word: "请选择定时时间",
	                timeout: 1500
	            });
	            return;
	        }

	        var weekString = "";
	        var datetime = "";

	        if (this.state.cycle) {
	            var weeks = this.refs.weeks.getweekSelect();
	            var weektmp = [];
	            for (var j = 0; j < weeks.length; j++) {
	                if (j == 0 && weeks[j] == 1) {
	                    weekString = "0";
	                } else {
	                    if (weeks[j]) {
	                        weektmp.push(j);
	                    }
	                }
	            }
	            if (weektmp.length > 0) {
	                weekString = weektmp.join(",");
	            }
	        } else {
	            datetime = document.getElementById("time2").value ? document.getElementById("time2").value : "";
	        }
	        if (this.state.id) {
	            //更新情景
	            Ajax("POST", "setSenceTiming", {
	                id: this.state.id,
	                name: timename,
	                start: tritime,
	                cycleflag: this.state.cycle,
	                week: weekString,
	                date: datetime,
	                senceid: this.state.sceneid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    location.href = "#sencetime/" + p.state.sceneid;
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        } else {
	            //更新情景
	            Ajax("POST", "setSenceTiming", {
	                id: 0,
	                name: timename,
	                start: tritime,
	                cycleflag: this.state.cycle,
	                week: weekString,
	                date: datetime,
	                senceid: this.state.sceneid
	            }, function (dt) {
	                if (dt && dt.success) {
	                    location.href = "#sencetime/" + p.state.sceneid;
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1500 });
	                }
	            });
	        }
	    },

	    doChoose: function doChoose() {
	        console.log("doChoose");
	    },
	    doLogic: function doLogic(e) {
	        var p = this;
	        var id = e.currentTarget.getAttribute("data-id");
	        console.log("id : " + id);
	        p.setState({ logic: id });
	    },

	    onFocus: function onFocus() {
	        var input1 = document.getElementById("time1");
	        if (input1) {
	            input1.blur();
	        }
	        var input2 = document.getElementById("time2");
	        if (input2) {
	            input2.blur();
	        }
	    },
	    doCycle: function doCycle() {
	        if (this.state.cycle) {
	            this.setState({
	                cycle: 0
	            });
	        } else {
	            this.setState({
	                cycle: 1
	            });
	        }
	    },
	    getTimename: function getTimename(e) {
	        var value = e.currentTarget.value;
	        this.setState({
	            timename: value
	        });
	    },
	    render: function render() {
	        var p = this;
	        return React.createElement(
	            'div',
	            { className: 'main ', style: { backgroundColor: "#f2f0f7", overflow: "hidden" } },
	            React.createElement(Nav, { title: "情景定时", leftIcon: 'xiaojiantou2', leftClick: this.goBack, rightIcon: 'baocun', rightClick: this.doSave }),
	            React.createElement('div', { style: { marginTop: "4.5rem" } }),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "定时名称"
	                ),
	                React.createElement('input', { className: 'BJ_BL_W20 BJ_DQ_ZX BJ_DW_FY FS13 ', style: { height: "3rem", lineHeight: "3rem", marginTop: "0.75rem", marginRight: "1rem" }, onFocus: p.onFocus, placeholder: '请输入', value: this.state.timename, onChange: this.getTimename })
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "定时时间"
	                ),
	                React.createElement('input', { id: 'time1', className: 'BJ_BL_W30 BJ_DQ_ZX BJ_DW_FY FS13 ', style: { height: "3rem", lineHeight: "3rem", marginTop: "0.75rem", marginRight: "1rem" }, onFocus: p.onFocus, placeholder: '时间', value: this.state.start })
	            ),
	            React.createElement(
	                'div',
	                { className: 'labelItem' },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "有无周期"
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "right", width: "2rem", textAlign: "center", marginRight: "1.5rem" }, 'data-id': 2, onClick: p.doCycle },
	                    React.createElement('i', { className: "JQS iconfont " + (this.state.cycle != 1 ? "icon-xuanzhong " : " icon-weixuanzhong "), style: { fontSize: "2.5rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "right", width: "2.5rem", textAlign: "right", color: "#9a98a0" } },
	                    "无"
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "right", width: "2.5rem", textAlign: "center" }, 'data-id': 1, onClick: p.doCycle },
	                    React.createElement('i', { className: "JQS iconfont " + (this.state.cycle == 1 ? "icon-xuanzhong " : " icon-weixuanzhong "), style: { fontSize: "2.5rem" } })
	                ),
	                React.createElement(
	                    'div',
	                    { style: { float: "right", width: "2rem", textAlign: "right", color: "#9a98a0" } },
	                    "有"
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: this.state.cycle == 1 ? "labelItem" : "BJ_DW_YC" },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "每周设定"
	                ),
	                React.createElement(Weeks, { style: { float: "right", marginRight: "1rem", marginTop: "2rem" }, ref: 'weeks' })
	            ),
	            React.createElement(
	                'div',
	                { className: this.state.cycle == 1 ? " BJ_DW_YC " : "labelItem" },
	                React.createElement(
	                    'div',
	                    { className: 'title' },
	                    "选择日期"
	                ),
	                React.createElement('input', { id: 'time2', className: 'BJ_BL_W30 BJ_DQ_ZX BJ_DW_FY FS13 ', style: { height: "3rem", lineHeight: "3rem", marginTop: "0.75rem", marginRight: "1rem" }, onFocus: p.onFocus, placeholder: '日期', value: this.state.datetime })
	            ),
	            React.createElement(Msg, { ref: 'msg', type: 1 })
	        );
	    }
	});

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var Input = __webpack_require__(254);
	var Ajax = __webpack_require__(244);
	var IconWin = __webpack_require__(283);
	var Msg = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            id: parseInt(this.props.params.id),
	            title: "区域",
	            GroupList: [],
	            icon: "xiuxishi",
	            iconid: 1,
	            devicelist: [],
	            selectDev: []

	        };
	    },
	    myScroll: null,
	    componentDidUpdate: function componentDidUpdate() {
	        var p = this;
	        if (!p.myScroll) {
	            p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true });
	            document.addEventListener('touchmove', function () {}, false);
	        } else {
	            p.myScroll.refresh();
	        }
	    },
	    componentDidMount: function componentDidMount() {
	        window.bk = this.bk;
	        var p = this;
	        this.getUser(function (user) {
	            if (user) {
	                p.getGroupType();
	                if (p.state.id == 0) {
	                    p.getNoAllocDevice(user);
	                } else {
	                    p.getGroupDevice(user);
	                    p.getGroupInfo(p.state.id);
	                }
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getGroupInfo: function getGroupInfo(groupid) {
	        var p = this;
	        Ajax("POST", "getGroupByGroupId", { id: groupid }, function (dt) {
	            if (dt && dt.success) {
	                console.log(JSON.stringify(dt.data[0]));
	                p.refs.buttoname.setValue(dt.data[0].name);
	                p.setState({
	                    iconid: dt.data[0].iconid,
	                    icon: dt.data[0].dicon
	                });
	            }
	        });
	    },

	    getNoAllocDevice: function getNoAllocDevice(user) {
	        var p = this;
	        Ajax("POST", "getNoGroupDeciceListByUserId", { userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	            //  console.log("1dt : " + JSON.stringify(dt));
	            if (dt && dt.success) {
	                p.setState({ devicelist: [] });
	                p.setState({ devicelist: dt.data });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1000 });
	            }
	        });
	    },
	    getGroupDevice: function getGroupDevice(user) {
	        var p = this;
	        Ajax("POST", "getNoGroupDeciceListByUserId", {
	            userid: user.parentid,
	            uid: user.userid,
	            role: user.role
	        }, function (dt) {
	            if (dt && dt.success) {
	                var devicelist = dt.data;
	                Ajax("POST", "getDeviceListByGroupId", { id: p.state.id, userid: user.parentid, uid: user.userid, role: user.role }, function (dt) {
	                    if (dt && dt.success) {
	                        var deviceNow = dt.data;
	                        p.setState({ selectDev: [] });
	                        p.setState({ selectDev: deviceNow });
	                        for (var i = 0; i < deviceNow.length; i++) {
	                            if (deviceNow[i]) {
	                                devicelist.unshift(deviceNow[i]);
	                            }
	                        }
	                        p.setState({ devicelist: [] });
	                        p.setState({
	                            devicelist: devicelist
	                        });
	                    } else {
	                        p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1000 });
	                    }
	                });
	                if (!p.myScroll) {
	                    p.myScroll = new IScroll('#wrapper', { scrollX: false, scrollY: true, click: true, mouseWheel: true });
	                    document.addEventListener('touchmove', function () {}, false);
	                } else {
	                    p.myScroll.refresh();
	                }
	            } else {
	                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 1000 });
	            }
	        });
	    },
	    getGroupType: function getGroupType() {
	        var p = this;
	        Ajax("POST", "getGroupIconList", {}, function (dt) {
	            if (dt && dt.success) {
	                var GroupList = [];
	                var icondata = dt.data;
	                for (var i in icondata) {
	                    GroupList.push({ id: icondata[i].id, icon: icondata[i].dicon, name: icondata[i].name });
	                }
	                p.setState({
	                    GroupList: GroupList
	                });
	            }
	        });
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	            if (user.hasOwnProperty("role")) {
	                this.setState({ role: user.role });
	            }
	        }
	        cb(user);
	    },
	    saveGroup: function saveGroup() {
	        var p = this;
	        var name = this.refs.buttoname.getValue();
	        console.log(name);
	        if (!name) {
	            p.refs.msg.setState({
	                word: "请输入区域名称", timeout: 1000, show: true
	            });
	            return;
	        }
	        if (/[@#\$%\^&\*]+/g.test(name)) {
	            p.refs.msg.setState({ word: "区域名称存在非法字符", timeout: 1000, show: true });
	            return;
	        }
	        var iconid = this.state.iconid;
	        var selectDev = this.state.selectDev;
	        if (this.state.id == 0) {
	            //添加
	            //添加区域
	            Ajax("POST", "saveGroup", { name: name, iconid: iconid, userid: p.state.user.userid }, function (dt) {
	                if (dt && dt.success) {
	                    var groupid = dt.data;
	                    if (selectDev.length) {
	                        //添加设备和区域关联
	                        var selectDevId = [];
	                        for (var i = 0; i < selectDev.length; i++) {
	                            selectDevId.push(selectDev[i].id);
	                        }

	                        selectDevId = selectDevId.join(",");
	                        Ajax("POST", "addDevicelistToGroup", { groupid: groupid, deviceList: selectDevId }, function (dt) {
	                            if (dt.success) {
	                                location.href = "#groupList";
	                            } else {
	                                p.refs.msg.setState({ show: true, word: dt.msg, timeout: 2000 });
	                            }
	                        });
	                    }
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 2000 });
	                }
	            });
	        } else {
	            //修改
	            // 修改区域和设备的关联
	            Ajax("POST", "updateGroupByGroupId", { iconid: iconid, name: name, userid: this.state.user.userid, id: this.state.id }, function (dt) {
	                if (dt && dt.success) {
	                    var selectDev = p.state.selectDev;

	                    var selectDevId = [];
	                    for (var i = 0; i < selectDev.length; i++) {
	                        selectDevId.push(selectDev[i].id);
	                    }
	                    selectDevId = selectDevId.join(",");
	                    if (!selectDevId) {
	                        selectDevId = 0;
	                    }
	                    Ajax("POST", "addDevicelistToGroup", { groupid: p.state.id, deviceList: selectDevId }, function (dt) {
	                        console.log("dt : " + JSON.stringify(dt));
	                        if (dt.success) {
	                            location.href = "#groupList";
	                        } else {
	                            p.refs.msg.setState({ show: true, type: "text", word: dt.msg, timeout: 2000 });
	                        }
	                    });
	                } else {
	                    p.refs.msg.setState({ show: true, word: dt.msg, timeout: 2000 });
	                }
	            });
	        }
	    },
	    back: function back() {
	        location.href = "#groupList";
	    },
	    getIcon: function getIcon() {
	        var select = {};
	        if (this.state.id == 0) {

	            select = { id: 1, icon: "xiuxishi" };
	        } else {
	            select = { id: this.state.iconid, icon: this.state.dicon };
	        }
	        this.refs.groupwin.doShow(this.state.GroupList);
	        this.refs.groupwin.doChoose(select);
	    },
	    getAreaSelect: function getAreaSelect(attr) {
	        //  console.log(JSON.stringify(attr));
	        if (attr) {
	            this.setState({
	                iconid: attr.id,
	                icon: attr.icon
	            });
	        }
	    },
	    checkHandler: function checkHandler(e) {
	        e.preventDefault();
	        e.stopPropagation();
	        var p = this;
	        var devid = e.currentTarget.getAttribute("data-id") ? e.currentTarget.getAttribute("data-id") : 0;
	        var attr = p.state.selectDev;
	        var flag = true;
	        var attrNew = [];
	        for (var i = 0; i < attr.length; i++) {
	            if (devid == attr[i].id) {
	                flag = false;
	            } else {
	                attrNew.push(attr[i]);
	            }
	        }
	        if (flag) {
	            var obj = { id: devid };
	            attrNew.push(obj);
	        }

	        p.setState({ selectDev: attrNew });
	    },
	    render: function render() {
	        var p = this;
	        var attr = this.state.devicelist.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            var selectflag = false;
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            var sd = p.state.selectDev;
	            for (var i = 0; i < sd.length; i++) {
	                if (sd[i].id == obj.id) {
	                    selectflag = true;
	                    break;
	                }
	            }
	            return React.createElement(
	                'div',
	                { className: 'item_S  B2g', style: { width: "100%", marginTop: "2px" }, key: "senseD" + num + "obj" + obj.id },
	                React.createElement(
	                    'div',
	                    { style: { height: "4rem", width: "100%" } },
	                    React.createElement(
	                        'div',
	                        { className: " itemS BJ_DW_FZ  " + bgc },
	                        React.createElement('i', { className: "itemIcon_S iconfont  " + (obj.dicon ? "icon-" + obj.dicon : " icon-zhanghao"), style: { fontSize: "3rem", marginLeft: "0.5rem" } })
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', style: { width: "70%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                        React.createElement(
	                            'div',
	                            { className: 'itemTitle_S', style: { height: "1.8rem", lineHeight: "2rem", width: "100%", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" } },
	                            obj.name
	                        ),
	                        React.createElement(
	                            'div',
	                            { className: 'BJ_DW_FZ', style: { color: "#b7b7b7" } },
	                            React.createElement(
	                                'div',
	                                { className: "FS12 BJ_BJ_ML10 BJ_DW_FZ", style: { marginTop: "2px", height: "1.8rem", lineHeight: "1.8rem" } },
	                                obj.ddcname ? obj.ddcname : ""
	                            ),
	                            React.createElement(
	                                'div',
	                                { className: "BJ_DW_FZ  FS12 ", style: { marginTop: "0.1rem", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap", width: "15rem", height: "1.8rem", lineHeight: "1.8rem" } },
	                                obj.alias ? React.createElement(
	                                    'span',
	                                    null,
	                                    ' | '
	                                ) : "",
	                                obj.alias ? obj.alias : ""
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FZ', 'data-id': obj.id, style: { width: "10%", height: "5rem", lineHeight: "5rem" }, onClick: p.checkHandler },
	                        React.createElement('i', { className: "itemIcon_S iconfont " + (selectflag ? "icon-xuanzhong JQS" : " icon-weixuanzhong JQS"), style: { fontSize: "3rem" } })
	                    )
	                )
	            );
	        });

	        return React.createElement(
	            'div',
	            { className: 'main B2g ', style: { position: "fixed" } },
	            React.createElement(Nav, { title: this.state.title, rightClick: this.saveGroup, rightIcon: 'baocun', leftIcon: 'xiaojiantou2', leftClick: this.back }),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98  B2g', style: { position: "absolute", zIndex: "2", marginLeft: "1%", height: "10rem", marginTop: "4rem" } },
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100  YS_BJ_LBS LB TC', style: { height: "4rem", lineHeight: "4rem", marginTop: "1rem" } },
	                    React.createElement(
	                        'text',
	                        { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14 ' },
	                        '区域名称'
	                    ),
	                    ' ',
	                    React.createElement(Input, { style: { float: "right", width: "50%", marginTop: "0.5rem" }, ref: 'buttoname', doChange: this.getGroupName })
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'BJ_BL_W100 YS_BJ_LBS LB TC', style: { height: "4rem", marginTop: "0.5rem", lineHeight: "4rem" } },
	                    React.createElement(
	                        'text',
	                        { className: 'BJ_DW_FZ BJ_BJ_PL10 FS14 ' },
	                        ' 图标选择'
	                    ),
	                    ' ',
	                    React.createElement(
	                        'div',
	                        { className: 'BJ_DW_FY', style: { marginRight: "2rem", width: "4rem", height: "4rem" }, onClick: this.getIcon },
	                        React.createElement('i', { className: "iconfont fontS iconfont  " + (this.state.icon ? "icon-" + this.state.icon : " icon-xiuxishi"), style: { fontSize: "3rem" } })
	                    )
	                )
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem", marginTop: "14rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: "4rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            attr
	                        )
	                    )
	                )
	            ),
	            React.createElement(IconWin, { ref: 'groupwin', title: "图片选择", onSelect: this.getAreaSelect }),
	            React.createElement(Msg, { ref: 'msg', type: '1' })
	        );
	    }
	});

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'';

	var React = __webpack_require__(24);
	var Nav = __webpack_require__(266);
	var ItemList = __webpack_require__(278);
	var Ajax = __webpack_require__(244);
	var Msg = __webpack_require__(250);
	var Select = __webpack_require__(281);
	var IconInput = __webpack_require__(253);
	var OperatingListWin = __webpack_require__(263);
	var MsgConfirm = __webpack_require__(250);

	module.exports = React.createClass({
	    displayName: 'exports',

	    getInitialState: function getInitialState() {
	        return {
	            user: null,
	            deleteId: 0,
	            robotList: []
	        };
	    },
	    componentDidMount: function componentDidMount() {
	        var p = this;
	        window.bk = this.bk;
	        this.getUser(function (user) {
	            if (user) {
	                p.getRobotByUserId(user.userid, user.parentid);
	            } else {
	                localStorage.clear();
	                location.href = "/";
	            }
	        });
	    },
	    getRobotByUserId: function getRobotByUserId(userid, parentid) {},
	    bk: function bk() {
	        location.href = "#mine";
	    },
	    getUser: function getUser(cb) {
	        var user = null;
	        try {
	            user = JSON.parse(localStorage.getItem("ibms-login"));
	        } catch (e) {
	            console.log(e);
	        }
	        if (user) {
	            this.setState({ user: user });
	        }
	        cb(user);
	    },
	    myScroll: null,
	    goBack: function goBack() {
	        location.href = "#mine";
	    },
	    getRobotOp: function getRobotOp(id) {
	        //   console.log(id);
	        if (id) {
	            this.refs.operatingListWin.setState({
	                data: [{ name: "删除", id: 2, fid: id }, { name: "修改", id: 3, fid: id }, { name: "参看二维码", id: 4, fid: id }]
	            });
	            if (id) {
	                this.setState({
	                    videoid: id
	                });
	                console.log(id);
	                this.refs.operatingListWin.show();
	            }
	        }
	    },
	    selectItem: function selectItem(id, sceneid) {
	        if (id && sceneid) {
	            this.refs.operatingListWin.hide();
	            switch (parseInt(id)) {
	                case 2:
	                    this.deleteRobot(sceneid);break;
	                case 3:
	                    this.updateRobotById(sceneid);break;
	                case 4:
	                    this.queryRobot(sceneid);break;
	                default:
	                    break;
	            }
	        }
	    },
	    deleteDDC: function deleteDDC(id) {
	        console.log("id:" + id);
	        this.setState({
	            deleteId: id
	        });
	        this.refs.msgconfirm.setState({
	            show: true,
	            word: "是否删除此网关"
	        });
	    },
	    addRobot: function addRobot() {
	        this.refs.robotbrand.setState({
	            show: true
	        });
	    },
	    getRobotDetail: function getRobotDetail() {},
	    render: function render() {
	        var p = this;
	        var robotList = this.state.robotList.map(function (obj, num) {
	            var key = num % 6;
	            var bgc = "";
	            switch (key) {
	                case 0:
	                    bgc = "TB1";break;
	                case 1:
	                    bgc = "TB2";break;
	                case 2:
	                    bgc = "TB3";break;
	                case 3:
	                    bgc = "TB4";break;
	                case 4:
	                    bgc = "TB5";break;
	                case 5:
	                    bgc = "TB6";break;
	                default:
	                    bgc = "TB1";break;
	            }
	            return React.createElement(ItemList, { type: 1, key: "robot" + num, info: '查看', id: obj.id, bgc: bgc, icon: obj.icon, name: obj.sn, tip: obj.name, sendCommand: p.getRobotDetail, ItemClick: p.getRobotOp });
	        });
	        return React.createElement(
	            'div',
	            { className: 'main B2g' },
	            React.createElement(Nav, { title: "我的机器人", rightClick: this.addRobot, rightIcon: 'tianjia', leftIcon: 'xiaojiantou2', leftClick: this.goBack }),
	            React.createElement(
	                'div',
	                { className: 'bi', style: { height: "11rem", width: "100%", color: "white", position: "relative", zIndex: "2" } },
	                React.createElement('div', { style: { position: "relative", top: "4rem", backgroundImage: "url(images/main/ad1.png)", backgroundImageLayout: "center", backgroundSize: "100%", height: "7rem", zIndex: "2" } })
	            ),
	            React.createElement(
	                'div',
	                { className: 'BJ_BL_W98', style: { position: "absolute", zIndex: "1", marginLeft: "1%", height: "52rem" } },
	                React.createElement(
	                    'div',
	                    { style: { height: "80%", width: "100%", paddingBottom: 4.5 * 2 + "rem" } },
	                    React.createElement(
	                        'div',
	                        { id: 'wrapper', style: { height: "100%" } },
	                        React.createElement(
	                            'div',
	                            { style: { height: "auto" } },
	                            robotList
	                        )
	                    )
	                )
	            )
	        );
	    }
	});

/***/ }
/******/ ]);